{"version":3,"file":"dexie-helper.js","names":["_dexie","require","_index","_rxSchemaHelper","DEXIE_DOCS_TABLE_NAME","exports","DEXIE_CHANGES_TABLE_NAME","DEXIE_ATTACHMENTS_TABLE_NAME","RX_STORAGE_NAME_DEXIE","DEXIE_STATE_DB_BY_NAME","Map","REF_COUNT_PER_DEXIE_DB","getDexieDbWithTables","databaseName","collectionName","settings","schema","dexieDbName","version","state","getFromMapOrCreate","value","useSettings","flatClone","autoOpen","dexieDb","Dexie","dexieStoresSettings","getDexieStoreSchema","stores","open","dexieTable","dexieAttachmentsTable","booleanIndexes","getBooleanIndexes","set","closeDexieDb","statePromise","prevCount","get","newCount","close","delete","DEXIE_PIPE_SUBSTITUTE","dexieReplaceIfStartsWithPipe","str","split","length","map","part","join","startsWith","withoutFirst","substring","dexieReplaceIfStartsWithPipeRevert","fromStorageToDexie","d","fromStorageToDexieField","forEach","idx","val","getProperty","newVal","setProperty","fromDexieToStorage","fromDexieToStorageField","documentData","Array","isArray","row","ret","Object","entries","key","rxJsonSchema","parts","primaryKey","getPrimaryFieldOfPrimaryKey","push","indexes","index","arIndex","toArray","dexieSchemaRows","filter","elem","pos","arr","indexOf","dexieSchema","getDocsInDb","internals","docIds","docsInDb","bulkGet","attachmentObjectId","documentId","attachmentId","checkedFields","Set","fields","field","has","add","schemaObj","getSchemaByObjectPath","type","uniqueArray"],"sources":["../../../../src/plugins/storage-dexie/dexie-helper.ts"],"sourcesContent":["import type {\n    DexieStorageInternals,\n    RxDocumentData,\n    RxJsonSchema\n} from '../../types/index.d.ts';\nimport { Dexie } from 'dexie';\nimport type { DexieSettings } from '../../types/index.d.ts';\nimport { flatClone, getFromMapOrCreate, getProperty, setProperty, toArray, uniqueArray } from '../utils/index.ts';\nimport {\n    getPrimaryFieldOfPrimaryKey,\n    getSchemaByObjectPath\n} from '../../rx-schema-helper.ts';\n\nexport const DEXIE_DOCS_TABLE_NAME = 'docs';\nexport const DEXIE_CHANGES_TABLE_NAME = 'changes';\nexport const DEXIE_ATTACHMENTS_TABLE_NAME = 'attachments';\n\nexport const RX_STORAGE_NAME_DEXIE = 'dexie';\n\nconst DEXIE_STATE_DB_BY_NAME: Map<string, DexieStorageInternals> = new Map();\nconst REF_COUNT_PER_DEXIE_DB: Map<DexieStorageInternals, number> = new Map();\nexport function getDexieDbWithTables(\n    databaseName: string,\n    collectionName: string,\n    settings: DexieSettings,\n    schema: RxJsonSchema<any>\n): DexieStorageInternals {\n    const dexieDbName = 'rxdb-dexie-' + databaseName + '--' + schema.version + '--' + collectionName;\n\n    const state = getFromMapOrCreate(\n        DEXIE_STATE_DB_BY_NAME,\n        dexieDbName,\n        () => {\n            const value = (async () => {\n                /**\n                 * IndexedDB was not designed for dynamically adding tables on the fly,\n                 * so we create one dexie database per RxDB storage instance.\n                 * @link https://github.com/dexie/Dexie.js/issues/684#issuecomment-373224696\n                 */\n                const useSettings = flatClone(settings);\n                useSettings.autoOpen = false;\n                const dexieDb = new Dexie(dexieDbName, useSettings);\n                const dexieStoresSettings = {\n                    [DEXIE_DOCS_TABLE_NAME]: getDexieStoreSchema(schema),\n                    [DEXIE_CHANGES_TABLE_NAME]: '++sequence, id',\n                    [DEXIE_ATTACHMENTS_TABLE_NAME]: 'id'\n                };\n\n                dexieDb.version(1).stores(dexieStoresSettings);\n                await dexieDb.open();\n\n                return {\n                    dexieDb,\n                    dexieTable: (dexieDb as any)[DEXIE_DOCS_TABLE_NAME],\n                    dexieAttachmentsTable: (dexieDb as any)[DEXIE_ATTACHMENTS_TABLE_NAME],\n                    booleanIndexes: getBooleanIndexes(schema)\n                };\n            })();\n            DEXIE_STATE_DB_BY_NAME.set(dexieDbName, state);\n            REF_COUNT_PER_DEXIE_DB.set(state, 0);\n            return value;\n        }\n    );\n    return state;\n}\n\nexport async function closeDexieDb(statePromise: DexieStorageInternals) {\n    const state = await statePromise;\n    const prevCount = REF_COUNT_PER_DEXIE_DB.get(statePromise);\n    const newCount = (prevCount as any) - 1;\n    if (newCount === 0) {\n        state.dexieDb.close();\n        REF_COUNT_PER_DEXIE_DB.delete(statePromise);\n    } else {\n        REF_COUNT_PER_DEXIE_DB.set(statePromise, newCount);\n    }\n}\n\n\n\n/**\n * It is not possible to set non-javascript-variable-syntax\n * keys as IndexedDB indexes. So we have to substitute the pipe-char\n * which comes from the key-compression plugin.\n */\nexport const DEXIE_PIPE_SUBSTITUTE = '__';\nexport function dexieReplaceIfStartsWithPipe(str: string): string {\n    const split = str.split('.');\n    if (split.length > 1) {\n        return split.map(part => dexieReplaceIfStartsWithPipe(part)).join('.');\n    }\n\n    if (str.startsWith('|')) {\n        const withoutFirst = str.substring(1);\n        return DEXIE_PIPE_SUBSTITUTE + withoutFirst;\n    } else {\n        return str;\n    }\n}\n\nexport function dexieReplaceIfStartsWithPipeRevert(str: string): string {\n    const split = str.split('.');\n    if (split.length > 1) {\n        return split.map(part => dexieReplaceIfStartsWithPipeRevert(part)).join('.');\n    }\n\n    if (str.startsWith(DEXIE_PIPE_SUBSTITUTE)) {\n        const withoutFirst = str.substring(DEXIE_PIPE_SUBSTITUTE.length);\n        return '|' + withoutFirst;\n    } else {\n        return str;\n    }\n}\n\n\n/**\n * IndexedDB does not support boolean indexing.\n * So we have to replace true/false with '1'/'0'\n * @param d \n */\nexport function fromStorageToDexie<RxDocType>(\n    booleanIndexes: string[],\n    d: RxDocumentData<RxDocType>\n): any {\n    if (!d) {\n        return d;\n    }\n    d = flatClone(d);\n    d = fromStorageToDexieField(d);\n\n    booleanIndexes.forEach(idx => {\n        const val = getProperty(d, idx);\n        const newVal = val ? '1' : '0';\n        setProperty(d, idx, newVal);\n    });\n\n    return d;\n}\nexport function fromDexieToStorage<RxDocType>(\n    booleanIndexes: string[],\n    d: any\n): RxDocumentData<RxDocType> {\n    if (!d) {\n        return d;\n    }\n\n    d = flatClone(d);\n    d = fromDexieToStorageField(d);\n\n    booleanIndexes.forEach(idx => {\n        const val = getProperty(d, idx);\n        const newVal = val === '1' ? true : false;\n        setProperty(d, idx, newVal);\n    });\n\n    return d;\n}\n\n/**\n * @recursive\n */\nexport function fromStorageToDexieField(documentData: RxDocumentData<any>): any {\n    if (\n        !documentData ||\n        typeof documentData === 'string' ||\n        typeof documentData === 'number' ||\n        typeof documentData === 'boolean'\n    ) {\n        return documentData;\n    } else if (Array.isArray(documentData)) {\n        return documentData.map(row => fromStorageToDexieField(row));\n    } else if (typeof documentData === 'object') {\n        const ret: any = {};\n        Object.entries(documentData).forEach(([key, value]) => {\n            if (typeof value === 'object') {\n                value = fromStorageToDexieField(value);\n            }\n            ret[dexieReplaceIfStartsWithPipe(key)] = value;\n        });\n        return ret;\n    }\n}\n\nexport function fromDexieToStorageField(documentData: any): RxDocumentData<any> {\n    if (!documentData || typeof documentData === 'string' || typeof documentData === 'number' || typeof documentData === 'boolean') {\n        return documentData;\n    } else if (Array.isArray(documentData)) {\n        return documentData.map(row => fromDexieToStorageField(row));\n    } else if (typeof documentData === 'object') {\n        const ret: any = {};\n        Object.entries(documentData).forEach(([key, value]) => {\n            if (typeof value === 'object' || Array.isArray(documentData)) {\n                value = fromDexieToStorageField(value);\n            }\n            ret[dexieReplaceIfStartsWithPipeRevert(key)] = value;\n        });\n        return ret;\n    }\n}\n\n\n/**\n * Creates a string that can be used to create the dexie store.\n * @link https://dexie.org/docs/API-Reference#quick-reference\n */\nexport function getDexieStoreSchema(\n    rxJsonSchema: RxJsonSchema<any>\n): string {\n    let parts: string[][] = [];\n\n    /**\n     * First part must be the primary key\n     * @link https://github.com/dexie/Dexie.js/issues/1307#issuecomment-846590912\n     */\n    const primaryKey = getPrimaryFieldOfPrimaryKey(rxJsonSchema.primaryKey);\n    parts.push([primaryKey]);\n    parts.push(['_deleted', primaryKey]);\n\n    // add other indexes\n    if (rxJsonSchema.indexes) {\n        rxJsonSchema.indexes.forEach(index => {\n            const arIndex = toArray(index);\n            parts.push(arIndex);\n        });\n    }\n\n    // we also need the _meta.lwt+primaryKey index for the getChangedDocumentsSince() method.\n    parts.push(['_meta.lwt', primaryKey]);\n\n    // and this one for the cleanup()\n    parts.push(['_meta.lwt']);\n\n    /**\n     * It is not possible to set non-javascript-variable-syntax\n     * keys as IndexedDB indexes. So we have to substitute the pipe-char\n     * which comes from the key-compression plugin.\n     */\n    parts = parts.map(part => {\n        return part.map(str => dexieReplaceIfStartsWithPipe(str));\n    });\n\n    let dexieSchemaRows = parts.map(part => {\n        if (part.length === 1) {\n            return part[0];\n        } else {\n            return '[' + part.join('+') + ']';\n        }\n    });\n    dexieSchemaRows = dexieSchemaRows.filter((elem: any, pos: any, arr: any) => arr.indexOf(elem) === pos); // unique;\n    const dexieSchema = dexieSchemaRows.join(', ');\n\n    return dexieSchema;\n}\n\n/**\n * Returns all documents in the database.\n * Non-deleted plus deleted ones.\n */\nexport async function getDocsInDb<RxDocType>(\n    internals: DexieStorageInternals,\n    docIds: string[]\n): Promise<RxDocumentData<RxDocType>[]> {\n    const state = await internals;\n    const docsInDb = await state.dexieTable.bulkGet(docIds);\n    return docsInDb.map(d => fromDexieToStorage(state.booleanIndexes, d));\n}\n\n\nexport function attachmentObjectId(documentId: string, attachmentId: string): string {\n    return documentId + '||' + attachmentId;\n}\n\n\nexport function getBooleanIndexes(schema: RxJsonSchema<any>): string[] {\n    const checkedFields = new Set<string>();\n    const ret: string[] = [];\n    if (!schema.indexes) {\n        return ret;\n    }\n    schema.indexes.forEach(index => {\n        const fields = toArray(index);\n        fields.forEach(field => {\n            if (checkedFields.has(field)) {\n                return;\n            }\n            checkedFields.add(field);\n            const schemaObj = getSchemaByObjectPath(schema, field);\n            if (schemaObj.type === 'boolean') {\n                ret.push(field);\n            }\n        });\n    });\n    ret.push('_deleted');\n\n    return uniqueArray(ret);\n}\n\n"],"mappings":"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","ignoreList":[]}