{"version":3,"file":"nosql-query-builder.js","names":["isObject","merge","newRxTypeError","newRxError","NoSqlQueryBuilderClass","mangoQuery","_path","options","_conditions","_fields","queryBuilder","selector","find","limit","skip","sort","forEach","s","_proto","prototype","where","_val","arguments","length","type","Array","isArray","path","equals","val","_ensurePath","eq","or","array","$or","push","apply","nor","$nor","and","$and","mod","slice","conds","$mod","exists","$exists","elemMatch","_criteria","fn","criteria","$elemMatch","arg","len","i","_pushArr","split","field","ascend","substring","keys","Object","args","source","canMerge","_distinct","method","toJSON","query","mQuerySortToRxDBSort","entries","map","k","v","direction","part","OTHER_MANGO_ATTRIBUTES","OTHER_MANGO_OPERATORS","$conditional","RegExp","$regex","$options","opts","value","$meta","String","toLowerCase","test","valueStr","toString","replace","parseInt","createQueryBuilder"],"sources":["../../../../../src/plugins/query-builder/mquery/nosql-query-builder.ts"],"sourcesContent":["/**\n * this is based on\n * @link https://github.com/aheckmann/mquery/blob/master/lib/mquery.js\n */\nimport {\n    isObject,\n    merge\n} from './mquery-utils.ts';\nimport {\n    newRxTypeError,\n    newRxError\n} from '../../../rx-error.ts';\nimport type {\n    MangoQuery,\n    MangoQuerySelector,\n    MangoQuerySortPart,\n    MangoQuerySortDirection\n} from '../../../types/index.d.ts';\n\n\ndeclare type MQueryOptions = {\n    limit?: number;\n    skip?: number;\n    sort?: any;\n};\n\nexport class NoSqlQueryBuilderClass<DocType> {\n\n    public options: MQueryOptions = {};\n    public _conditions: MangoQuerySelector<DocType> = {};\n    public _fields: any = {};\n    private _distinct: any;\n\n    /**\n     * MQuery constructor used for building queries.\n     *\n     * ####Example:\n     *     var query = new MQuery({ name: 'mquery' });\n     *     query.where('age').gte(21).exec(callback);\n     *\n     */\n    constructor(\n        mangoQuery?: MangoQuery<DocType>,\n        public _path?: any\n    ) {\n        if (mangoQuery) {\n            const queryBuilder: NoSqlQueryBuilder<DocType> = this as any;\n\n            if (mangoQuery.selector) {\n                queryBuilder.find(mangoQuery.selector);\n            }\n            if (mangoQuery.limit) {\n                queryBuilder.limit(mangoQuery.limit);\n            }\n            if (mangoQuery.skip) {\n                queryBuilder.skip(mangoQuery.skip);\n            }\n            if (mangoQuery.sort) {\n                mangoQuery.sort.forEach(s => queryBuilder.sort(s));\n            }\n        }\n    }\n\n    /**\n     * Specifies a `path` for use with chaining.\n     */\n    where(_path: string, _val?: MangoQuerySelector<DocType>): NoSqlQueryBuilder<DocType> {\n        if (!arguments.length) return this as any;\n        const type = typeof arguments[0];\n        if ('string' === type) {\n            this._path = arguments[0];\n            if (2 === arguments.length) {\n                (this._conditions as any)[this._path] = arguments[1];\n            }\n            return this as any;\n        }\n\n        if ('object' === type && !Array.isArray(arguments[0])) {\n            return this.merge(arguments[0]);\n        }\n\n        throw newRxTypeError('MQ1', {\n            path: arguments[0]\n        });\n    }\n\n    /**\n     * Specifies the complementary comparison value for paths specified with `where()`\n     * ####Example\n     *     User.where('age').equals(49);\n     */\n    equals(val: any): NoSqlQueryBuilder<DocType> {\n        this._ensurePath('equals');\n        const path = this._path;\n        (this._conditions as any)[path] = val;\n        return this as any;\n    }\n\n    /**\n     * Specifies the complementary comparison value for paths specified with `where()`\n     * This is alias of `equals`\n     */\n    eq(val: any): NoSqlQueryBuilder<DocType> {\n        this._ensurePath('eq');\n        const path = this._path;\n        (this._conditions as any)[path] = val;\n        return this as any;\n    }\n\n    /**\n     * Specifies arguments for an `$or` condition.\n     * ####Example\n     *     query.or([{ color: 'red' }, { status: 'emergency' }])\n     */\n    or(array: any[]): NoSqlQueryBuilder<DocType> {\n        const or = this._conditions.$or || (this._conditions.$or = []);\n        if (!Array.isArray(array)) array = [array];\n        or.push.apply(or, array);\n        return this as any;\n    }\n\n    /**\n     * Specifies arguments for a `$nor` condition.\n     * ####Example\n     *     query.nor([{ color: 'green' }, { status: 'ok' }])\n     */\n    nor(array: any[]): NoSqlQueryBuilder<DocType> {\n        const nor = this._conditions.$nor || (this._conditions.$nor = []);\n        if (!Array.isArray(array)) array = [array];\n        nor.push.apply(nor, array);\n        return this as any;\n    }\n\n    /**\n     * Specifies arguments for a `$and` condition.\n     * ####Example\n     *     query.and([{ color: 'green' }, { status: 'ok' }])\n     * @see $and http://docs.mongodb.org/manual/reference/operator/and/\n     */\n    and(array: any[]): NoSqlQueryBuilder<DocType> {\n        const and = this._conditions.$and || (this._conditions.$and = []);\n        if (!Array.isArray(array)) array = [array];\n        and.push.apply(and, array);\n        return this as any;\n    }\n\n    /**\n     * Specifies a `$mod` condition\n     */\n    mod(_path: string, _val: number): NoSqlQueryBuilder<DocType> {\n        let val;\n        let path;\n\n        if (1 === arguments.length) {\n            this._ensurePath('mod');\n            val = arguments[0];\n            path = this._path;\n        } else if (2 === arguments.length && !Array.isArray(arguments[1])) {\n            this._ensurePath('mod');\n            val = (arguments as any).slice();\n            path = this._path;\n        } else if (3 === arguments.length) {\n            val = (arguments as any).slice(1);\n            path = arguments[0];\n        } else {\n            val = arguments[1];\n            path = arguments[0];\n        }\n\n        const conds = (this._conditions as any)[path] || ((this._conditions as any)[path] = {});\n        conds.$mod = val;\n        return this as any;\n    }\n\n    /**\n     * Specifies an `$exists` condition\n     * ####Example\n     *     // { name: { $exists: true }}\n     *     Thing.where('name').exists()\n     *     Thing.where('name').exists(true)\n     *     Thing.find().exists('name')\n     */\n    exists(_path: string, _val: number): NoSqlQueryBuilder<DocType> {\n        let path;\n        let val;\n        if (0 === arguments.length) {\n            this._ensurePath('exists');\n            path = this._path;\n            val = true;\n        } else if (1 === arguments.length) {\n            if ('boolean' === typeof arguments[0]) {\n                this._ensurePath('exists');\n                path = this._path;\n                val = arguments[0];\n            } else {\n                path = arguments[0];\n                val = true;\n            }\n        } else if (2 === arguments.length) {\n            path = arguments[0];\n            val = arguments[1];\n        }\n\n        const conds = (this._conditions as any)[path] || ((this._conditions as any)[path] = {});\n        conds.$exists = val;\n        return this as any;\n    }\n\n    /**\n     * Specifies an `$elemMatch` condition\n     * ####Example\n     *     query.elemMatch('comment', { author: 'autobot', votes: {$gte: 5}})\n     *     query.where('comment').elemMatch({ author: 'autobot', votes: {$gte: 5}})\n     *     query.elemMatch('comment', function (elem) {\n     *       elem.where('author').equals('autobot');\n     *       elem.where('votes').gte(5);\n     *     })\n     *     query.where('comment').elemMatch(function (elem) {\n     *       elem.where({ author: 'autobot' });\n     *       elem.where('votes').gte(5);\n     *     })\n     */\n    elemMatch(_path: string, _criteria: any): NoSqlQueryBuilder<DocType> {\n        if (null === arguments[0])\n            throw newRxTypeError('MQ2');\n\n        let fn;\n        let path;\n        let criteria;\n\n        if ('function' === typeof arguments[0]) {\n            this._ensurePath('elemMatch');\n            path = this._path;\n            fn = arguments[0];\n        } else if (isObject(arguments[0])) {\n            this._ensurePath('elemMatch');\n            path = this._path;\n            criteria = arguments[0];\n        } else if ('function' === typeof arguments[1]) {\n            path = arguments[0];\n            fn = arguments[1];\n        } else if (arguments[1] && isObject(arguments[1])) {\n            path = arguments[0];\n            criteria = arguments[1];\n        } else\n            throw newRxTypeError('MQ2');\n\n        if (fn) {\n            criteria = new NoSqlQueryBuilderClass;\n            fn(criteria);\n            criteria = criteria._conditions;\n        }\n\n        const conds = (this._conditions as any)[path] || ((this._conditions as any)[path] = {});\n        conds.$elemMatch = criteria;\n        return this as any;\n    }\n\n    /**\n     * Sets the sort order\n     * If an object is passed, values allowed are 'asc', 'desc', 'ascending', 'descending', 1, and -1.\n     * If a string is passed, it must be a space delimited list of path names.\n     * The sort order of each path is ascending unless the path name is prefixed with `-` which will be treated as descending.\n     * ####Example\n     *     query.sort({ field: 'asc', test: -1 });\n     *     query.sort('field -test');\n     *     query.sort([['field', 1], ['test', -1]]);\n     */\n    sort(arg: any): NoSqlQueryBuilder<DocType> {\n        if (!arg) return this as any;\n        let len;\n        const type = typeof arg;\n        // .sort([['field', 1], ['test', -1]])\n        if (Array.isArray(arg)) {\n            len = arg.length;\n            for (let i = 0; i < arg.length; ++i) {\n                _pushArr(this.options, arg[i][0], arg[i][1]);\n            }\n\n            return this as any;\n        }\n\n        // .sort('field -test')\n        if (1 === arguments.length && 'string' === type) {\n            arg = arg.split(/\\s+/);\n            len = arg.length;\n            for (let i = 0; i < len; ++i) {\n                let field = arg[i];\n                if (!field) continue;\n                const ascend = '-' === field[0] ? -1 : 1;\n                if (ascend === -1) field = field.substring(1);\n                push(this.options, field, ascend);\n            }\n\n            return this as any;\n        }\n\n        // .sort({ field: 1, test: -1 })\n        if (isObject(arg)) {\n            const keys = Object.keys(arg);\n            keys.forEach(field => push(this.options, field, arg[field]));\n            return this as any;\n        }\n\n        throw newRxTypeError('MQ3', {\n            args: arguments\n        });\n    }\n\n    /**\n     * Merges another MQuery or conditions object into this one.\n     *\n     * When a MQuery is passed, conditions, field selection and options are merged.\n     *\n     */\n    merge(source: any): NoSqlQueryBuilder<DocType> {\n        if (!source) {\n            return this as any;\n        }\n\n        if (!canMerge(source)) {\n            throw newRxTypeError('MQ4', {\n                source\n            });\n        }\n\n        if (source instanceof NoSqlQueryBuilderClass) {\n            // if source has a feature, apply it to ourselves\n\n            if (source._conditions)\n                merge(this._conditions, source._conditions);\n\n            if (source._fields) {\n                if (!this._fields) this._fields = {};\n                merge(this._fields, source._fields);\n            }\n\n            if (source.options) {\n                if (!this.options) this.options = {};\n                merge(this.options, source.options);\n            }\n\n            if (source._distinct)\n                this._distinct = source._distinct;\n\n            return this as any;\n        }\n\n        // plain object\n        merge(this._conditions, source);\n\n        return this as any;\n    }\n\n    /**\n     * Finds documents.\n     * ####Example\n     *     query.find()\n     *     query.find({ name: 'Burning Lights' })\n     */\n    find(criteria: any): NoSqlQueryBuilder<DocType> {\n        if (canMerge(criteria)) {\n            this.merge(criteria);\n        }\n\n        return this as any;\n    }\n\n    /**\n     * Make sure _path is set.\n     *\n     * @param {String} method\n     */\n    _ensurePath(method: any) {\n        if (!this._path) {\n            throw newRxError('MQ5', {\n                method\n            });\n        }\n    }\n\n    toJSON(): {\n        query: MangoQuery<DocType>;\n        path?: string;\n    } {\n        const query: MangoQuery<DocType> = {\n            selector: this._conditions,\n        };\n\n        if (this.options.skip) {\n            query.skip = this.options.skip;\n        }\n        if (this.options.limit) {\n            query.limit = this.options.limit;\n        }\n        if (this.options.sort) {\n            query.sort = mQuerySortToRxDBSort(this.options.sort);\n        }\n\n        return {\n            query,\n            path: this._path\n        };\n    }\n}\n\nexport function mQuerySortToRxDBSort<DocType>(\n    sort: { [k: string]: 1 | -1; }\n): MangoQuerySortPart<DocType>[] {\n    return Object.entries(sort).map(([k, v]) => {\n        const direction: MangoQuerySortDirection = v === 1 ? 'asc' : 'desc';\n        const part: MangoQuerySortPart<DocType> = { [k]: direction } as any;\n        return part;\n    });\n}\n\n/**\n * Because some prototype-methods are generated,\n * we have to define the type of NoSqlQueryBuilder here\n */\n\nexport interface NoSqlQueryBuilder<DocType = any> extends NoSqlQueryBuilderClass<DocType> {\n    maxScan: ReturnSelfNumberFunction<DocType>;\n    batchSize: ReturnSelfNumberFunction<DocType>;\n    limit: ReturnSelfNumberFunction<DocType>;\n    skip: ReturnSelfNumberFunction<DocType>;\n    comment: ReturnSelfFunction<DocType>;\n\n    gt: ReturnSelfFunction<DocType>;\n    gte: ReturnSelfFunction<DocType>;\n    lt: ReturnSelfFunction<DocType>;\n    lte: ReturnSelfFunction<DocType>;\n    ne: ReturnSelfFunction<DocType>;\n    in: ReturnSelfFunction<DocType>;\n    nin: ReturnSelfFunction<DocType>;\n    all: ReturnSelfFunction<DocType>;\n    regex: ReturnSelfFunction<DocType>;\n    size: ReturnSelfFunction<DocType>;\n\n}\n\ndeclare type ReturnSelfFunction<DocType> = (v: any) => NoSqlQueryBuilder<DocType>;\ndeclare type ReturnSelfNumberFunction<DocType> = (v: number | null) => NoSqlQueryBuilder<DocType>;\n\n/**\n * limit, skip, maxScan, batchSize, comment\n *\n * Sets these associated options.\n *\n *     query.comment('feed query');\n */\nexport const OTHER_MANGO_ATTRIBUTES = ['limit', 'skip', 'maxScan', 'batchSize', 'comment'];\nOTHER_MANGO_ATTRIBUTES.forEach(function (method) {\n    (NoSqlQueryBuilderClass.prototype as any)[method] = function (v: any) {\n        this.options[method] = v;\n        return this;\n    };\n});\n\n\n/**\n * gt, gte, lt, lte, ne, in, nin, all, regex, size, maxDistance\n *\n *     Thing.where('type').nin(array)\n */\nexport const OTHER_MANGO_OPERATORS = [\n    'gt', 'gte', 'lt', 'lte', 'ne',\n    'in', 'nin', 'all', 'regex', 'size'\n];\nOTHER_MANGO_OPERATORS.forEach(function ($conditional) {\n    (NoSqlQueryBuilderClass.prototype as any)[$conditional] = function () {\n        let path;\n        let val;\n\n        if (1 === arguments.length) {\n            this._ensurePath($conditional);\n            val = arguments[0];\n            path = this._path;\n        } else {\n            val = arguments[1];\n            path = arguments[0];\n        }\n\n        const conds = this._conditions[path] === null || typeof this._conditions[path] === 'object' ?\n            this._conditions[path] :\n            (this._conditions[path] = {});\n\n\n\n        if ($conditional === 'regex') {\n            if (val instanceof RegExp) {\n                throw newRxError('QU16', {\n                    field: path,\n                    query: this._conditions,\n                });\n            }\n            if (typeof val === 'string') {\n                conds['$' + $conditional] = val;\n            } else {\n                conds['$' + $conditional] = val.$regex;\n                if (val.$options) {\n                    conds.$options = val.$options;\n                }\n            }\n        } else {\n            conds['$' + $conditional] = val;\n        }\n\n        return this;\n    };\n});\n\n\nfunction push(opts: any, field: string, value: any) {\n    if (Array.isArray(opts.sort)) {\n        throw newRxTypeError('MQ6', {\n            opts,\n            field,\n            value\n        });\n    }\n\n    if (value && value.$meta) {\n        const sort = opts.sort || (opts.sort = {});\n        sort[field] = {\n            $meta: value.$meta\n        };\n        return;\n    }\n\n    const val = String(value || 1).toLowerCase();\n    if (!/^(?:ascending|asc|descending|desc|1|-1)$/.test(val)) {\n        if (Array.isArray(value)) value = '[' + value + ']';\n        throw newRxTypeError('MQ7', {\n            field,\n            value\n        });\n    }\n    // store `sort` in a sane format\n    const s = opts.sort || (opts.sort = {});\n    const valueStr = value.toString()\n        .replace('asc', '1')\n        .replace('ascending', '1')\n        .replace('desc', '-1')\n        .replace('descending', '-1');\n    s[field] = parseInt(valueStr, 10);\n}\n\nfunction _pushArr(opts: any, field: string, value: any) {\n    opts.sort = opts.sort || [];\n    if (!Array.isArray(opts.sort)) {\n        throw newRxTypeError('MQ8', {\n            opts,\n            field,\n            value\n        });\n    }\n\n    /*    const valueStr = value.toString()\n            .replace('asc', '1')\n            .replace('ascending', '1')\n            .replace('desc', '-1')\n            .replace('descending', '-1');*/\n    opts.sort.push([field, value]);\n}\n\n\n/**\n * Determines if `conds` can be merged using `mquery().merge()`\n */\nexport function canMerge(conds: any): boolean {\n    return conds instanceof NoSqlQueryBuilderClass || isObject(conds);\n}\n\n\nexport function createQueryBuilder<DocType>(query?: MangoQuery<DocType>, path?: any): NoSqlQueryBuilder<DocType> {\n    return new NoSqlQueryBuilderClass(query, path) as NoSqlQueryBuilder<DocType>;\n}\n"],"mappings":"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","ignoreList":[]}