"use strict";(self.webpackChunkrxdb=self.webpackChunkrxdb||[]).push([[4166],{8568:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>o,contentTitle:()=>d,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var n=r(4848),a=r(8453);const s={title:"IndexedDB RxStorage \ud83d\udc51",slug:"rx-storage-indexeddb.html",description:"Optimize browser, Electron, and hybrid app performance with IndexedDB RxStorage with the fastest, smallest build size storage solution for small to medium datasets."},d="IndexedDB RxStorage",i={id:"rx-storage-indexeddb",title:"IndexedDB RxStorage \ud83d\udc51",description:"Optimize browser, Electron, and hybrid app performance with IndexedDB RxStorage with the fastest, smallest build size storage solution for small to medium datasets.",source:"@site/docs/rx-storage-indexeddb.md",sourceDirName:".",slug:"/rx-storage-indexeddb.html",permalink:"/rx-storage-indexeddb.html",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"IndexedDB RxStorage \ud83d\udc51",slug:"rx-storage-indexeddb.html",description:"Optimize browser, Electron, and hybrid app performance with IndexedDB RxStorage with the fastest, smallest build size storage solution for small to medium datasets."},sidebar:"tutorialSidebar",previous:{title:"\ud83d\udcc8 RxStorage Performance",permalink:"/rx-storage-performance.html"},next:{title:"SQLite RxStorage \ud83d\udc51",permalink:"/rx-storage-sqlite.html"}},o={},l=[{value:"IndexedDB performance comparison",id:"indexeddb-performance-comparison",level:2},{value:"Using the IndexedDB RxStorage",id:"using-the-indexeddb-rxstorage",level:2},{value:"Overwrite/Polyfill the native IndexedDB",id:"overwritepolyfill-the-native-indexeddb",level:2},{value:"Limitations of the IndexedDB RxStorage",id:"limitations-of-the-indexeddb-rxstorage",level:2}];function x(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"indexeddb-rxstorage",children:"IndexedDB RxStorage"}),"\n",(0,n.jsxs)(t.p,{children:["The IndexedDB ",(0,n.jsx)(t.a,{href:"/rx-storage.html",children:"RxStorage"})," is based on plain IndexedDB and can be used in browsers, ",(0,n.jsx)(t.a,{href:"/electron-database.html",children:"electron"})," or hybrid apps.\nCompared to other browser based storages, the IndexedDB storage has the smallest write- and read latency, the fastest initial page load\nand the smallest build size. Only for big datasets (more then 10k documents), the ",(0,n.jsx)(t.a,{href:"/rx-storage-opfs.html",children:"OPFS storage"})," is better suited."]}),"\n",(0,n.jsxs)(t.p,{children:["While the IndexedDB API itself can be very slow, the IndexedDB storage uses many tricks and performance optimizations, some of which are described ",(0,n.jsx)(t.a,{href:"/slow-indexeddb.html",children:"here"}),". For example it uses custom index strings instead of the native IndexedDB indexes, batches cursor for faster bulk reads and many other improvements. The IndexedDB storage also operates on ",(0,n.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Write-ahead_logging",children:"Write-ahead logging"})," similar to SQLite, to improve write latency while still ensuring consistency on writes."]}),"\n",(0,n.jsx)(t.h2,{id:"indexeddb-performance-comparison",children:"IndexedDB performance comparison"}),"\n",(0,n.jsxs)(t.p,{children:["Here is some performance comparison with other storages. Compared to the non-memory storages like ",(0,n.jsx)(t.a,{href:"/rx-storage-opfs.html",children:"OPFS"})," and ",(0,n.jsx)(t.a,{href:"/rx-storage-dexie.html",children:"Dexie.js"}),", it has the smallest build size and fastest write speed. Only OPFS is faster on queries over big datasets. See ",(0,n.jsx)(t.a,{href:"/rx-storage-performance.html",children:"performance comparison"})," page for a comparison with all storages."]}),"\n",(0,n.jsx)("p",{align:"center",children:(0,n.jsx)("img",{src:"./files/rx-storage-performance-browser.png",alt:"IndexedDB performance",width:"700"})}),"\n",(0,n.jsx)(t.h2,{id:"using-the-indexeddb-rxstorage",children:"Using the IndexedDB RxStorage"}),"\n",(0,n.jsxs)(t.p,{children:["To use the indexedDB storage you import it from the ",(0,n.jsx)(t.a,{href:"/premium",children:"RxDB Premium \ud83d\udc51"})," npm module and use ",(0,n.jsx)(t.code,{children:"getRxStorageIndexedDB()"})," when creating the ",(0,n.jsx)(t.a,{href:"/rx-database.html",children:"RxDatabase"}),"."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ts",children:"import {\n    createRxDatabase\n} from 'rxdb';\nimport {\n    getRxStorageIndexedDB\n} from 'rxdb-premium/plugins/storage-indexeddb';\n\nconst db = await createRxDatabase({\n    name: 'exampledb',\n    storage: getRxStorageIndexedDB({\n        /**\n         * For better performance, queries run with a batched cursor.\n         * You can change the batchSize to optimize the query time\n         * for specific queries.\n         * You should only change this value when you are also doing performance measurements.\n         * [default=300]\n         */\n        batchSize: 300\n    })\n});\n"})}),"\n",(0,n.jsx)(t.h2,{id:"overwritepolyfill-the-native-indexeddb",children:"Overwrite/Polyfill the native IndexedDB"}),"\n",(0,n.jsxs)(t.p,{children:["Node.js has no IndexedDB API. To still run the IndexedDB ",(0,n.jsx)(t.code,{children:"RxStorage"})," in Node.js, for example to run unit tests, you have to polyfill it.\nYou can do that by using the ",(0,n.jsx)(t.a,{href:"https://github.com/dumbmatter/fakeIndexedDB",children:"fake-indexeddb"})," module and pass it to the ",(0,n.jsx)(t.code,{children:"getRxStorageDexie()"})," function."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ts",children:"import { createRxDatabase } from 'rxdb';\nimport { getRxStorageIndexedDB } from 'rxdb-premium/plugins/storage-indexeddb';\n\n//> npm install fake-indexeddb --save\nconst fakeIndexedDB = require('fake-indexeddb');\nconst fakeIDBKeyRange = require('fake-indexeddb/lib/FDBKeyRange');\n\nconst db = await createRxDatabase({\n    name: 'exampledb',\n    storage: getRxStorageIndexedDB({\n        indexedDB: fakeIndexedDB,\n        IDBKeyRange: fakeIDBKeyRange\n    })\n});\n\n"})}),"\n",(0,n.jsx)(t.h2,{id:"limitations-of-the-indexeddb-rxstorage",children:"Limitations of the IndexedDB RxStorage"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["It is part of the ",(0,n.jsx)(t.a,{href:"/premium",children:"RxDB Premium \ud83d\udc51"})," plugin that must be purchased. If you just need a storage that works in the browser and you do not have to care about performance, you can use the ",(0,n.jsx)(t.a,{href:"/rx-storage-dexie.html",children:"Dexie.js storage"})," instead."]}),"\n",(0,n.jsxs)(t.li,{children:["The IndexedDB storage requires support for ",(0,n.jsx)(t.a,{href:"https://caniuse.com/indexeddb2",children:"IndexedDB v2"}),", it does not work on Internet Explorer."]}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(x,{...e})}):x(e)}},8453:(e,t,r)=>{r.d(t,{R:()=>d,x:()=>i});var n=r(6540);const a={},s=n.createContext(a);function d(e){const t=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:d(e.components),n.createElement(s.Provider,{value:t},e.children)}}}]);