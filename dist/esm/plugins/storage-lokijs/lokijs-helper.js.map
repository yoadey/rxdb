{"version":3,"file":"lokijs-helper.js","names":["createLokiLocalState","Loki","add","unloadAdd","ensureNotFalsy","flatClone","getFromMapOrCreate","getProperty","promiseWait","randomCouchString","LokiSaveQueue","newRxError","getBroadcastChannelReference","getLeaderElectorByBroadcastChannel","overwritable","CHANGES_COLLECTION_SUFFIX","LOKI_BROADCAST_CHANNEL_MESSAGE_TYPE","LOKI_KEY_OBJECT_BROADCAST_CHANNEL_MESSAGE_TYPE","RX_STORAGE_NAME_LOKIJS","stripLokiKey","docData","$loki","cloned","$lastWriteAt","_meta","lwt","OPEN_LOKIJS_STORAGE_INSTANCES","Set","LOKIJS_COLLECTION_DEFAULT_OPTIONS","disableChangesApi","disableMeta","disableDeltaChangesApi","disableFreeze","cloneMethod","clone","transactional","autoupdate","LOKI_DATABASE_STATE_BY_NAME","Map","getLokiDatabase","databaseName","databaseSettings","hasPersistence","adapter","databaseState","persistenceMethod","useSettings","Object","assign","autoload","verbose","autosave","throttledSaves","database","lokiSaveQueue","loadDatabasePromise","Promise","res","rej","loadDatabase","recursiveWait","err","autoloadCallback","saveQueue","then","unloads","push","run","state","collections","closeLokiCollections","get","forEach","collection","collectionName","name","keys","length","delete","u","remove","close","getLokiSortComparator","_schema","query","sort","sortOptions","fun","a","b","compareResult","find","sortPart","fieldName","direction","values","directionMultiplier","valueA","valueB","args","getLokiLeaderElector","databaseInstanceToken","broadcastChannelRefObject","broadcastChannel","elector","requestRemoteInstance","instance","operation","params","isRxStorageInstanceLoki","messageType","leaderElector","internals","waitUntilHasLeader","whenDeathListener","leaderDeadPromise","msg","context","action","retry","addEventListener","requestId","responseListener","responsePromise","_rej","type","response","isError","error","result","postMessage","timeout","race","firstResolved","clearTimeout","removeEventListener","handleRemoteRequest","console","dir","awaitLeadership","catch","has","hasLeader","isClosed","isDead","applyOnce","mustUseLocalState","closed","Error","JSON","stringify","instanceClosed","localState","isLeader","options","schema","multiInstance","devMode","isDevMode","transformRegexToRegExp","selector","ret","key","value","RegExp","opts","Array","isArray","map","item"],"sources":["../../../../src/plugins/storage-lokijs/lokijs-helper.ts"],"sourcesContent":["import {\n    createLokiLocalState,\n    RxStorageInstanceLoki\n} from './rx-storage-instance-loki.ts';\nimport Loki from 'lokijs';\nimport type {\n    DeterministicSortComparator,\n    FilledMangoQuery,\n    LokiDatabaseSettings,\n    LokiDatabaseState,\n    LokiLocalDatabaseState,\n    LokiRemoteResponseBroadcastMessage,\n    MangoQuerySortDirection,\n    MangoQuerySortPart,\n    RxDocumentData,\n    RxJsonSchema\n} from '../../types/index.d.ts';\nimport {\n    add as unloadAdd,\n    AddReturn\n} from 'unload';\nimport {\n    ensureNotFalsy,\n    flatClone,\n    getFromMapOrCreate,\n    getProperty,\n    promiseWait,\n    randomCouchString\n} from '../utils/index.ts';\nimport { LokiSaveQueue } from './loki-save-queue.ts';\nimport { newRxError } from '../../rx-error.ts';\nimport {\n    LeaderElector,\n    OnMessageHandler\n} from 'broadcast-channel';\nimport { getBroadcastChannelReference } from '../../rx-storage-multiinstance.ts';\nimport { getLeaderElectorByBroadcastChannel } from '../leader-election/index.ts';\nimport { overwritable } from '../../overwritable.ts';\n\nexport const CHANGES_COLLECTION_SUFFIX = '-rxdb-changes';\nexport const LOKI_BROADCAST_CHANNEL_MESSAGE_TYPE = 'rxdb-lokijs-remote-request';\nexport const LOKI_KEY_OBJECT_BROADCAST_CHANNEL_MESSAGE_TYPE = 'rxdb-lokijs-remote-request-key-object';\nexport const RX_STORAGE_NAME_LOKIJS = 'lokijs';\n\n/**\n * Loki attaches a $loki property to all data\n * which must be removed before returning the data back to RxDB.\n */\nexport function stripLokiKey<T>(docData: RxDocumentData<T> & { $loki?: number; }): T {\n    if (!docData.$loki) {\n        return docData;\n    }\n    const cloned = flatClone(docData);\n\n    /**\n     * In RxDB version 12.0.0,\n     * we introduced the _meta field that already contains the last write time.\n     * To be backwards compatible, we have to move the $lastWriteAt to the _meta field.\n     * TODO remove this in the next major version.\n     */\n    if ((cloned as any).$lastWriteAt) {\n        cloned._meta = {\n            lwt: (cloned as any).$lastWriteAt\n        };\n        delete (cloned as any).$lastWriteAt;\n    }\n\n    delete cloned.$loki;\n    return cloned;\n}\n\n/**\n * Used to check in tests if all instances have been cleaned up.\n */\nexport const OPEN_LOKIJS_STORAGE_INSTANCES: Set<RxStorageInstanceLoki<any>> = new Set();\n\n\nexport const LOKIJS_COLLECTION_DEFAULT_OPTIONS: Partial<any> = {\n    disableChangesApi: true,\n    disableMeta: true,\n    disableDeltaChangesApi: true,\n    disableFreeze: true,\n    // TODO use 'immutable' like WatermelonDB does it\n    cloneMethod: 'shallow-assign',\n    clone: false,\n    transactional: false,\n    autoupdate: false\n};\n\nconst LOKI_DATABASE_STATE_BY_NAME: Map<string, Promise<LokiDatabaseState>> = new Map();\nexport function getLokiDatabase(\n    databaseName: string,\n    databaseSettings: LokiDatabaseSettings\n): Promise<LokiDatabaseState> {\n\n\n    return getFromMapOrCreate(\n        LOKI_DATABASE_STATE_BY_NAME,\n        databaseName,\n        () => {\n            /**\n             * We assume that as soon as an adapter is passed,\n             * the database has to be persistent.\n             */\n            const hasPersistence: boolean = !!databaseSettings.adapter;\n            const databaseState = (async () => {\n                let persistenceMethod = hasPersistence ? 'adapter' : 'memory';\n                if (databaseSettings.persistenceMethod) {\n                    persistenceMethod = databaseSettings.persistenceMethod;\n                }\n                const useSettings = Object.assign(\n                    // defaults\n                    {\n                        autoload: hasPersistence,\n                        persistenceMethod,\n                        verbose: true\n                    },\n                    databaseSettings,\n                    // overwrites\n                    {\n                        /**\n                         * RxDB uses its custom load and save handling\n                         * so we disable the LokiJS save/load handlers.\n                         */\n                        autoload: false,\n                        autosave: false,\n                        throttledSaves: false\n                    }\n                );\n                const database = new Loki(\n                    databaseName + '.db',\n                    flatClone(useSettings)\n                );\n                const lokiSaveQueue = new LokiSaveQueue(\n                    database,\n                    useSettings\n                );\n\n                /**\n                 * Wait until all data is loaded from persistence adapter.\n                 * Wrap the loading into the saveQueue to ensure that when many\n                 * collections are created at the same time, the load-calls do not interfere\n                 * with each other and cause error logs.\n                 */\n                if (hasPersistence) {\n                    const loadDatabasePromise = new Promise<void>((res, rej) => {\n                        try {\n                            database.loadDatabase({\n                                recursiveWait: false\n                            }, (err) => {\n                                if (useSettings.autoloadCallback) {\n                                    useSettings.autoloadCallback(err);\n                                }\n                                if (err) {\n                                    rej(err);\n                                } else {\n                                    res();\n                                }\n                            });\n                        } catch (err) {\n                            rej(err);\n                        }\n                    });\n                    lokiSaveQueue.saveQueue = lokiSaveQueue.saveQueue.then(() => loadDatabasePromise);\n                    await loadDatabasePromise;\n                }\n\n                /**\n                 * Autosave database on process end\n                 */\n                const unloads: AddReturn[] = [];\n                if (hasPersistence) {\n                    unloads.push(\n                        unloadAdd(() => lokiSaveQueue.run())\n                    );\n                }\n\n                const state: LokiDatabaseState = {\n                    database,\n                    databaseSettings: useSettings,\n                    saveQueue: lokiSaveQueue,\n                    collections: {},\n                    unloads\n                };\n\n                return state;\n            })();\n            return databaseState;\n        }\n    );\n}\n\nexport async function closeLokiCollections(\n    databaseName: string,\n    collections: any[]\n) {\n    const databaseState = await LOKI_DATABASE_STATE_BY_NAME.get(databaseName);\n    if (!databaseState) {\n        // already closed\n        return;\n    }\n    await databaseState.saveQueue.run();\n    collections.forEach(collection => {\n        const collectionName = collection.name;\n        delete databaseState.collections[collectionName];\n    });\n    if (Object.keys(databaseState.collections).length === 0) {\n        // all collections closed -> also close database\n        LOKI_DATABASE_STATE_BY_NAME.delete(databaseName);\n        databaseState.unloads.forEach(u => u.remove());\n        await new Promise<void>((res, rej) => {\n            databaseState.database.close((err: any) => {\n                if (err) {\n                    rej(err);\n                } else {\n                    res();\n                }\n            });\n        });\n    }\n}\n\n/**\n * This function is at lokijs-helper\n * because we need it in multiple places.\n */\nexport function getLokiSortComparator<RxDocType>(\n    _schema: RxJsonSchema<RxDocumentData<RxDocType>>,\n    query: FilledMangoQuery<RxDocType>\n): DeterministicSortComparator<RxDocType> {\n    if (!query.sort) {\n        throw newRxError('SNH', { query });\n    }\n    const sortOptions: MangoQuerySortPart<RxDocType>[] = query.sort;\n\n    const fun: DeterministicSortComparator<RxDocType> = (a: RxDocType, b: RxDocType) => {\n        let compareResult: number = 0; // 1 | -1\n        sortOptions.find(sortPart => {\n            const fieldName: string = Object.keys(sortPart)[0];\n            const direction: MangoQuerySortDirection = Object.values(sortPart)[0];\n            const directionMultiplier = direction === 'asc' ? 1 : -1;\n            const valueA: any = getProperty(a as any, fieldName);\n            const valueB: any = getProperty(b as any, fieldName);\n            if (valueA === valueB) {\n                return false;\n            } else {\n                if (valueA > valueB) {\n                    compareResult = 1 * directionMultiplier;\n                    return true;\n                } else {\n                    compareResult = -1 * directionMultiplier;\n                    return true;\n                }\n            }\n        });\n\n        /**\n         * Two different objects should never have the same sort position.\n         * We ensure this by having the unique primaryKey in the sort params\n         * which is added by RxDB if not existing yet.\n         */\n        if (!compareResult) {\n            throw newRxError('SNH', { args: { query, a, b } });\n        }\n\n        return compareResult as any;\n    };\n    return fun;\n}\n\nexport function getLokiLeaderElector(\n    databaseInstanceToken: string,\n    broadcastChannelRefObject: any,\n    databaseName: string\n): LeaderElector {\n    const broadcastChannel = getBroadcastChannelReference(\n        RX_STORAGE_NAME_LOKIJS,\n        databaseInstanceToken,\n        databaseName,\n        broadcastChannelRefObject\n    );\n    const elector = getLeaderElectorByBroadcastChannel(broadcastChannel);\n    return elector;\n}\n\n/**\n * For multi-instance usage, we send requests to the RxStorage\n * to the current leading instance over the BroadcastChannel.\n */\nexport async function requestRemoteInstance(\n    instance: RxStorageInstanceLoki<any>,\n    operation: string,\n    params: any[]\n): Promise<any | any[]> {\n    const isRxStorageInstanceLoki = typeof (instance as any).query === 'function';\n    const messageType = isRxStorageInstanceLoki ? LOKI_BROADCAST_CHANNEL_MESSAGE_TYPE : LOKI_KEY_OBJECT_BROADCAST_CHANNEL_MESSAGE_TYPE;\n\n    const leaderElector = ensureNotFalsy(instance.internals.leaderElector);\n    await waitUntilHasLeader(leaderElector);\n    const broadcastChannel = leaderElector.broadcastChannel;\n\n    type WinningPromise = {\n        retry: boolean;\n        result?: any;\n        error?: any;\n    };\n\n    let whenDeathListener: OnMessageHandler<any>;\n    const leaderDeadPromise = new Promise<WinningPromise>(res => {\n        whenDeathListener = (msg: any) => {\n            if (msg.context === 'leader' && msg.action === 'death') {\n                res({\n                    retry: true\n                });\n            }\n        };\n        broadcastChannel.addEventListener('internal', whenDeathListener);\n    });\n    const requestId = randomCouchString(12);\n    let responseListener: OnMessageHandler<any>;\n    const responsePromise = new Promise<WinningPromise>((res, _rej) => {\n        responseListener = (msg: any) => {\n            if (\n                msg.type === messageType &&\n                msg.response === true &&\n                msg.requestId === requestId\n            ) {\n                if (msg.isError) {\n                    res({\n                        retry: false,\n                        error: msg.result\n                    });\n                } else {\n                    res({\n                        retry: false,\n                        result: msg.result\n                    });\n                }\n            }\n        };\n        broadcastChannel.addEventListener('message', responseListener);\n    });\n\n    // send out the request to the other instance\n    broadcastChannel.postMessage({\n        response: false,\n        type: messageType,\n        operation,\n        params,\n        requestId,\n        databaseName: instance.databaseName,\n        collectionName: instance.collectionName\n    });\n    let timeout: ReturnType<typeof setTimeout>;\n    return Promise.race([\n        leaderDeadPromise,\n        responsePromise,\n        // // comment in timeout to debug\n        // new Promise<WinningPromise>(res => {\n        //     timeout = setTimeout(() => {\n        //         res({ error: new Error('requestRemoteInstance() timeout errorored'), retry: false });\n        //     }, 500);\n        // })\n\n    ]).then(firstResolved => {\n        if (timeout) {\n            clearTimeout(timeout);\n        }\n\n        // clean up listeners\n        broadcastChannel.removeEventListener('message', responseListener);\n        broadcastChannel.removeEventListener('internal', whenDeathListener);\n\n        if (firstResolved.retry) {\n            /**\n             * The leader died while a remote request was running\n             * we re-run the whole operation.\n             * We cannot just re-run requestRemoteInstance()\n             * because the current instance might be the new leader now\n             * and then we have to use the local state instead of requesting the remote.\n             */\n            return (instance as any)[operation](...params);\n        } else {\n            if (firstResolved.error) {\n                throw firstResolved.error;\n            } else {\n                return firstResolved.result;\n            }\n        }\n    });\n}\n\n/**\n * Handles a request that came from a remote instance via requestRemoteInstance()\n * Runs the requested operation over the local db instance and sends back the result.\n */\nexport async function handleRemoteRequest(\n    instance: RxStorageInstanceLoki<any>,\n    msg: any\n) {\n    if (\n        msg.type === LOKI_BROADCAST_CHANNEL_MESSAGE_TYPE &&\n        msg.requestId &&\n        msg.databaseName === instance.databaseName &&\n        msg.collectionName === instance.collectionName &&\n        !msg.response\n    ) {\n        const operation = (msg as any).operation;\n        const params = (msg as any).params;\n        let result: any;\n        let isError = false;\n        try {\n            result = await (instance as any)[operation](...params);\n        } catch (err) {\n            console.dir(err);\n            isError = true;\n            result = err;\n        }\n        const response: LokiRemoteResponseBroadcastMessage = {\n            response: true,\n            requestId: msg.requestId,\n            databaseName: instance.databaseName,\n            collectionName: instance.collectionName,\n            result,\n            isError,\n            type: msg.type\n        };\n        ensureNotFalsy(instance.internals.leaderElector).broadcastChannel.postMessage(response);\n    }\n}\n\nexport async function waitUntilHasLeader(leaderElector: LeaderElector) {\n    leaderElector.awaitLeadership().catch(() => { });\n    await promiseWait(0);\n    while (true) {\n        const has = await leaderElector.hasLeader();\n        if (\n            has ||\n            leaderElector.broadcastChannel.isClosed ||\n            leaderElector.isDead\n        ) {\n            return;\n        }\n\n        if (leaderElector.applyOnce) {\n            await leaderElector.applyOnce();\n        } else {\n            /**\n             * Trigger applying for leadership\n             * but do not await it in case another\n             * instance becomes leader first.\n             */\n            leaderElector.awaitLeadership().catch(() => { });\n        }\n        await promiseWait(20);\n    }\n}\n\n/**\n * If the local state must be used, that one is returned.\n * Returns false if a remote instance must be used.\n */\nexport async function mustUseLocalState(\n    instance: RxStorageInstanceLoki<any>\n): Promise<LokiLocalDatabaseState | false> {\n    if (instance.closed) {\n        /**\n         * If this happens, it means that RxDB made a call to an already closed storage instance.\n         * This must never happen because when RxDB closes a collection or database,\n         * all tasks must be cleared so that no more calls are made the the storage.\n         */\n        throw new Error('already closed ' + JSON.stringify(\n            {\n                instanceClosed: instance.closed,\n                databaseName: instance.databaseName,\n                collectionName: instance.collectionName\n            }\n        ));\n    }\n\n\n    if (instance.internals.localState) {\n        return instance.internals.localState;\n    }\n    const leaderElector = ensureNotFalsy(instance.internals.leaderElector);\n    await waitUntilHasLeader(leaderElector);\n\n    /**\n     * It might already have a localState after the applying\n     * because another subtask also called mustUSeLocalState()\n     */\n    if (instance.internals.localState) {\n        return instance.internals.localState;\n    }\n\n    if (\n        leaderElector.isLeader &&\n        !instance.internals.localState\n    ) {\n        // own is leader, use local instance\n        instance.internals.localState = createLokiLocalState<any>({\n            databaseInstanceToken: instance.databaseInstanceToken,\n            databaseName: instance.databaseName,\n            collectionName: instance.collectionName,\n            options: instance.options,\n            schema: (instance as RxStorageInstanceLoki<any>).schema,\n            multiInstance: instance.internals.leaderElector ? true : false,\n            devMode: overwritable.isDevMode()\n        }, instance.databaseSettings);\n        return ensureNotFalsy(instance.internals.localState);\n    } else {\n        // other is leader, send message to remote leading instance\n        return false;\n    }\n}\n\n\n/**\n * LokiJS does not understand the 'official' $regex operator,\n * so we have to transform these back into RegExp objects.\n * @recursive\n */\nexport function transformRegexToRegExp(selector: any) {\n    if (typeof selector !== 'object' || selector === null) {\n        return selector;\n    }\n\n    const keys = Object.keys(selector);\n    const ret: any = {};\n    keys.forEach(key => {\n        const value: any = selector[key];\n        if (key === '$options') {\n            return;\n        }\n        if (\n            key === '$regex' &&\n            !(value instanceof RegExp)\n        ) {\n            const opts = selector['$options'];\n            ret[key] = new RegExp(value, opts);\n        } else if (Array.isArray(value)) {\n            ret[key] = value.map(item => transformRegexToRegExp(item));\n        } else {\n            ret[key] = transformRegexToRegExp(value);\n        }\n    });\n    return ret;\n}\n"],"mappings":"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","ignoreList":[]}