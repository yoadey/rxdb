{"version":3,"file":"rx-storage-instance-mongodb.js","names":["BehaviorSubject","Subject","filter","firstValueFrom","getPrimaryFieldOfPrimaryKey","ensureNotFalsy","getFromMapOrThrow","isMaybeReadonlyArray","now","PROMISE_RESOLVE_VOID","requestIdlePromise","MongoClient","categorizeBulkWriteRows","MONGO_ID_SUBSTITUTE_FIELDNAME","getMongoDBIndexName","prepareMongoDBQuery","swapMongoToRxDoc","swapRxDocToMongo","RxStorageInstanceMongoDB","storage","databaseName","collectionName","schema","internals","options","settings","changes$","runningOperations","writeQueue","mongoObjectIdCache","WeakMap","attachments","Error","primaryPath","primaryKey","inMongoPrimaryPath","mongoClient","databaseSettings","connection","mongoDatabase","db","version","indexes","slice","map","index","arIndex","push","mongoCollectionPromise","createCollection","then","mongoCollection","createIndexes","mongoIndex","forEach","field","name","key","_proto","prototype","bulkWrite","documentWrites","context","next","getValue","closed","Promise","reject","ret","success","error","docIds","d","document","documentStates","findDocumentsById","documentStatesMap","Map","doc","docId","set","categorized","changeByDocId","eventBulk","events","change","documentId","errors","all","bulkInsertDocs","writeRow","writeResult","findOneAndUpdate","$setOnInsert","upsert","includeResultMetadata","value","conflictError","status","documentInDb","isError","event","get","bulkUpdateDocs","findOneAndReplace","_rev","previous","returnDocument","ok","currentDocState","currentDoc","length","lastState","newestRow","checkpoint","id","lwt","_meta","endTime","withDeleted","session","plainQuery","$in","_deleted","result","queryResult","find","toArray","row","query","originalPreparedQuery","preparedQuery","mongoSelector","skip","limit","sort","mongoSort","resultDocs","documents","count","countDocuments","mode","cleanup","minimumDeletedTime","maxDeletionTime","deleteMany","$lt","getAttachmentData","_documentId","_attachmentId","_digest","changeStream","remove","drop","close","pipe","c","conflictResultionTasks","resolveConflictResultionTask","_taskSolution","createMongoDBStorageInstance","params","instance","resolve"],"sources":["../../../../src/plugins/storage-mongodb/rx-storage-instance-mongodb.ts"],"sourcesContent":["import {\n    BehaviorSubject,\n    Observable,\n    Subject,\n    filter,\n    firstValueFrom\n} from 'rxjs';\nimport { getPrimaryFieldOfPrimaryKey } from '../../rx-schema-helper.ts';\nimport type {\n    BulkWriteRow,\n    EventBulk,\n    PreparedQuery,\n    RxConflictResultionTask,\n    RxConflictResultionTaskSolution,\n    RxDocumentData,\n    RxJsonSchema,\n    RxStorageBulkWriteResponse,\n    RxStorageChangeEvent,\n    RxStorageCountResult,\n    RxStorageDefaultCheckpoint,\n    RxStorageInstance,\n    RxStorageInstanceCreationParams,\n    RxStorageQueryResult,\n    RxStorageWriteErrorConflict,\n    StringKeys\n} from '../../types/index.d.ts';\nimport {\n    ensureNotFalsy,\n    getFromMapOrThrow,\n    isMaybeReadonlyArray,\n    now,\n    PROMISE_RESOLVE_VOID,\n    requestIdlePromise\n} from '../../plugins/utils/index.ts';\nimport {\n    MongoDBPreparedQuery,\n    MongoDBStorageInternals,\n    MongoQuerySelector,\n    RxStorageMongoDBInstanceCreationOptions,\n    RxStorageMongoDBSettings\n} from './mongodb-types.ts';\nimport { RxStorageMongoDB } from './rx-storage-mongodb.ts';\nimport {\n    Db as MongoDatabase,\n    Collection as MongoCollection,\n    MongoClient,\n    ObjectId,\n    ClientSession\n} from 'mongodb';\nimport { categorizeBulkWriteRows } from '../../rx-storage-helper.ts';\nimport {\n    MONGO_ID_SUBSTITUTE_FIELDNAME,\n    getMongoDBIndexName,\n    prepareMongoDBQuery,\n    swapMongoToRxDoc,\n    swapRxDocToMongo\n} from './mongodb-helper.ts';\n\nexport class RxStorageInstanceMongoDB<RxDocType> implements RxStorageInstance<\n    RxDocType,\n    MongoDBStorageInternals,\n    RxStorageMongoDBInstanceCreationOptions,\n    RxStorageDefaultCheckpoint\n> {\n\n    public readonly primaryPath: StringKeys<RxDocumentData<RxDocType>>;\n    public readonly inMongoPrimaryPath: string;\n    public closed?: Promise<void>;\n    private readonly changes$: Subject<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint>> = new Subject();\n    public readonly mongoClient: MongoClient;\n    public readonly mongoDatabase: MongoDatabase;\n    public readonly mongoCollectionPromise: Promise<MongoCollection<RxDocumentData<RxDocType> | any>>;\n    // public mongoChangeStream?: MongoChangeStream<any, ChangeStreamDocument<any>>;\n\n\n    /**\n     * Closing the connection must not happen when\n     * an operation is running, otherwise we get an error.\n     * So we store all running operations here so that\n     * they can be awaited.\n     */\n    public readonly runningOperations = new BehaviorSubject(0);\n    public writeQueue: Promise<any> = PROMISE_RESOLVE_VOID;\n\n    /**\n     * We use this to be able to still fetch\n     * the objectId after transforming the document from mongo-style (with _id)\n     * to RxDB\n     */\n    public readonly mongoObjectIdCache = new WeakMap<RxDocumentData<RxDocType>, ObjectId>();\n\n    constructor(\n        public readonly storage: RxStorageMongoDB,\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly schema: Readonly<RxJsonSchema<RxDocumentData<RxDocType>>>,\n        public readonly internals: MongoDBStorageInternals,\n        public readonly options: Readonly<RxStorageMongoDBInstanceCreationOptions>,\n        public readonly settings: RxStorageMongoDBSettings\n    ) {\n        if (this.schema.attachments) {\n            throw new Error('attachments not supported in mongodb storage, make a PR if you need that');\n        }\n        this.primaryPath = getPrimaryFieldOfPrimaryKey(this.schema.primaryKey);\n        this.inMongoPrimaryPath = this.primaryPath === '_id' ? MONGO_ID_SUBSTITUTE_FIELDNAME : this.primaryPath;\n        this.mongoClient = new MongoClient(storage.databaseSettings.connection);\n        this.mongoDatabase = this.mongoClient.db(databaseName + '-v' + this.schema.version);\n\n        const indexes = (this.schema.indexes ? this.schema.indexes.slice() : []).map(index => {\n            const arIndex = isMaybeReadonlyArray(index) ? index.slice(0) : [index];\n            return arIndex;\n        });\n        indexes.push([this.inMongoPrimaryPath]);\n\n        this.mongoCollectionPromise = this.mongoDatabase.createCollection(collectionName)\n            .then(async (mongoCollection) => {\n                await mongoCollection.createIndexes(\n                    indexes.map(index => {\n                        const mongoIndex: any = {};\n                        index.forEach(field => mongoIndex[field] = 1);\n                        return { name: getMongoDBIndexName(index), key: mongoIndex };\n                    })\n                );\n\n                /**\n                 * TODO in a setup where multiple servers run node.js\n                 * processes that use the mongodb storage, we should propagate\n                 * events by listening to the mongodb changestream.\n                 * This maybe should be a premium feature.\n                 */\n                // this.mongoChangeStream = mongoCollection.watch(\n                //     undefined, {\n                //     batchSize: 100\n                // }\n                // ).on('change', change => {\n\n\n                //     const eventBulkId = randomCouchString(10);\n                //     const newDocData: RxDocumentData<RxDocType> = (change as any).fullDocument;\n                //     const documentId = newDocData[this.primaryPath] as any;\n\n                //     const eventBulk: EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint> = {\n                //         checkpoint: {\n                //             id: newDocData[this.primaryPath] as any,\n                //             lwt: newDocData._meta.lwt\n                //         },\n                //         context: 'mongodb-write',\n                //         id: eventBulkId,\n                //         events: [{\n                //             documentData: newDocData,\n                //             documentId,\n                //             operation: 'INSERT',\n                //             previousDocumentData: undefined,\n                //         }],\n                //             startTime: now(),\n                //             endTime: now()\n                //     };\n\n                //     this.changes$.next(eventBulk);\n                // });\n\n\n                return mongoCollection;\n            });\n\n\n    }\n\n    /**\n     * Bulk writes on the mongodb storage.\n     * Notice that MongoDB does not support cross-document transactions\n     * so we have to do a update-if-previous-is-correct like operations.\n     * (Similar to what RxDB does with the revision system)\n     */\n    bulkWrite(\n        documentWrites: BulkWriteRow<RxDocType>[],\n        context: string\n    ): Promise<RxStorageBulkWriteResponse<RxDocType>> {\n\n        this.writeQueue = this.writeQueue.then(async () => {\n            this.runningOperations.next(this.runningOperations.getValue() + 1);\n\n            const mongoCollection = await this.mongoCollectionPromise;\n            if (this.closed) {\n                return Promise.reject(new Error('already closed'));\n            }\n            const primaryPath = this.primaryPath;\n            const ret: RxStorageBulkWriteResponse<RxDocType> = {\n                success: [],\n                error: []\n            };\n\n\n            const docIds = documentWrites.map(d => (d.document as any)[primaryPath]);\n            const documentStates = await this.findDocumentsById(\n                docIds,\n                true\n            );\n            const documentStatesMap = new Map();\n            documentStates.forEach(doc => {\n                const docId = doc[primaryPath];\n                documentStatesMap.set(docId, doc);\n            });\n            const categorized = categorizeBulkWriteRows<RxDocType>(\n                this,\n                primaryPath as any,\n                documentStatesMap,\n                documentWrites,\n                context\n            );\n\n            const changeByDocId = new Map<string, RxStorageChangeEvent<RxDocumentData<RxDocType>>>();\n            categorized.eventBulk.events.forEach(change => {\n                changeByDocId.set(change.documentId, change);\n            });\n\n\n            ret.error = categorized.errors;\n\n            /**\n             * Reset the event bulk because\n             * conflicts can still appear after the categorization\n             */\n            const eventBulk = categorized.eventBulk;\n            eventBulk.events = [];\n\n            await Promise.all([\n                /**\n                 * Inserts\n                 * @link https://sparkbyexamples.com/mongodb/mongodb-insert-if-not-exists/\n                 */\n                Promise.all(\n                    categorized.bulkInsertDocs.map(async (writeRow) => {\n                        const docId: string = writeRow.document[primaryPath] as any;\n                        const writeResult = await mongoCollection.findOneAndUpdate(\n                            {\n                                [this.inMongoPrimaryPath]: docId\n                            },\n                            {\n                                $setOnInsert: swapRxDocToMongo(writeRow.document)\n                            },\n                            {\n                                upsert: true,\n                                includeResultMetadata: true\n                            }\n                        );\n                        if (writeResult.value) {\n                            // had insert conflict\n                            const conflictError: RxStorageWriteErrorConflict<RxDocType> = {\n                                status: 409,\n                                documentId: docId,\n                                writeRow,\n                                documentInDb: swapMongoToRxDoc(ensureNotFalsy(writeResult.value)),\n                                isError: true\n                            };\n                            ret.error.push(conflictError);\n                        } else {\n                            const event = changeByDocId.get(docId);\n                            if (event) {\n                                eventBulk.events.push(event);\n                            }\n                            ret.success.push(writeRow.document);\n                        }\n                    })\n                ),\n                /**\n                 * Updates\n                 */\n                Promise.all(\n                    categorized.bulkUpdateDocs.map(async (writeRow) => {\n                        const docId = writeRow.document[primaryPath] as string;\n                        const writeResult = await mongoCollection.findOneAndReplace(\n                            {\n                                [this.inMongoPrimaryPath]: docId,\n                                _rev: ensureNotFalsy(writeRow.previous)._rev\n                            },\n                            swapRxDocToMongo(writeRow.document),\n                            {\n                                includeResultMetadata: true,\n                                upsert: false,\n                                returnDocument: 'before'\n                            }\n                        );\n                        if (!writeResult.ok) {\n                            const currentDocState = await this.findDocumentsById([docId], true);\n                            const currentDoc = currentDocState[0];\n                            // had insert conflict\n                            const conflictError: RxStorageWriteErrorConflict<RxDocType> = {\n                                status: 409,\n                                documentId: docId,\n                                writeRow,\n                                documentInDb: ensureNotFalsy(currentDoc),\n                                isError: true\n                            };\n                            ret.error.push(conflictError);\n                        } else {\n                            const event = getFromMapOrThrow(changeByDocId, docId);\n                            eventBulk.events.push(event);\n                            ret.success.push(writeRow.document);\n                        }\n\n                    })\n                )\n            ]);\n\n            if (categorized.eventBulk.events.length > 0) {\n                const lastState = ensureNotFalsy(categorized.newestRow).document;\n                categorized.eventBulk.checkpoint = {\n                    id: lastState[primaryPath],\n                    lwt: lastState._meta.lwt\n                };\n                categorized.eventBulk.endTime = now();\n                this.changes$.next(categorized.eventBulk);\n            }\n\n            this.runningOperations.next(this.runningOperations.getValue() - 1);\n            return ret;\n        });\n        return this.writeQueue;\n\n    }\n\n    async findDocumentsById(\n        docIds: string[],\n        withDeleted: boolean,\n        session?: ClientSession\n    ): Promise<RxDocumentData<RxDocType>[]> {\n        this.runningOperations.next(this.runningOperations.getValue() + 1);\n        const mongoCollection = await this.mongoCollectionPromise;\n        const primaryPath = this.primaryPath;\n\n        const plainQuery: MongoQuerySelector<any> = {\n            [primaryPath]: {\n                $in: docIds\n            }\n        };\n        if (!withDeleted) {\n            plainQuery._deleted = false;\n        }\n        const result: RxDocumentData<RxDocType>[] = [];\n        const queryResult = await mongoCollection.find(\n            plainQuery,\n            {\n                session\n            }\n        ).toArray();\n        queryResult.forEach(row => {\n            result.push(\n                swapMongoToRxDoc(\n                    row as any\n                )\n            );\n        });\n        this.runningOperations.next(this.runningOperations.getValue() - 1);\n        return result;\n    }\n\n    async query(\n        originalPreparedQuery: PreparedQuery<RxDocType>\n    ): Promise<RxStorageQueryResult<RxDocType>> {\n        const preparedQuery = prepareMongoDBQuery(this.schema, originalPreparedQuery.query);\n\n        this.runningOperations.next(this.runningOperations.getValue() + 1);\n        await this.writeQueue;\n        const mongoCollection = await this.mongoCollectionPromise;\n\n        let query = mongoCollection.find(preparedQuery.mongoSelector);\n        if (preparedQuery.query.skip) {\n            query = query.skip(preparedQuery.query.skip);\n        }\n        if (preparedQuery.query.limit) {\n            query = query.limit(preparedQuery.query.limit);\n        }\n        if (preparedQuery.query.sort) {\n            query = query.sort(preparedQuery.mongoSort);\n        }\n        const resultDocs = await query.toArray();\n        this.runningOperations.next(this.runningOperations.getValue() - 1);\n        return {\n            documents: resultDocs.map(d => swapMongoToRxDoc(d))\n        };\n    }\n\n    async count(\n        originalPreparedQuery: PreparedQuery<RxDocType>\n    ): Promise<RxStorageCountResult> {\n        const preparedQuery = prepareMongoDBQuery(this.schema, originalPreparedQuery.query);\n        this.runningOperations.next(this.runningOperations.getValue() + 1);\n        await this.writeQueue;\n        const mongoCollection = await this.mongoCollectionPromise;\n        const count = await mongoCollection.countDocuments(preparedQuery.mongoSelector);\n        this.runningOperations.next(this.runningOperations.getValue() - 1);\n        return {\n            count,\n            mode: 'fast'\n        };\n    }\n\n    async cleanup(minimumDeletedTime: number): Promise<boolean> {\n        this.runningOperations.next(this.runningOperations.getValue() + 1);\n        const mongoCollection = await this.mongoCollectionPromise;\n        const maxDeletionTime = now() - minimumDeletedTime;\n        await mongoCollection.deleteMany({\n            _deleted: true,\n            '_meta.lwt': {\n                $lt: maxDeletionTime\n            }\n        });\n        this.runningOperations.next(this.runningOperations.getValue() - 1);\n        return true;\n    }\n\n    async getAttachmentData(\n        _documentId: string,\n        _attachmentId: string,\n        _digest: string\n    ): Promise<string> {\n        await this.mongoCollectionPromise;\n        throw new Error('attachments not implemented, make a PR');\n    }\n\n    changeStream(): Observable<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint>> {\n        return this.changes$;\n    }\n\n    async remove(): Promise<void> {\n        if (this.closed) {\n            throw new Error('already closed');\n        }\n        this.runningOperations.next(this.runningOperations.getValue() + 1);\n        const mongoCollection = await this.mongoCollectionPromise;\n        await mongoCollection.drop();\n        this.runningOperations.next(this.runningOperations.getValue() - 1);\n        await this.close();\n    }\n\n    async close(): Promise<void> {\n        // TODO without this next-tick we have random fails in the tests\n        await requestIdlePromise(200);\n\n        if (this.closed) {\n            return this.closed;\n        }\n        this.closed = (async () => {\n            await this.mongoCollectionPromise;\n            await firstValueFrom(this.runningOperations.pipe(filter(c => c === 0)));\n            // await ensureNotFalsy(this.mongoChangeStream).close();\n            await this.mongoClient.close();\n        })();\n        return this.closed;\n    }\n\n    conflictResultionTasks(): Observable<RxConflictResultionTask<RxDocType>> {\n        return new Subject();\n    }\n    async resolveConflictResultionTask(_taskSolution: RxConflictResultionTaskSolution<RxDocType>): Promise<void> { }\n}\n\nexport function createMongoDBStorageInstance<RxDocType>(\n    storage: RxStorageMongoDB,\n    params: RxStorageInstanceCreationParams<RxDocType, RxStorageMongoDBInstanceCreationOptions>,\n    settings: RxStorageMongoDBSettings\n): Promise<RxStorageInstanceMongoDB<RxDocType>> {\n    const instance = new RxStorageInstanceMongoDB(\n        storage,\n        params.databaseName,\n        params.collectionName,\n        params.schema,\n        {},\n        params.options,\n        settings\n    );\n    return Promise.resolve(instance);\n}\n"],"mappings":"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","ignoreList":[]}