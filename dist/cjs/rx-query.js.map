{"version":3,"file":"rx-query.js","names":["_rxjs","require","_operators","_index","_rxError","_hooks","_eventReduce","_queryCache","_rxQueryHelper","_rxQuerySingleResult","_queryPlanner","_queryCount","newQueryID","RxQueryBase","exports","op","mangoQuery","collection","other","id","_execOverDatabaseCount","_creationTime","now","_lastEnsureEqual","uncached","refCount$","BehaviorSubject","_result","_latestChangeEvent","_lastExecStart","_lastExecEnd","_ensureEqualQueue","PROMISE_RESOLVE_FALSE","_getDefaultQuery","isFindOneByIdQuery","schema","primaryPath","_proto","prototype","_setResultData","newResultData","RxQuerySingleResult","Map","Array","from","values","newQueryResult","length","_execOverDatabase","preparedQuery","getPreparedQuery","result","storageInstance","count","mode","database","allowSlowCount","newRxError","queryObj","ids","ensureNotFalsy","selector","$in","ret","mustBeQueried","forEach","docData","_docCache","getLatestDocumentDataIfExists","_deleted","doc","getCachedRxDocument","set","push","docs","findDocumentsById","primary","docsPromise","queryCollection","then","exec","throwIfMissing","name","query","_ensureEqual","firstValueFrom","$","toString","stringObj","sortObject","value","JSON","stringify","hookInput","rxQuery","normalizeMangoQuery","jsonSchema","$eq","index","unshift","runPluginHooks","prepareQuery","doesDocumentDataMatch","queryMatcher","remove","isArray","Promise","all","map","update","_updateObj","pluginMissing","where","_queryObj","sort","_params","skip","_amount","limit","_createClass2","default","key","get","_$","results$","pipe","filter","changeEvent","isLocal","startWith","mergeMap","shareReplay","RXJS_SHARE_REPLAY_DEFAULTS","distinctUntilChanged","prev","curr","time","useResult","documents","docsMap","slice","merge","reactivity","getReactivityFactory","fromObservable","undefined","normalizedQuery","overwriteGetterForCaching","getQueryMatcher","tunnelQueryCache","getByQuery","createRxQuery","triggerCacheReplacement","_isResultsInSync","currentLatestEventNumber","asRxQuery","_changeEventBuffer","counter","destroyed","__ensureEqual","mustReExec","missedChangeEvents","getFrom","runChangeEvents","reduceByLastOfDoc","previousCount","newCount","cE","didMatchBefore","previousDocumentData","doesMatchNow","documentData","eventReduceResult","calculateNewResults","runFullQueryAgain","changed","newResults","areRxDocumentArraysEqual","docsData","resolve","mutateableQuery","queryPlan","getQueryPlan","docIds","docId","docsFromStorage","appendToArray","fromStorageList","queryResult","Object","keys","find","r","isRxQuery","obj"],"sources":["../../src/rx-query.ts"],"sourcesContent":["import {\n    BehaviorSubject,\n    firstValueFrom,\n    Observable,\n    merge\n} from 'rxjs';\nimport {\n    mergeMap,\n    filter,\n    map,\n    startWith,\n    distinctUntilChanged,\n    shareReplay\n} from 'rxjs/operators';\nimport {\n    sortObject,\n    pluginMissing,\n    overwriteGetterForCaching,\n    now,\n    PROMISE_RESOLVE_FALSE,\n    RXJS_SHARE_REPLAY_DEFAULTS,\n    ensureNotFalsy,\n    areRxDocumentArraysEqual,\n    appendToArray\n} from './plugins/utils/index.ts';\nimport {\n    newRxError\n} from './rx-error.ts';\nimport {\n    runPluginHooks\n} from './hooks.ts';\nimport type {\n    RxCollection,\n    RxDocument,\n    RxQueryOP,\n    RxQuery,\n    MangoQuery,\n    MangoQuerySortPart,\n    MangoQuerySelector,\n    PreparedQuery,\n    RxChangeEvent,\n    RxDocumentWriteData,\n    RxDocumentData,\n    QueryMatcher,\n    RxJsonSchema,\n    FilledMangoQuery\n} from './types/index.d.ts';\nimport { calculateNewResults } from './event-reduce.ts';\nimport { triggerCacheReplacement } from './query-cache.ts';\nimport { getQueryMatcher, normalizeMangoQuery } from './rx-query-helper.ts';\nimport { RxQuerySingleResult } from './rx-query-single-result.ts';\nimport { getQueryPlan } from './query-planner.ts';\n\nlet _queryCount = 0;\nconst newQueryID = function (): number {\n    return ++_queryCount;\n};\n\nexport class RxQueryBase<\n    RxDocType,\n    RxQueryResult,\n    OrmMethods = {},\n    Reactivity = unknown,\n> {\n\n    public id: number = newQueryID();\n\n    /**\n     * Some stats then are used for debugging and cache replacement policies\n     */\n    public _execOverDatabaseCount: number = 0;\n    public _creationTime = now();\n\n    // used in the query-cache to determine if the RxQuery can be cleaned up.\n    public _lastEnsureEqual = 0;\n\n    public uncached = false;\n\n    // used to count the subscribers to the query\n    public refCount$ = new BehaviorSubject(null);\n\n    public isFindOneByIdQuery: false | string | string[];\n\n\n    /**\n     * Contains the current result state\n     * or null if query has not run yet.\n     */\n    public _result: RxQuerySingleResult<RxDocType> | null = null;\n\n\n    constructor(\n        public op: RxQueryOP,\n        public mangoQuery: Readonly<MangoQuery<RxDocType>>,\n        public collection: RxCollection<RxDocType>,\n        // used by some plugins\n        public other: any = {}\n    ) {\n        if (!mangoQuery) {\n            this.mangoQuery = _getDefaultQuery();\n        }\n\n        this.isFindOneByIdQuery = isFindOneByIdQuery(\n            this.collection.schema.primaryPath as string,\n            mangoQuery\n        );\n    }\n    get $(): BehaviorSubject<RxQueryResult> {\n        if (!this._$) {\n\n            const results$ = this.collection.$.pipe(\n                /**\n                 * Performance shortcut.\n                 * Changes to local documents are not relevant for the query.\n                 */\n                filter(changeEvent => !changeEvent.isLocal),\n                /**\n                 * Start once to ensure the querying also starts\n                 * when there where no changes.\n                 */\n                startWith(null),\n                // ensure query results are up to date.\n                mergeMap(() => _ensureEqual(this as any)),\n                // use the current result set, written by _ensureEqual().\n                map(() => this._result),\n                // do not run stuff above for each new subscriber, only once.\n                shareReplay(RXJS_SHARE_REPLAY_DEFAULTS),\n                // do not proceed if result set has not changed.\n                distinctUntilChanged((prev, curr) => {\n                    if (prev && prev.time === ensureNotFalsy(curr).time) {\n                        return true;\n                    } else {\n                        return false;\n                    }\n                }),\n                filter(result => !!result),\n                /**\n                 * Map the result set to a single RxDocument or an array,\n                 * depending on query type\n                 */\n                map((result) => {\n                    const useResult = ensureNotFalsy(result);\n                    if (this.op === 'count') {\n                        return useResult.count;\n                    } else if (this.op === 'findOne') {\n                        // findOne()-queries emit RxDocument or null\n                        return useResult.documents.length === 0 ? null : useResult.documents[0];\n                    } else if (this.op === 'findByIds') {\n                        return useResult.docsMap;\n                    } else {\n                        // find()-queries emit RxDocument[]\n                        // Flat copy the array so it won't matter if the user modifies it.\n                        return useResult.documents.slice(0);\n                    }\n                })\n            );\n\n            this._$ = merge<any>(\n                results$,\n                /**\n                 * Also add the refCount$ to the query observable\n                 * to allow us to count the amount of subscribers.\n                 */\n                this.refCount$.pipe(\n                    filter(() => false)\n                )\n            );\n        }\n        return this._$ as any;\n    }\n\n    get $$(): Reactivity {\n        const reactivity = this.collection.database.getReactivityFactory();\n        return reactivity.fromObservable(\n            this.$,\n            undefined,\n            this.collection.database\n        );\n    }\n\n    // stores the changeEvent-number of the last handled change-event\n    public _latestChangeEvent: -1 | number = -1;\n\n    // time stamps on when the last full exec over the database has run\n    // used to properly handle events that happen while the find-query is running\n    public _lastExecStart: number = 0;\n    public _lastExecEnd: number = 0;\n\n    /**\n     * ensures that the exec-runs\n     * are not run in parallel\n     */\n    public _ensureEqualQueue: Promise<boolean> = PROMISE_RESOLVE_FALSE;\n\n    /**\n     * Returns an observable that emits the results\n     * This should behave like an rxjs-BehaviorSubject which means:\n     * - Emit the current result-set on subscribe\n     * - Emit the new result-set when an RxChangeEvent comes in\n     * - Do not emit anything before the first result-set was created (no null)\n     */\n    public _$?: Observable<RxQueryResult>;\n\n    /**\n     * set the new result-data as result-docs of the query\n     * @param newResultData json-docs that were received from the storage\n     */\n    _setResultData(newResultData: RxDocumentData<RxDocType>[] | number | Map<string, RxDocumentData<RxDocType>>): void {\n        if (typeof newResultData === 'number') {\n            this._result = new RxQuerySingleResult<RxDocType>(\n                this.collection,\n                [],\n                newResultData\n            );\n            return;\n        } else if (newResultData instanceof Map) {\n            newResultData = Array.from((newResultData as Map<string, RxDocumentData<RxDocType>>).values());\n        }\n\n        const newQueryResult = new RxQuerySingleResult<RxDocType>(\n            this.collection,\n            newResultData,\n            newResultData.length\n        );\n        this._result = newQueryResult;\n    }\n\n    /**\n     * executes the query on the database\n     * @return results-array with document-data\n     */\n    async _execOverDatabase(): Promise<RxDocumentData<RxDocType>[] | number> {\n        this._execOverDatabaseCount = this._execOverDatabaseCount + 1;\n        this._lastExecStart = now();\n\n\n        if (this.op === 'count') {\n            const preparedQuery = this.getPreparedQuery();\n            const result = await this.collection.storageInstance.count(preparedQuery);\n            if (result.mode === 'slow' && !this.collection.database.allowSlowCount) {\n                throw newRxError('QU14', {\n                    collection: this.collection,\n                    queryObj: this.mangoQuery\n                });\n            } else {\n                return result.count;\n            }\n        }\n\n        if (this.op === 'findByIds') {\n            const ids: string[] = ensureNotFalsy(this.mangoQuery.selector as any)[this.collection.schema.primaryPath].$in;\n            const ret = new Map<string, RxDocument<RxDocType>>();\n            const mustBeQueried: string[] = [];\n            // first try to fill from docCache\n            ids.forEach(id => {\n                const docData = this.collection._docCache.getLatestDocumentDataIfExists(id);\n                if (docData) {\n                    if (!docData._deleted) {\n                        const doc = this.collection._docCache.getCachedRxDocument(docData);\n                        ret.set(id, doc);\n                    }\n                } else {\n                    mustBeQueried.push(id);\n                }\n            });\n            // everything which was not in docCache must be fetched from the storage\n            if (mustBeQueried.length > 0) {\n                const docs = await this.collection.storageInstance.findDocumentsById(mustBeQueried, false);\n                docs.forEach(docData => {\n                    const doc = this.collection._docCache.getCachedRxDocument(docData);\n                    ret.set(doc.primary, doc);\n                });\n            }\n            return ret as any;\n        }\n\n\n        const docsPromise = queryCollection<RxDocType>(this as any);\n        return docsPromise.then(docs => {\n            this._lastExecEnd = now();\n            return docs;\n        });\n    }\n\n    /**\n     * Execute the query\n     * To have an easier implementations,\n     * just subscribe and use the first result\n     */\n    public exec(throwIfMissing: true): Promise<RxDocument<RxDocType, OrmMethods, Reactivity>>;\n    public exec(): Promise<RxQueryResult>;\n    public exec(throwIfMissing?: boolean): Promise<any> {\n        if (throwIfMissing && this.op !== 'findOne') {\n            throw newRxError('QU9', {\n                collection: this.collection.name,\n                query: this.mangoQuery,\n                op: this.op\n            });\n        }\n\n\n        /**\n         * run _ensureEqual() here,\n         * this will make sure that errors in the query which throw inside of the RxStorage,\n         * will be thrown at this execution context and not in the background.\n         */\n        return _ensureEqual(this as any)\n            .then(() => firstValueFrom(this.$))\n            .then(result => {\n                if (!result && throwIfMissing) {\n                    throw newRxError('QU10', {\n                        collection: this.collection.name,\n                        query: this.mangoQuery,\n                        op: this.op\n                    });\n                } else {\n                    return result;\n                }\n            });\n    }\n\n\n\n    /**\n     * cached call to get the queryMatcher\n     * @overwrites itself with the actual value\n     */\n    get queryMatcher(): QueryMatcher<RxDocumentWriteData<RxDocType>> {\n        const schema = this.collection.schema.jsonSchema;\n        const normalizedQuery = normalizeMangoQuery(\n            this.collection.schema.jsonSchema,\n            this.mangoQuery\n        );\n        return overwriteGetterForCaching(\n            this,\n            'queryMatcher',\n            getQueryMatcher(\n                schema,\n                normalizedQuery\n            ) as any\n        );\n    }\n\n    /**\n     * returns a string that is used for equal-comparisons\n     * @overwrites itself with the actual value\n     */\n    toString(): string {\n        const stringObj = sortObject({\n            op: this.op,\n            query: this.mangoQuery,\n            other: this.other\n        }, true);\n        const value = JSON.stringify(stringObj);\n        this.toString = () => value;\n        return value;\n    }\n\n    /**\n     * returns the prepared query\n     * which can be send to the storage instance to query for documents.\n     * @overwrites itself with the actual value.\n     */\n    getPreparedQuery(): PreparedQuery<RxDocType> {\n        const hookInput = {\n            rxQuery: this,\n            // can be mutated by the hooks so we have to deep clone first.\n            mangoQuery: normalizeMangoQuery<RxDocType>(\n                this.collection.schema.jsonSchema,\n                this.mangoQuery\n            )\n        };\n        (hookInput.mangoQuery.selector as any)._deleted = { $eq: false };\n        if (hookInput.mangoQuery.index) {\n            hookInput.mangoQuery.index.unshift('_deleted');\n        }\n        runPluginHooks('prePrepareQuery', hookInput);\n\n        const value = prepareQuery(\n            this.collection.schema.jsonSchema,\n            hookInput.mangoQuery as any\n        );\n\n        this.getPreparedQuery = () => value;\n        return value;\n    }\n\n    /**\n     * returns true if the document matches the query,\n     * does not use the 'skip' and 'limit'\n     */\n    doesDocumentDataMatch(docData: RxDocType | any): boolean {\n        // if doc is deleted, it cannot match\n        if (docData._deleted) {\n            return false;\n        }\n\n        return this.queryMatcher(docData);\n    }\n\n    /**\n     * deletes all found documents\n     * @return promise with deleted documents\n     */\n    remove(): Promise<RxQueryResult> {\n        return this\n            .exec()\n            .then(docs => {\n                if (Array.isArray(docs)) {\n                    // TODO use a bulk operation instead of running .remove() on each document\n                    return Promise.all(docs.map(doc => doc.remove()));\n                } else {\n                    return (docs as any).remove();\n                }\n            });\n    }\n\n\n    /**\n     * helper function to transform RxQueryBase to RxQuery type\n     */\n    get asRxQuery(): RxQuery<RxDocType, RxQueryResult> {\n        return this as any;\n    }\n\n    /**\n     * updates all found documents\n     * @overwritten by plugin (optional)\n     */\n    update(_updateObj: any): Promise<RxQueryResult> {\n        throw pluginMissing('update');\n    }\n\n\n    // we only set some methods of query-builder here\n    // because the others depend on these ones\n    where(_queryObj: MangoQuerySelector<RxDocType> | keyof RxDocType | string): RxQuery<RxDocType, RxQueryResult> {\n        throw pluginMissing('query-builder');\n    }\n    sort(_params: string | MangoQuerySortPart<RxDocType>): RxQuery<RxDocType, RxQueryResult> {\n        throw pluginMissing('query-builder');\n    }\n    skip(_amount: number | null): RxQuery<RxDocType, RxQueryResult> {\n        throw pluginMissing('query-builder');\n    }\n    limit(_amount: number | null): RxQuery<RxDocType, RxQueryResult> {\n        throw pluginMissing('query-builder');\n    }\n}\n\nexport function _getDefaultQuery<RxDocType>(): MangoQuery<RxDocType> {\n    return {\n        selector: {}\n    };\n}\n\n/**\n * run this query through the QueryCache\n */\nexport function tunnelQueryCache<RxDocumentType, RxQueryResult>(\n    rxQuery: RxQueryBase<RxDocumentType, RxQueryResult>\n): RxQuery<RxDocumentType, RxQueryResult> {\n    return rxQuery.collection._queryCache.getByQuery(rxQuery as any);\n}\n\nexport function createRxQuery<RxDocType>(\n    op: RxQueryOP,\n    queryObj: MangoQuery<RxDocType>,\n    collection: RxCollection<RxDocType>,\n    other?: any\n) {\n    runPluginHooks('preCreateRxQuery', {\n        op,\n        queryObj,\n        collection,\n        other\n    });\n\n    let ret = new RxQueryBase<RxDocType, any>(op, queryObj, collection, other);\n\n    // ensure when created with same params, only one is created\n    ret = tunnelQueryCache(ret);\n    triggerCacheReplacement(collection);\n\n    return ret;\n}\n\n/**\n * Check if the current results-state is in sync with the database\n * which means that no write event happened since the last run.\n * @return false if not which means it should re-execute\n */\nfunction _isResultsInSync(rxQuery: RxQueryBase<any, any>): boolean {\n    const currentLatestEventNumber = rxQuery.asRxQuery.collection._changeEventBuffer.counter;\n    if (rxQuery._latestChangeEvent >= currentLatestEventNumber) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\n/**\n * wraps __ensureEqual()\n * to ensure it does not run in parallel\n * @return true if has changed, false if not\n */\nfunction _ensureEqual(rxQuery: RxQueryBase<any, any>): Promise<boolean> {\n    // Optimisation shortcut\n    if (\n        rxQuery.collection.database.destroyed ||\n        _isResultsInSync(rxQuery)\n    ) {\n        return PROMISE_RESOLVE_FALSE;\n    }\n\n    rxQuery._ensureEqualQueue = rxQuery._ensureEqualQueue\n        .then(() => __ensureEqual(rxQuery));\n    return rxQuery._ensureEqualQueue;\n}\n\n/**\n * ensures that the results of this query is equal to the results which a query over the database would give\n * @return true if results have changed\n */\nfunction __ensureEqual<RxDocType>(rxQuery: RxQueryBase<RxDocType, any>): Promise<boolean> {\n    rxQuery._lastEnsureEqual = now();\n\n    /**\n     * Optimisation shortcuts\n     */\n    if (\n        // db is closed\n        rxQuery.collection.database.destroyed ||\n        // nothing happened since last run\n        _isResultsInSync(rxQuery)\n    ) {\n        return PROMISE_RESOLVE_FALSE;\n    }\n\n    let ret = false;\n    let mustReExec = false; // if this becomes true, a whole execution over the database is made\n    if (rxQuery._latestChangeEvent === -1) {\n        // have not executed yet -> must run\n        mustReExec = true;\n    }\n\n    /**\n     * try to use EventReduce to calculate the new results\n     */\n    if (!mustReExec) {\n        const missedChangeEvents = rxQuery.asRxQuery.collection._changeEventBuffer.getFrom(rxQuery._latestChangeEvent + 1);\n        if (missedChangeEvents === null) {\n            // changeEventBuffer is of bounds -> we must re-execute over the database\n            mustReExec = true;\n        } else {\n            rxQuery._latestChangeEvent = rxQuery.asRxQuery.collection._changeEventBuffer.counter;\n\n            const runChangeEvents: RxChangeEvent<RxDocType>[] = rxQuery.asRxQuery.collection\n                ._changeEventBuffer\n                .reduceByLastOfDoc(missedChangeEvents);\n\n            if (rxQuery.op === 'count') {\n                // 'count' query\n                const previousCount = ensureNotFalsy(rxQuery._result).count;\n                let newCount = previousCount;\n                runChangeEvents.forEach(cE => {\n                    const didMatchBefore = cE.previousDocumentData && rxQuery.doesDocumentDataMatch(cE.previousDocumentData);\n                    const doesMatchNow = rxQuery.doesDocumentDataMatch(cE.documentData);\n\n                    if (!didMatchBefore && doesMatchNow) {\n                        newCount++;\n                    }\n                    if (didMatchBefore && !doesMatchNow) {\n                        newCount--;\n                    }\n                });\n                if (newCount !== previousCount) {\n                    ret = true; // true because results changed\n                    rxQuery._setResultData(newCount as any);\n                }\n            } else {\n                // 'find' or 'findOne' query\n                const eventReduceResult = calculateNewResults(\n                    rxQuery as any,\n                    runChangeEvents\n                );\n                if (eventReduceResult.runFullQueryAgain) {\n                    // could not calculate the new results, execute must be done\n                    mustReExec = true;\n                } else if (eventReduceResult.changed) {\n                    // we got the new results, we do not have to re-execute, mustReExec stays false\n                    ret = true; // true because results changed\n                    rxQuery._setResultData(eventReduceResult.newResults as any);\n                }\n            }\n        }\n    }\n\n    // oh no we have to re-execute the whole query over the database\n    if (mustReExec) {\n        return rxQuery._execOverDatabase()\n            .then(newResultData => {\n\n                /**\n                 * The RxStorage is defined to always first emit events and then return\n                 * on bulkWrite() calls. So here we have to use the counter AFTER the execOverDatabase()\n                 * has been run, not the one from before.\n                 */\n                rxQuery._latestChangeEvent = rxQuery.collection._changeEventBuffer.counter;\n\n                // A count query needs a different has-changed check.\n                if (typeof newResultData === 'number') {\n                    if (\n                        !rxQuery._result ||\n                        newResultData !== rxQuery._result.count\n                    ) {\n                        ret = true;\n                        rxQuery._setResultData(newResultData as any);\n                    }\n                    return ret;\n                }\n                if (\n                    !rxQuery._result ||\n                    !areRxDocumentArraysEqual(\n                        rxQuery.collection.schema.primaryPath,\n                        newResultData,\n                        rxQuery._result.docsData\n                    )\n                ) {\n                    ret = true; // true because results changed\n                    rxQuery._setResultData(newResultData as any);\n                }\n                return ret;\n            });\n    }\n    return Promise.resolve(ret); // true if results have changed\n}\n\n/**\n * @returns a format of the query that can be used with the storage\n * when calling RxStorageInstance().query()\n */\nexport function prepareQuery<RxDocType>(\n    schema: RxJsonSchema<RxDocumentData<RxDocType>>,\n    mutateableQuery: FilledMangoQuery<RxDocType>\n): PreparedQuery<RxDocType> {\n    if (!mutateableQuery.sort) {\n        throw newRxError('SNH', {\n            query: mutateableQuery\n        });\n    }\n\n    /**\n     * Store the query plan together with the\n     * prepared query to save performance.\n     */\n    const queryPlan = getQueryPlan(\n        schema,\n        mutateableQuery\n    );\n\n    return {\n        query: mutateableQuery,\n        queryPlan\n    };\n}\n\n/**\n * Runs the query over the storage instance\n * of the collection.\n * Does some optimizations to ensure findById is used\n * when specific queries are used.\n */\nexport async function queryCollection<RxDocType>(\n    rxQuery: RxQuery<RxDocType> | RxQueryBase<RxDocType, any>\n): Promise<RxDocumentData<RxDocType>[]> {\n    let docs: RxDocumentData<RxDocType>[] = [];\n    const collection = rxQuery.collection;\n\n    /**\n     * Optimizations shortcut.\n     * If query is find-one-document-by-id,\n     * then we do not have to use the slow query() method\n     * but instead can use findDocumentsById()\n     */\n    if (rxQuery.isFindOneByIdQuery) {\n        if (Array.isArray(rxQuery.isFindOneByIdQuery)) {\n            let docIds = rxQuery.isFindOneByIdQuery;\n            docIds = docIds.filter(docId => {\n                // first try to fill from docCache\n                const docData = rxQuery.collection._docCache.getLatestDocumentDataIfExists(docId);\n                if (docData) {\n                    if (!docData._deleted) {\n                        docs.push(docData);\n                    }\n                    return false;\n                } else {\n                    return true;\n                }\n            });\n            // otherwise get from storage\n            if (docIds.length > 0) {\n                const docsFromStorage = await collection.storageInstance.findDocumentsById(docIds, false);\n                appendToArray(docs, docsFromStorage);\n            }\n        } else {\n            const docId = rxQuery.isFindOneByIdQuery;\n\n            // first try to fill from docCache\n            let docData = rxQuery.collection._docCache.getLatestDocumentDataIfExists(docId);\n            if (!docData) {\n                // otherwise get from storage\n                const fromStorageList = await collection.storageInstance.findDocumentsById([docId], false);\n                if (fromStorageList[0]) {\n                    docData = fromStorageList[0];\n                }\n            }\n            if (docData && !docData._deleted) {\n                docs.push(docData);\n            }\n        }\n    } else {\n        const preparedQuery = rxQuery.getPreparedQuery();\n        const queryResult = await collection.storageInstance.query(preparedQuery);\n        docs = queryResult.documents;\n    }\n    return docs;\n\n}\n\n/**\n * Returns true if the given query\n * selects exactly one document by its id.\n * Used to optimize performance because these kind of\n * queries do not have to run over an index and can use get-by-id instead.\n * Returns false if no query of that kind.\n * Returns the document id otherwise.\n */\nexport function isFindOneByIdQuery(\n    primaryPath: string,\n    query: MangoQuery<any>\n): false | string | string[] {\n    // must have exactly one operator which must be $eq || $in\n    if (\n        !query.skip &&\n        query.selector &&\n        Object.keys(query.selector).length === 1 &&\n        query.selector[primaryPath]\n    ) {\n        const value: any = query.selector[primaryPath];\n        if (typeof value === 'string') {\n            return value;\n        } else if (\n            Object.keys(value).length === 1 &&\n            typeof value.$eq === 'string'\n        ) {\n            return value.$eq;\n        }\n\n        // same with $in string arrays\n        if (\n            Object.keys(value).length === 1 &&\n            Array.isArray(value.$eq) &&\n            // must only contain strings\n            !(value.$eq as any[]).find(r => typeof r !== 'string')\n        ) {\n            return value.$eq;\n        }\n    }\n    return false;\n}\n\n\n\nexport function isRxQuery(obj: any): boolean {\n    return obj instanceof RxQueryBase;\n}\n"],"mappings":"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","ignoreList":[]}