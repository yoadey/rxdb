{"version":3,"file":"lokijs.d.js","names":[],"sources":["../../../../src/types/plugins/lokijs.d.ts"],"sourcesContent":["import type { LeaderElector } from 'broadcast-channel';\nimport type { AddReturn } from 'unload';\nimport type { LokiSaveQueue } from '../../plugins/storage-lokijs/loki-save-queue.ts';\n\nexport type LokiDatabaseSettings = any;\n\nexport type LokiCollectionSettings = Partial<any>;\n\nexport type LokiSettings = {\n    database?: LokiDatabaseSettings;\n    collection?: LokiCollectionSettings;\n};\n\nexport type LokiStorageInternals = {\n    leaderElector?: LeaderElector;\n    localState?: Promise<LokiLocalDatabaseState>;\n};\n\nexport type LokiRemoteRequestBroadcastMessage = {\n    response: false;\n    type: string;\n    databaseName: string;\n    collectionName: string;\n    operation: string;\n    params: any[];\n    requestId: string;\n};\n\nexport type LokiRemoteResponseBroadcastMessage = {\n    response: true;\n    type: string;\n    databaseName: string;\n    collectionName: string;\n    requestId: string;\n    result: any | any[];\n    // if true, the result property will contain an error state\n    isError: boolean;\n};\n\nexport type LokiDatabaseState = {\n    database: any;\n    databaseSettings: LokiDatabaseSettings;\n    saveQueue: LokiSaveQueue;\n\n    // all known collections of the database\n    collections: {\n        [collectionName: string]: any;\n    };\n\n    /**\n     * Registered unload handlers\n     * so we can remove them on close.\n     */\n    unloads: AddReturn[];\n};\n\nexport type LokiLocalDatabaseState = {\n    databaseState: LokiDatabaseState;\n    collection: any;\n};\n"],"mappings":"","ignoreList":[]}