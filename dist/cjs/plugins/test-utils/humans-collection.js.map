{"version":3,"file":"humans-collection.js","names":["_clone","_interopRequireDefault","require","schemas","_interopRequireWildcard","schemaObjects","_config","_assert","_index","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","create","size","collectionName","multiInstance","eventReduce","storage","getConfig","getStorage","db","createRxDatabase","name","randomCouchString","ignoreDuplicate","localDocuments","collections","addCollections","schema","human","docsData","Array","fill","map","humanData","writeResult","bulkInsert","assert","deepStrictEqual","error","createBySchema","migrationStrategies","createAttachments","schemaJson","clone","attachments","createNoCompression","schemaJSON","keyCompression","createAgeIndex","amount","humana","humanAgeIndex","multipleOnSameDB","human2","docsData2","collection","collection2","createNested","nestedhuman","nestedHuman","nestedHumanData","createDeepNested","deepNestedHuman","deepNestedHumanData","createMultiInstance","password","undefined","hasMultiInstance","Error","createPrimary","primaryHuman","simpleHumanData","createHumanWithTimestamp","databaseName","humans","humanWithTimestamp","humanWithTimestampData","createMigrationCollection","addMigrationStrategies","autoMigrate","attachment","assign","doc","colName","cols","simpleHuman","Promise","all","insert","simpleHumanAge","then","putAttachment","destroy","db2","cols2","simpleHumanV3","createRelated","refHuman","doc1","refHumanData","doc2","bestFriend","createRelatedNested","refHumanNested","refHumanNestedData","foo","createIdAndAgeIndex","humanIdAndAgeIndex","humanWithIdAndAgeIndexDocumentType"],"sources":["../../../../src/plugins/test-utils/humans-collection.ts"],"sourcesContent":["import clone from 'clone';\nimport * as schemas from './schemas.ts';\nimport * as schemaObjects from './schema-objects.ts';\nimport { getConfig } from './config.ts';\nimport assert from 'assert';\n\nimport {\n    createRxDatabase,\n    RxJsonSchema,\n    RxCollection,\n    RxDatabase,\n    randomCouchString,\n    MigrationStrategies,\n    RxAttachmentCreator,\n    RxStorage\n} from '../../index.ts';\n\nimport { HumanDocumentType } from './schemas.ts';\n\nexport async function create(\n    size: number = 20,\n    collectionName: string = 'human',\n    multiInstance: boolean = true,\n    eventReduce: boolean = true,\n    storage: RxStorage<any, any> = getConfig().storage.getStorage()\n\n): Promise<RxCollection<HumanDocumentType, {}, {}>> {\n    const db = await createRxDatabase<{ human: RxCollection<HumanDocumentType>; }>({\n        name: randomCouchString(10),\n        storage,\n        multiInstance,\n        eventReduce,\n        ignoreDuplicate: true,\n        localDocuments: true\n    });\n\n    const collections = await db.addCollections({\n        [collectionName]: {\n            schema: schemas.human,\n            localDocuments: true\n        }\n    });\n\n    // insert data\n    if (size > 0) {\n        const docsData = new Array(size)\n            .fill(0)\n            .map(() => schemaObjects.humanData());\n        const writeResult = await collections[collectionName].bulkInsert(docsData);\n        assert.deepStrictEqual(writeResult.error, []);\n    }\n    return collections[collectionName];\n}\n\nexport async function createBySchema<RxDocumentType = {}>(\n    schema: RxJsonSchema<RxDocumentType>,\n    name = 'human',\n    storage = getConfig().storage.getStorage(),\n    migrationStrategies?: MigrationStrategies\n): Promise<RxCollection<RxDocumentType, {}, {}>> {\n    const db = await createRxDatabase<{ [prop: string]: RxCollection<RxDocumentType>; }>({\n        name: randomCouchString(10),\n        storage,\n        multiInstance: true,\n        eventReduce: true,\n        ignoreDuplicate: true\n    });\n\n    const collections = await db.addCollections({\n        [name]: {\n            schema,\n            migrationStrategies\n        }\n    });\n\n    return collections[name];\n}\n\nexport async function createAttachments(\n    size = 20,\n    name = 'human',\n    multiInstance = true\n): Promise<RxCollection<HumanDocumentType, {}, {}>> {\n    if (!name) {\n        name = 'human';\n    }\n    const db = await createRxDatabase<{ [prop: string]: RxCollection<HumanDocumentType>; }>({\n        name: randomCouchString(10),\n        storage: getConfig().storage.getStorage(),\n        multiInstance,\n        eventReduce: true,\n        ignoreDuplicate: true\n    });\n\n    const schemaJson = clone(schemas.human);\n    schemaJson.attachments = {};\n\n    const collections = await db.addCollections({\n        [name]: {\n            schema: schemaJson\n        }\n    });\n\n    // insert data\n    if (size > 0) {\n        const docsData = new Array(size)\n            .fill(0)\n            .map(() => schemaObjects.humanData());\n        await collections[name].bulkInsert(docsData);\n    }\n\n    return collections[name];\n}\n\nexport async function createNoCompression(\n    size = 20,\n    name = 'human'\n): Promise<RxCollection<HumanDocumentType>> {\n    const db = await createRxDatabase<{ [prop: string]: RxCollection<HumanDocumentType>; }>({\n        name: randomCouchString(10),\n        storage: getConfig().storage.getStorage(),\n        eventReduce: true,\n        ignoreDuplicate: true\n    });\n    const schemaJSON = clone(schemas.human);\n    schemaJSON.keyCompression = false;\n    // setTimeout(() => db.destroy(), dbLifetime);\n    const collections = await db.addCollections({\n        [name]: {\n            schema: schemaJSON\n        }\n    });\n\n    // insert data\n    if (size > 0) {\n        const docsData = new Array(size)\n            .fill(0)\n            .map(() => schemaObjects.humanData());\n        await collections[name].bulkInsert(docsData);\n    }\n\n    return collections[name];\n}\n\nexport async function createAgeIndex(\n    amount = 20\n): Promise<RxCollection<HumanDocumentType>> {\n    const db = await createRxDatabase<{ humana: RxCollection<HumanDocumentType>; }>({\n        name: randomCouchString(10),\n        storage: getConfig().storage.getStorage(),\n        eventReduce: true,\n        ignoreDuplicate: true\n    });\n    // setTimeout(() => db.destroy(), dbLifetime);\n    const collections = await db.addCollections({\n        humana: {\n            schema: schemas.humanAgeIndex\n        }\n    });\n\n    // insert data\n    if (amount > 0) {\n        const docsData = new Array(amount)\n            .fill(0)\n            .map(() => schemaObjects.humanData());\n        await collections.humana.bulkInsert(docsData);\n    }\n\n    return collections.humana;\n}\n\nexport async function multipleOnSameDB(\n    size = 10\n): Promise<{\n    db: RxDatabase<{\n        human: RxCollection<HumanDocumentType>;\n        human2: RxCollection<HumanDocumentType>;\n    }>;\n    collection: RxCollection<HumanDocumentType>;\n    collection2: RxCollection<HumanDocumentType>;\n}> {\n    const db = await createRxDatabase<{\n        human: RxCollection<HumanDocumentType>;\n        human2: RxCollection<HumanDocumentType>;\n    }>({\n        name: randomCouchString(10),\n        storage: getConfig().storage.getStorage(),\n        eventReduce: true,\n        ignoreDuplicate: true\n    });\n    // setTimeout(() => db.destroy(), dbLifetime);\n    const collections = await db.addCollections({\n        human: {\n            schema: schemas.human\n        },\n        human2: {\n            schema: schemas.human\n        }\n    });\n\n    // insert data\n    if (size > 0) {\n        const docsData = new Array(size)\n            .fill(0)\n            .map(() => schemaObjects.humanData());\n        await collections.human.bulkInsert(docsData);\n\n        const docsData2 = new Array(size)\n            .fill(0)\n            .map(() => schemaObjects.humanData());\n        await collections.human2.bulkInsert(docsData2);\n    }\n\n    return {\n        db,\n        collection: collections.human,\n        collection2: collections.human2\n    };\n}\n\nexport async function createNested(\n    amount = 5\n): Promise<RxCollection<schemaObjects.NestedHumanDocumentType>> {\n    const db = await createRxDatabase<{ nestedhuman: RxCollection<schemaObjects.NestedHumanDocumentType>; }>({\n        name: randomCouchString(10),\n        storage: getConfig().storage.getStorage(),\n        eventReduce: true,\n        ignoreDuplicate: true\n    });\n    // setTimeout(() => db.destroy(), dbLifetime);\n    const collections = await db.addCollections({\n        nestedhuman: {\n            schema: schemas.nestedHuman\n        }\n    });\n\n    // insert data\n    if (amount > 0) {\n        const docsData = new Array(amount)\n            .fill(0)\n            .map(() => schemaObjects.nestedHumanData());\n        await collections.nestedhuman.bulkInsert(docsData);\n    }\n\n    return collections.nestedhuman;\n}\n\nexport async function createDeepNested(\n    amount = 5\n): Promise<RxCollection<schemaObjects.DeepNestedHumanDocumentType>> {\n    const db = await createRxDatabase<{ nestedhuman: RxCollection<schemaObjects.DeepNestedHumanDocumentType>; }>({\n        name: randomCouchString(10),\n        storage: getConfig().storage.getStorage(),\n        eventReduce: true,\n    });\n    // setTimeout(() => db.destroy(), dbLifetime);\n    const collections = await db.addCollections({\n        nestedhuman: {\n            schema: schemas.deepNestedHuman\n        }\n    });\n\n    // insert data\n    if (amount > 0) {\n        const docsData = new Array(amount)\n            .fill(0)\n            .map(() => schemaObjects.deepNestedHumanData());\n        await collections.nestedhuman.bulkInsert(docsData);\n    }\n\n    return collections.nestedhuman;\n}\n\nexport async function createMultiInstance(\n    name: string,\n    amount = 0,\n    password = undefined,\n    storage: RxStorage<any, any> = getConfig().storage.getStorage()\n): Promise<RxCollection<HumanDocumentType, {}, {}>> {\n    if (!getConfig().storage.hasMultiInstance) {\n        throw new Error('createMultiInstance() cannot be called on a storage with hasMultiInstance:false');\n    }\n\n    const db = await createRxDatabase<{ human: RxCollection<HumanDocumentType>; }>({\n        name,\n        storage,\n        password,\n        multiInstance: true,\n        eventReduce: true,\n        ignoreDuplicate: true,\n        localDocuments: true\n    });\n    // setTimeout(() => db.destroy(), dbLifetime);\n    const collections = await db.addCollections({\n        human: {\n            schema: schemas.human,\n            localDocuments: true\n        }\n    });\n    // insert data\n    if (amount > 0) {\n        const docsData = new Array(amount)\n            .fill(0)\n            .map(() => schemaObjects.humanData());\n        await collections.human.bulkInsert(docsData);\n    }\n\n    return collections.human;\n}\n\nexport async function createPrimary(\n    amount = 10,\n    name = randomCouchString(10)\n): Promise<RxCollection<schemaObjects.SimpleHumanDocumentType>> {\n\n    const db = await createRxDatabase<{ human: RxCollection<schemaObjects.SimpleHumanDocumentType>; }>({\n        name,\n        storage: getConfig().storage.getStorage(),\n        multiInstance: true,\n        eventReduce: true,\n        ignoreDuplicate: true\n    });\n    // setTimeout(() => db.destroy(), dbLifetime);\n    const collections = await db.addCollections({\n        human: {\n            schema: schemas.primaryHuman\n        }\n    });\n\n    // insert data\n    if (amount > 0) {\n        const docsData = new Array(amount)\n            .fill(0)\n            .map(() => schemaObjects.simpleHumanData());\n        await collections.human.bulkInsert(docsData);\n    }\n\n    return collections.human;\n}\n\nexport async function createHumanWithTimestamp(\n    amount = 0,\n    databaseName = randomCouchString(10),\n    multiInstance = true,\n    storage = getConfig().storage.getStorage()\n): Promise<RxCollection<schemaObjects.HumanWithTimestampDocumentType>> {\n\n    const db = await createRxDatabase<{ humans: RxCollection<schemaObjects.HumanWithTimestampDocumentType>; }>({\n        name: databaseName,\n        storage,\n        multiInstance,\n        eventReduce: true,\n        ignoreDuplicate: true\n    });\n    // setTimeout(() => db.destroy(), dbLifetime);\n    const collections = await db.addCollections({\n        humans: {\n            schema: schemas.humanWithTimestamp\n        }\n    });\n\n    // insert data\n    if (amount > 0) {\n        const docsData = new Array(amount)\n            .fill(0)\n            .map(() => schemaObjects.humanWithTimestampData());\n        await collections.humans.bulkInsert(docsData);\n    }\n\n    return collections.humans;\n}\n\nexport async function createMigrationCollection(\n    amount = 0,\n    addMigrationStrategies: MigrationStrategies = {},\n    name = randomCouchString(10),\n    autoMigrate = false,\n    attachment?: RxAttachmentCreator\n): Promise<RxCollection<schemaObjects.SimpleHumanV3DocumentType>> {\n\n    const migrationStrategies: any = Object.assign(\n        {\n            1: (doc: any) => doc,\n            2: (doc: any) => doc,\n            3: (doc: any) => doc\n        },\n        addMigrationStrategies\n    );\n\n\n    const colName = 'human';\n    const db = await createRxDatabase<{ human: RxCollection<schemaObjects.SimpleHumanAgeDocumentType>; }>({\n        name,\n        storage: getConfig().storage.getStorage(),\n        eventReduce: true,\n        ignoreDuplicate: true\n    });\n    const cols = await db.addCollections({\n        [colName]: {\n            schema: attachment !== undefined ? { ...schemas.simpleHuman, attachments: {} } : schemas.simpleHuman,\n            autoMigrate: false\n        }\n    });\n\n    await Promise.all(\n        new Array(amount)\n            .fill(0)\n            .map(() => cols[colName].insert(schemaObjects.simpleHumanAge()).then(doc => {\n                if (attachment !== undefined) {\n                    return doc.putAttachment(attachment);\n                }\n            }))\n    );\n    await db.destroy();\n\n    const db2 = await createRxDatabase<{ human: RxCollection<schemaObjects.SimpleHumanV3DocumentType>; }>({\n        name,\n        storage: getConfig().storage.getStorage(),\n        eventReduce: true,\n        ignoreDuplicate: true\n    });\n    const cols2 = await db2.addCollections({\n        [colName]: {\n            schema: attachment !== undefined ? { ...schemas.simpleHumanV3, attachments: {} } : schemas.simpleHumanV3,\n            autoMigrate,\n            migrationStrategies\n        }\n    });\n\n    return cols2[colName];\n}\n\nexport async function createRelated(\n    name = randomCouchString(10)\n): Promise<RxCollection<schemaObjects.RefHumanDocumentType>> {\n    const db = await createRxDatabase<{ human: RxCollection<schemaObjects.RefHumanDocumentType>; }>({\n        name,\n        storage: getConfig().storage.getStorage(),\n        multiInstance: true,\n        eventReduce: true,\n        ignoreDuplicate: true\n    });\n    // setTimeout(() => db.destroy(), dbLifetime);\n    const collections = await db.addCollections({\n        human: {\n            schema: schemas.refHuman\n        }\n    });\n\n    const doc1 = schemaObjects.refHumanData();\n    const doc2 = schemaObjects.refHumanData(doc1.name);\n    doc1.bestFriend = doc2.name; // cross-relation\n\n    await collections.human.insert(doc1);\n    await collections.human.insert(doc2);\n\n    return collections.human;\n}\n\nexport async function createRelatedNested(\n    name = randomCouchString(10)\n): Promise<RxCollection<schemaObjects.RefHumanNestedDocumentType>> {\n\n    const db = await createRxDatabase<{ human: RxCollection<schemaObjects.RefHumanNestedDocumentType>; }>({\n        name,\n        storage: getConfig().storage.getStorage(),\n        multiInstance: true,\n        eventReduce: true,\n        ignoreDuplicate: true\n    });\n    // setTimeout(() => db.destroy(), dbLifetime);\n    const collections = await db.addCollections({\n        human: {\n            schema: schemas.refHumanNested\n        }\n    });\n\n    const doc1 = schemaObjects.refHumanNestedData();\n    const doc2 = schemaObjects.refHumanNestedData(doc1.name);\n    doc1.foo.bestFriend = doc2.name; // cross-relation\n\n    await collections.human.insert(doc1);\n    await collections.human.insert(doc2);\n\n    return collections.human;\n}\n\nexport async function createIdAndAgeIndex(\n    amount = 20\n): Promise<RxCollection<schemaObjects.HumanWithIdAndAgeIndexDocumentType>> {\n    const db = await createRxDatabase<{ humana: RxCollection<schemaObjects.HumanWithIdAndAgeIndexDocumentType>; }>({\n        name: randomCouchString(10),\n        storage: getConfig().storage.getStorage(),\n        eventReduce: true,\n        ignoreDuplicate: true\n    });\n    // setTimeout(() => db.destroy(), dbLifetime);\n    const collections = await db.addCollections({\n        humana: {\n            schema: schemas.humanIdAndAgeIndex\n        }\n    });\n\n    // insert data\n    if (amount > 0) {\n        const docsData = new Array(amount)\n            .fill(0)\n            .map(() => schemaObjects.humanWithIdAndAgeIndexDocumentType());\n        await collections.humana.bulkInsert(docsData);\n    }\n\n    return collections.humana;\n}\n"],"mappings":"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","ignoreList":[]}