{"version":3,"file":"utils-promise.js","names":["nextTick","Promise","res","setTimeout","promiseWait","ms","toPromise","maybePromise","then","resolve","isPromise","value","PROMISE_RESOLVE_TRUE","exports","PROMISE_RESOLVE_FALSE","PROMISE_RESOLVE_NULL","PROMISE_RESOLVE_VOID","requestIdlePromiseNoQueue","timeout","requestIdleCallback","idlePromiseQueue","requestIdlePromise","undefined","requestIdleCallbackIfAvailable","fun","promiseSeries","tasks","initial","reduce","current","next"],"sources":["../../../../src/plugins/utils/utils-promise.ts"],"sourcesContent":["/**\n * returns a promise that resolves on the next tick\n */\nexport function nextTick(): Promise<void> {\n    return new Promise(res => setTimeout(res, 0));\n}\n\nexport function promiseWait(ms: number = 0): Promise<void> {\n    return new Promise(res => setTimeout(res, ms));\n}\n\nexport function toPromise<T>(maybePromise: Promise<T> | T): Promise<T> {\n    if (maybePromise && typeof (maybePromise as any).then === 'function') {\n        // is promise\n        return maybePromise as any;\n    } else {\n        return Promise.resolve(maybePromise);\n    }\n}\n\n/**\n * returns true if promise is given\n */\nexport function isPromise(value: any): boolean {\n    if (\n        typeof value !== 'undefined' &&\n        typeof value.then === 'function'\n    ) {\n        return true;\n    }\n    return false;\n}\n\n/**\n * Reusing resolved promises has a better\n * performance than creating new ones each time.\n */\nexport const PROMISE_RESOLVE_TRUE: Promise<true> = Promise.resolve(true);\nexport const PROMISE_RESOLVE_FALSE: Promise<false> = Promise.resolve(false);\nexport const PROMISE_RESOLVE_NULL: Promise<null> = Promise.resolve(null);\nexport const PROMISE_RESOLVE_VOID: Promise<void> = Promise.resolve();\n\n\nexport function requestIdlePromiseNoQueue(\n    /**\n     * We always set a timeout!\n     * RxDB might be used on the server side where the\n     * server runs 24/4 on 99% CPU. So without a timeout\n     * this would never resolve which could cause a memory leak.\n     */\n    timeout: number | undefined = 10000\n) {\n    /**\n     * Do not use window.requestIdleCallback\n     * because some javascript runtimes like react-native,\n     * do not have a window object, but still have a global\n     * requestIdleCallback function.\n     * @link https://github.com/pubkey/rxdb/issues/4804\n    */\n    if (\n        typeof requestIdleCallback === 'function'\n    ) {\n        return new Promise<void>(res => {\n            requestIdleCallback(\n                () => res(),\n                {\n                    timeout\n                }\n            );\n        });\n    } else {\n        return promiseWait(0);\n    }\n}\n\n/**\n * If multiple operations wait for an requestIdlePromise\n * we do not want them to resolve all at the same time.\n * So we have to queue the calls.\n */\nlet idlePromiseQueue = PROMISE_RESOLVE_VOID;\nexport function requestIdlePromise(\n    timeout: number | undefined = undefined\n) {\n    idlePromiseQueue = idlePromiseQueue.then(() => {\n        return requestIdlePromiseNoQueue(timeout);\n    });\n    return idlePromiseQueue;\n}\n\n\n/**\n * run the callback if requestIdleCallback available\n * do nothing if not\n * @link https://developer.mozilla.org/de/docs/Web/API/Window/requestIdleCallback\n */\nexport function requestIdleCallbackIfAvailable(fun: Function): void {\n    /**\n     * Do not use window.requestIdleCallback\n     * because some javascript runtimes like react-native,\n     * do not have a window object, but still have a global\n     * requestIdleCallback function.\n     * @link https://github.com/pubkey/rxdb/issues/4804\n    */\n    if (\n        typeof requestIdleCallback === 'function'\n    ) {\n        requestIdleCallback(() => {\n            fun();\n        });\n    }\n}\n\n\n/**\n * like Promise.all() but runs in series instead of parallel\n * @link https://github.com/egoist/promise.series/blob/master/index.js\n * @param tasks array with functions that return a promise\n */\nexport function promiseSeries(\n    tasks: Function[],\n    initial?: any\n): Promise<any[]> {\n    return tasks\n        .reduce(\n            (current, next) => (current as any).then(next),\n            Promise.resolve(initial)\n        );\n}\n"],"mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;AACO,SAASA,QAAQA,CAAA,EAAkB;EACtC,OAAO,IAAIC,OAAO,CAACC,GAAG,IAAIC,UAAU,CAACD,GAAG,EAAE,CAAC,CAAC,CAAC;AACjD;AAEO,SAASE,WAAWA,CAACC,EAAU,GAAG,CAAC,EAAiB;EACvD,OAAO,IAAIJ,OAAO,CAACC,GAAG,IAAIC,UAAU,CAACD,GAAG,EAAEG,EAAE,CAAC,CAAC;AAClD;AAEO,SAASC,SAASA,CAAIC,YAA4B,EAAc;EACnE,IAAIA,YAAY,IAAI,OAAQA,YAAY,CAASC,IAAI,KAAK,UAAU,EAAE;IAClE;IACA,OAAOD,YAAY;EACvB,CAAC,MAAM;IACH,OAAON,OAAO,CAACQ,OAAO,CAACF,YAAY,CAAC;EACxC;AACJ;;AAEA;AACA;AACA;AACO,SAASG,SAASA,CAACC,KAAU,EAAW;EAC3C,IACI,OAAOA,KAAK,KAAK,WAAW,IAC5B,OAAOA,KAAK,CAACH,IAAI,KAAK,UAAU,EAClC;IACE,OAAO,IAAI;EACf;EACA,OAAO,KAAK;AAChB;;AAEA;AACA;AACA;AACA;AACO,IAAMI,oBAAmC,GAAAC,OAAA,CAAAD,oBAAA,GAAGX,OAAO,CAACQ,OAAO,CAAC,IAAI,CAAC;AACjE,IAAMK,qBAAqC,GAAAD,OAAA,CAAAC,qBAAA,GAAGb,OAAO,CAACQ,OAAO,CAAC,KAAK,CAAC;AACpE,IAAMM,oBAAmC,GAAAF,OAAA,CAAAE,oBAAA,GAAGd,OAAO,CAACQ,OAAO,CAAC,IAAI,CAAC;AACjE,IAAMO,oBAAmC,GAAAH,OAAA,CAAAG,oBAAA,GAAGf,OAAO,CAACQ,OAAO,CAAC,CAAC;AAG7D,SAASQ,yBAAyBA;AACrC;AACJ;AACA;AACA;AACA;AACA;AACIC,OAA2B,GAAG,KAAK,EACrC;EACE;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,IACI,OAAOC,mBAAmB,KAAK,UAAU,EAC3C;IACE,OAAO,IAAIlB,OAAO,CAAOC,GAAG,IAAI;MAC5BiB,mBAAmB,CACf,MAAMjB,GAAG,CAAC,CAAC,EACX;QACIgB;MACJ,CACJ,CAAC;IACL,CAAC,CAAC;EACN,CAAC,MAAM;IACH,OAAOd,WAAW,CAAC,CAAC,CAAC;EACzB;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAIgB,gBAAgB,GAAGJ,oBAAoB;AACpC,SAASK,kBAAkBA,CAC9BH,OAA2B,GAAGI,SAAS,EACzC;EACEF,gBAAgB,GAAGA,gBAAgB,CAACZ,IAAI,CAAC,MAAM;IAC3C,OAAOS,yBAAyB,CAACC,OAAO,CAAC;EAC7C,CAAC,CAAC;EACF,OAAOE,gBAAgB;AAC3B;;AAGA;AACA;AACA;AACA;AACA;AACO,SAASG,8BAA8BA,CAACC,GAAa,EAAQ;EAChE;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,IACI,OAAOL,mBAAmB,KAAK,UAAU,EAC3C;IACEA,mBAAmB,CAAC,MAAM;MACtBK,GAAG,CAAC,CAAC;IACT,CAAC,CAAC;EACN;AACJ;;AAGA;AACA;AACA;AACA;AACA;AACO,SAASC,aAAaA,CACzBC,KAAiB,EACjBC,OAAa,EACC;EACd,OAAOD,KAAK,CACPE,MAAM,CACH,CAACC,OAAO,EAAEC,IAAI,KAAMD,OAAO,CAASrB,IAAI,CAACsB,IAAI,CAAC,EAC9C7B,OAAO,CAACQ,OAAO,CAACkB,OAAO,CAC3B,CAAC;AACT","ignoreList":[]}