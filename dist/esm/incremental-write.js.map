{"version":3,"file":"incremental-write.js","names":["isBulkWriteConflictError","rxStorageWriteErrorToRxError","clone","ensureNotFalsy","getFromMapOrCreate","getFromMapOrThrow","parseRevision","stripMetaDataFromDocument","IncrementalWriteQueue","storageInstance","primaryPath","preWrite","postWrite","queueByDocId","Map","isRunning","_proto","prototype","addWrite","lastKnownDocumentState","modifier","docId","ar","ret","Promise","resolve","reject","item","push","triggerRun","size","writeRows","itemsById","all","Array","from","entries","map","_docId","items","oldData","findNewestOfDocumentStates","i","newData","err","forEach","previous","document","writeResult","length","bulkWrite","error","success","result","documentId","isConflict","reverse","documentInDb","unshift","rxError","modifierFromPublicToInternal","publicModifier","docData","withoutMeta","_deleted","modified","reattachedMeta","Object","assign","_meta","_attachments","_rev","docs","newest","newestRevisionHeight","height","doc"],"sources":["../../src/incremental-write.ts"],"sourcesContent":["import {\n    isBulkWriteConflictError,\n    rxStorageWriteErrorToRxError\n} from './rx-error.ts';\nimport type {\n    ModifyFunction,\n    BulkWriteRow,\n    MaybePromise,\n    RxDocumentData,\n    RxDocumentWriteData,\n    RxError,\n    RxStorageBulkWriteResponse,\n    RxStorageInstance,\n    StringKeys,\n    WithDeleted\n} from './types/index.d.ts';\nimport {\n    clone,\n    ensureNotFalsy,\n    getFromMapOrCreate,\n    getFromMapOrThrow,\n    parseRevision,\n    stripMetaDataFromDocument\n} from './plugins/utils/index.ts';\n\n\n\nexport type IncrementalWriteModifier<RxDocType> = (\n    doc: RxDocumentData<RxDocType>\n) => MaybePromise<RxDocumentData<RxDocType>> | MaybePromise<RxDocumentWriteData<RxDocType>>;\n\n\ntype IncrementalWriteQueueItem<RxDocType> = {\n    lastKnownDocumentState: RxDocumentData<RxDocType>;\n    modifier: IncrementalWriteModifier<RxDocType>;\n    resolve: (d: RxDocumentData<RxDocType>) => void;\n    reject: (error: RxError) => void;\n};\n\n/**\n * The incremental write queue\n * batches up all incremental writes to a collection\n * so that performance can be improved by:\n * - Running only one write even when there are multiple modifications to the same document.\n * - Run all writes ins a single bulkWrite() call even when there are writes to many documents.\n */\nexport class IncrementalWriteQueue<RxDocType> {\n    public queueByDocId = new Map<string, IncrementalWriteQueueItem<RxDocType>[]>();\n    public isRunning: boolean = false;\n\n    constructor(\n        public readonly storageInstance: RxStorageInstance<RxDocType, any, any>,\n        public readonly primaryPath: StringKeys<RxDocumentData<RxDocType>>,\n        // can be used to run hooks etc.\n        public readonly preWrite: (newData: RxDocumentData<RxDocType>, oldData: RxDocumentData<RxDocType>) => MaybePromise<void>,\n        public readonly postWrite: (docData: RxDocumentData<RxDocType>) => void\n\n    ) { }\n\n    addWrite(\n        lastKnownDocumentState: RxDocumentData<RxDocType>,\n        modifier: IncrementalWriteModifier<RxDocType>\n    ): Promise<RxDocumentData<RxDocType>> {\n        const docId: string = lastKnownDocumentState[this.primaryPath] as any;\n        const ar = getFromMapOrCreate(this.queueByDocId, docId, () => []);\n        const ret = new Promise<RxDocumentData<RxDocType>>((resolve, reject) => {\n            const item: IncrementalWriteQueueItem<RxDocType> = {\n                lastKnownDocumentState,\n                modifier,\n                resolve,\n                reject\n            };\n            ensureNotFalsy(ar).push(item);\n            this.triggerRun();\n        });\n        return ret;\n    }\n\n    async triggerRun(): Promise<void> {\n        if (\n            this.isRunning === true ||\n            this.queueByDocId.size === 0\n        ) {\n            // already running\n            return;\n        }\n        this.isRunning = true;\n        const writeRows: BulkWriteRow<RxDocType>[] = [];\n\n        /**\n         * 'take over' so that while the async functions runs,\n         * new incremental updates could be added from the outside.\n         */\n        const itemsById = this.queueByDocId;\n        this.queueByDocId = new Map();\n        await Promise.all(\n            Array.from(itemsById.entries())\n                .map(async ([_docId, items]) => {\n                    const oldData = findNewestOfDocumentStates(\n                        items.map(i => i.lastKnownDocumentState)\n                    );\n                    let newData = oldData;\n                    for (const item of items) {\n                        try {\n                            newData = await item.modifier(\n                                /**\n                                 * We have to clone() each time because the modifier\n                                 * might throw while it already changed some properties\n                                 * of the document.\n                                 */\n                                clone(newData)\n                            ) as any;\n                        } catch (err: any) {\n                            item.reject(err);\n                            item.reject = () => { };\n                            item.resolve = () => { };\n                        }\n                    }\n\n                    try {\n                        await this.preWrite(newData, oldData);\n                    } catch (err: any) {\n                        /**\n                         * If the before-hooks fail,\n                         * we reject all of the writes because it is\n                         * not possible to determine which one is to blame.\n                         */\n                        items.forEach(item => item.reject(err));\n                        return;\n                    }\n                    writeRows.push({\n                        previous: oldData,\n                        document: newData\n                    });\n                })\n        );\n        const writeResult: RxStorageBulkWriteResponse<RxDocType> = writeRows.length > 0 ?\n            await this.storageInstance.bulkWrite(writeRows, 'incremental-write') :\n            { error: [], success: [] };\n\n        // process success\n        await Promise.all(\n            writeResult.success.map(result => {\n                const docId = result[this.primaryPath] as string;\n                this.postWrite(result);\n                const items = getFromMapOrThrow(itemsById, docId);\n                items.forEach(item => item.resolve(result));\n            })\n        );\n\n        // process errors\n        writeResult.error\n            .forEach(error => {\n                const docId = error.documentId;\n                const items = getFromMapOrThrow(itemsById, docId);\n                const isConflict = isBulkWriteConflictError<RxDocType>(error);\n                if (isConflict) {\n                    // had conflict -> retry afterwards\n                    const ar = getFromMapOrCreate(this.queueByDocId, docId, () => []);\n                    /**\n                     * Add the items back to this.queueByDocId\n                     * by maintaining the original order.\n                     */\n                    items\n                        .reverse()\n                        .forEach(item => {\n                            item.lastKnownDocumentState = ensureNotFalsy(isConflict.documentInDb);\n                            ensureNotFalsy(ar).unshift(item);\n                        });\n                } else {\n                    // other error -> must be thrown\n                    const rxError = rxStorageWriteErrorToRxError(error);\n                    items.forEach(item => item.reject(rxError));\n                }\n            });\n        this.isRunning = false;\n\n        /**\n         * Always trigger another run\n         * because in between there might be new items\n         * been added to the queue.\n         */\n        return this.triggerRun();\n    }\n}\n\n\nexport function modifierFromPublicToInternal<RxDocType>(\n    publicModifier: ModifyFunction<RxDocType>\n): IncrementalWriteModifier<RxDocType> {\n    const ret = async (docData: RxDocumentData<RxDocType>) => {\n        const withoutMeta: WithDeleted<RxDocType> = stripMetaDataFromDocument(docData) as any;\n        withoutMeta._deleted = docData._deleted;\n        const modified = await publicModifier(withoutMeta);\n        const reattachedMeta: RxDocumentData<RxDocType> = Object.assign({}, modified, {\n            _meta: docData._meta,\n            _attachments: docData._attachments,\n            _rev: docData._rev,\n            _deleted: typeof (modified as WithDeleted<RxDocType>)._deleted !== 'undefined' ?\n                (modified as WithDeleted<RxDocType>)._deleted :\n                docData._deleted\n        });\n        if (typeof reattachedMeta._deleted === 'undefined') {\n            reattachedMeta._deleted = false;\n        }\n        return reattachedMeta;\n    };\n    return ret;\n}\n\n\nexport function findNewestOfDocumentStates<RxDocType>(\n    docs: RxDocumentData<RxDocType>[]\n): RxDocumentData<RxDocType> {\n\n    let newest = docs[0];\n    let newestRevisionHeight = parseRevision(newest._rev).height;\n    docs.forEach(doc => {\n        const height = parseRevision(doc._rev).height;\n        if (height > newestRevisionHeight) {\n            newest = doc;\n            newestRevisionHeight = height;\n        }\n    });\n    return newest;\n}\n"],"mappings":"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","ignoreList":[]}