{"version":3,"file":"rx-storage-ipc-renderer.js","names":["Subject","getRxStorageRemote","IPC_RENDERER_KEY_PREFIX","PROMISE_RESOLVE_VOID","getRxStorageIpcRenderer","settings","channelId","key","join","storage","identifier","mode","messageChannelCreator","messages$","listener","_event","message","next","ipcRenderer","on","postMessage","Promise","resolve","send","msg","close","removeListener"],"sources":["../../../../src/plugins/electron/rx-storage-ipc-renderer.ts"],"sourcesContent":["import { Subject } from 'rxjs';\nimport {\n    getRxStorageRemote,\n    RxStorageRemote,\n    RxStorageRemoteSettings,\n    MessageFromRemote\n} from '../storage-remote/index.ts';\nimport {\n    IPC_RENDERER_KEY_PREFIX\n} from './electron-helper.ts';\nimport { PROMISE_RESOLVE_VOID } from '../utils/index.ts';\n\nexport type RxStorageIpcRendererSettings = {\n    /**\n     * Set the same key on both sides\n     * to ensure that messages do not get mixed\n     * up when you use more then one storage.\n     */\n    key: string;\n    ipcRenderer: any;\n    mode: RxStorageRemoteSettings['mode'];\n};\n\nexport type RxStorageIpcRenderer = RxStorageRemote;\nexport function getRxStorageIpcRenderer(\n    settings: RxStorageIpcRendererSettings\n): RxStorageIpcRenderer {\n    const channelId = [\n        IPC_RENDERER_KEY_PREFIX,\n        settings.key\n    ].join('|');\n\n    const storage = getRxStorageRemote({\n        identifier: 'electron-ipc-renderer',\n        mode: settings.mode,\n        messageChannelCreator() {\n            const messages$ = new Subject<MessageFromRemote>();\n            const listener = (_event: any, message: any) => {\n                messages$.next(message);\n            };\n            settings.ipcRenderer.on(channelId, listener);\n            settings.ipcRenderer.postMessage(\n                channelId,\n                false\n            );\n            return Promise.resolve({\n                messages$,\n                send(msg) {\n                    settings.ipcRenderer.postMessage(\n                        channelId,\n                        msg\n                    );\n                },\n                close() {\n                    settings.ipcRenderer.removeListener(channelId, listener);\n                    return PROMISE_RESOLVE_VOID;\n                }\n            });\n        },\n    });\n    return storage;\n}\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,MAAM;AAC9B,SACIC,kBAAkB,QAIf,4BAA4B;AACnC,SACIC,uBAAuB,QACpB,sBAAsB;AAC7B,SAASC,oBAAoB,QAAQ,mBAAmB;AAcxD,OAAO,SAASC,uBAAuBA,CACnCC,QAAsC,EAClB;EACpB,IAAMC,SAAS,GAAG,CACdJ,uBAAuB,EACvBG,QAAQ,CAACE,GAAG,CACf,CAACC,IAAI,CAAC,GAAG,CAAC;EAEX,IAAMC,OAAO,GAAGR,kBAAkB,CAAC;IAC/BS,UAAU,EAAE,uBAAuB;IACnCC,IAAI,EAAEN,QAAQ,CAACM,IAAI;IACnBC,qBAAqBA,CAAA,EAAG;MACpB,IAAMC,SAAS,GAAG,IAAIb,OAAO,CAAoB,CAAC;MAClD,IAAMc,QAAQ,GAAGA,CAACC,MAAW,EAAEC,OAAY,KAAK;QAC5CH,SAAS,CAACI,IAAI,CAACD,OAAO,CAAC;MAC3B,CAAC;MACDX,QAAQ,CAACa,WAAW,CAACC,EAAE,CAACb,SAAS,EAAEQ,QAAQ,CAAC;MAC5CT,QAAQ,CAACa,WAAW,CAACE,WAAW,CAC5Bd,SAAS,EACT,KACJ,CAAC;MACD,OAAOe,OAAO,CAACC,OAAO,CAAC;QACnBT,SAAS;QACTU,IAAIA,CAACC,GAAG,EAAE;UACNnB,QAAQ,CAACa,WAAW,CAACE,WAAW,CAC5Bd,SAAS,EACTkB,GACJ,CAAC;QACL,CAAC;QACDC,KAAKA,CAAA,EAAG;UACJpB,QAAQ,CAACa,WAAW,CAACQ,cAAc,CAACpB,SAAS,EAAEQ,QAAQ,CAAC;UACxD,OAAOX,oBAAoB;QAC/B;MACJ,CAAC,CAAC;IACN;EACJ,CAAC,CAAC;EACF,OAAOM,OAAO;AAClB","ignoreList":[]}