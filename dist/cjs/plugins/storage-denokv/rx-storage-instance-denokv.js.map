{"version":3,"file":"rx-storage-instance-denokv.js","names":["_rxjs","require","_rxSchemaHelper","_rxStorageMultiinstance","_denokvHelper","_customIndex","_utilsArray","_utilsOther","_rxStorageHelper","_utilsTime","_denokvQuery","_queryPlanner","_utilsPromise","_utilsObject","RxStorageInstanceDenoKV","exports","storage","databaseName","collectionName","schema","internals","options","settings","keySpace","version","join","kvOptions","consistency","consistencyLevel","changes$","Subject","primaryPath","getPrimaryFieldOfPrimaryKey","primaryKey","kvPromise","getDenoGlobal","openKv","openKvPath","then","kv","set","_proto","prototype","retryUntilNoWriteInBetween","fn","writeBlockKeyBefore","get","writeBlockValueBefore","value","result","writeBlockKeyAfter","writeBlockValueAfter","bulkWrite","documentWrites","context","_this","ret","success","error","batches","batchArray","ensureNotFalsy","batchSize","writeBatch","_loop","writeBlockKey","docsInDB","Map","readManyBatches","Promise","all","map","readManyBatch","docsResult","getMany","writeRow","docId","document","DENOKV_DOCUMENT_ROOT_PATH","row","docData","categorized","categorizeBulkWriteRows","tx","atomic","check","bulkInsertDocs","forEach","push","Object","values","indexes","indexMeta","indexString","getIndexableString","indexId","bulkUpdateDocs","oldIndexString","previous","newIndexString","delete","txResult","commit","ok","appendToArray","errors","eventBulk","events","length","lastState","newestRow","checkpoint","id","lwt","_meta","endTime","now","next","findDocumentsById","ids","withDeleted","kvKey","findSingleResult","docInDb","_deleted","query","preparedQuery","queryDenoKV","count","documents","mode","getAttachmentData","documentId","attachmentId","digest","Error","changeStream","asObservable","cleanup","minimumDeletedTime","_this2","maxDeletionTime","index","CLEANUP_INDEX","indexName","getDenoKVIndexName","lowerBoundString","getStartIndexStringFromLowerBound","upperBoundString","noMoreUndeleted","range","list","start","end","limit","rangeCount","_loop2","docDataResult","indexMetaInner","_ret","close","closed","complete","remove","ensureNotClosed","INDEX_MAX","promises","key","conflictResultionTasks","resolveConflictResultionTask","_taskSolution","PROMISE_RESOLVE_VOID","createDenoKVStorageInstance","params","flatClone","indexDBs","useIndexes","slice","useIndexesFinal","indexAr","toArray","getIndexableStringMonad","instance","addRxStorageMultiInstanceSupport","RX_STORAGE_NAME_DENOKV","resolve"],"sources":["../../../../src/plugins/storage-denokv/rx-storage-instance-denokv.ts"],"sourcesContent":["\nimport {\n    Subject,\n    Observable\n} from 'rxjs';\nimport type {\n    RxStorageInstance,\n    RxStorageChangeEvent,\n    RxDocumentData,\n    BulkWriteRow,\n    RxStorageBulkWriteResponse,\n    RxStorageQueryResult,\n    RxJsonSchema,\n    RxStorageInstanceCreationParams,\n    EventBulk,\n    StringKeys,\n    RxConflictResultionTaskSolution,\n    RxStorageDefaultCheckpoint,\n    RxStorageCountResult,\n    RxConflictResultionTask,\n    PreparedQuery\n} from '../../types/index.d.ts';\nimport { getPrimaryFieldOfPrimaryKey } from '../../rx-schema-helper.ts';\nimport { addRxStorageMultiInstanceSupport } from '../../rx-storage-multiinstance.ts';\nimport type { DenoKVIndexMeta, DenoKVSettings, DenoKVStorageInternals } from './denokv-types.ts';\nimport { RxStorageDenoKV } from './index.ts';\nimport { CLEANUP_INDEX, DENOKV_DOCUMENT_ROOT_PATH, RX_STORAGE_NAME_DENOKV, getDenoGlobal, getDenoKVIndexName } from \"./denokv-helper.ts\";\nimport { getIndexableStringMonad, getStartIndexStringFromLowerBound } from \"../../custom-index.ts\";\nimport { appendToArray, batchArray, lastOfArray, toArray } from \"../utils/utils-array.ts\";\nimport { ensureNotFalsy } from \"../utils/utils-other.ts\";\nimport { categorizeBulkWriteRows } from \"../../rx-storage-helper.ts\";\nimport { now } from \"../utils/utils-time.ts\";\nimport { queryDenoKV } from \"./denokv-query.ts\";\nimport { INDEX_MAX } from \"../../query-planner.ts\";\nimport { PROMISE_RESOLVE_VOID } from \"../utils/utils-promise.ts\";\nimport { flatClone } from \"../utils/utils-object.ts\";\n\n\n\nexport class RxStorageInstanceDenoKV<RxDocType> implements RxStorageInstance<\n    RxDocType,\n    DenoKVStorageInternals<RxDocType>,\n    DenoKVSettings,\n    RxStorageDefaultCheckpoint\n> {\n    public readonly primaryPath: StringKeys<RxDocumentData<RxDocType>>;\n    private changes$: Subject<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint>> = new Subject();\n    public closed?: Promise<void>;\n    public readonly kvPromise: Promise<any>;\n\n    constructor(\n        public readonly storage: RxStorageDenoKV,\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly schema: Readonly<RxJsonSchema<RxDocumentData<RxDocType>>>,\n        public readonly internals: DenoKVStorageInternals<RxDocType>,\n        public readonly options: Readonly<DenoKVSettings>,\n        public readonly settings: DenoKVSettings,\n        public readonly keySpace = ['rxdb', databaseName, collectionName, schema.version].join('|'),\n        public readonly kvOptions = { consistency: settings.consistencyLevel }\n    ) {\n        this.primaryPath = getPrimaryFieldOfPrimaryKey(this.schema.primaryKey);\n        this.kvPromise = getDenoGlobal().openKv(settings.openKvPath).then(async (kv: any) => {\n            // insert writeBlockKey\n            await kv.set([this.keySpace], 1);\n            return kv;\n        });\n    }\n\n    /**\n     * DenoKV has no transactions\n     * so we have to ensure that there is no write in between our queries\n     * which would confuse RxDB and return wrong query results.\n     */\n    async retryUntilNoWriteInBetween<T>(\n        fn: () => Promise<T>\n    ): Promise<T> {\n        const kv = await this.kvPromise;\n        while (true) {\n            const writeBlockKeyBefore = await kv.get([this.keySpace], this.kvOptions);\n            const writeBlockValueBefore = writeBlockKeyBefore ? writeBlockKeyBefore.value : -1;\n            const result = await fn();\n            const writeBlockKeyAfter = await kv.get([this.keySpace], this.kvOptions);\n            const writeBlockValueAfter = writeBlockKeyAfter ? writeBlockKeyAfter.value : -1;\n\n            if (writeBlockValueBefore === writeBlockValueAfter) {\n                return result;\n            }\n        }\n    }\n\n    async bulkWrite(documentWrites: BulkWriteRow<RxDocType>[], context: string): Promise<RxStorageBulkWriteResponse<RxDocType>> {\n        const kv = await this.kvPromise;\n        const primaryPath = this.primaryPath;\n        const ret: RxStorageBulkWriteResponse<RxDocType> = {\n            success: [],\n            error: []\n        };\n\n        const batches = batchArray(documentWrites, ensureNotFalsy(this.settings.batchSize));\n\n        /**\n         * DenoKV does not have transactions\n         * so we use a special writeBlock row to ensure\n         * atomic writes (per document)\n         * and so that we can do bulkWrites\n         */\n        for (const writeBatch of batches) {\n            while (true) {\n                const writeBlockKey = await kv.get([this.keySpace], this.kvOptions);\n                const docsInDB = new Map<string, RxDocumentData<RxDocType>>();\n\n                /**\n                 * TODO the max amount for .getMany() is 10 which is defined by deno itself.\n                 * How can this be increased?\n                 */\n                const readManyBatches = batchArray(writeBatch, 10);\n                await Promise.all(\n                    readManyBatches.map(async (readManyBatch) => {\n                        const docsResult = await kv.getMany(\n                            readManyBatch.map(writeRow => {\n                                const docId: string = writeRow.document[primaryPath] as any;\n                                return [this.keySpace, DENOKV_DOCUMENT_ROOT_PATH, docId];\n                            })\n                        );\n                        docsResult.map((row: any) => {\n                            const docData = row.value;\n                            if (!docData) {\n                                return;\n                            }\n                            const docId: string = docData[primaryPath] as any;\n                            docsInDB.set(docId, docData);\n                        });\n                    })\n                );\n                const categorized = categorizeBulkWriteRows<RxDocType>(\n                    this,\n                    this.primaryPath as any,\n                    docsInDB,\n                    writeBatch,\n                    context\n                );\n\n                let tx = kv.atomic();\n                tx = tx.set([this.keySpace], ensureNotFalsy(writeBlockKey.value) + 1);\n                tx = tx.check(writeBlockKey);\n\n                // INSERTS\n                categorized.bulkInsertDocs.forEach(writeRow => {\n                    const docId: string = writeRow.document[this.primaryPath] as any;\n                    ret.success.push(writeRow.document);\n\n                    // insert document data\n                    tx = tx.set([this.keySpace, DENOKV_DOCUMENT_ROOT_PATH, docId], writeRow.document);\n\n                    // insert secondary indexes\n                    Object.values(this.internals.indexes).forEach(indexMeta => {\n                        const indexString = indexMeta.getIndexableString(writeRow.document as any);\n                        tx = tx.set([this.keySpace, indexMeta.indexId, indexString], docId);\n                    });\n                });\n                // UPDATES\n                categorized.bulkUpdateDocs.forEach((writeRow: BulkWriteRow<RxDocType>) => {\n                    const docId: string = writeRow.document[this.primaryPath] as any;\n\n                    // insert document data\n                    tx = tx.set([this.keySpace, DENOKV_DOCUMENT_ROOT_PATH, docId], writeRow.document);\n\n                    // insert secondary indexes\n                    Object.values(this.internals.indexes).forEach(indexMeta => {\n                        const oldIndexString = indexMeta.getIndexableString(ensureNotFalsy(writeRow.previous));\n                        const newIndexString = indexMeta.getIndexableString(writeRow.document as any);\n                        if (oldIndexString !== newIndexString) {\n                            tx = tx.delete([this.keySpace, indexMeta.indexId, oldIndexString]);\n                            tx = tx.set([this.keySpace, indexMeta.indexId, newIndexString], docId);\n                        }\n                    });\n                    ret.success.push(writeRow.document as any);\n                });\n\n                const txResult = await tx.commit();\n                if (txResult.ok) {\n                    appendToArray(ret.error, categorized.errors);\n                    if (categorized.eventBulk.events.length > 0) {\n                        const lastState = ensureNotFalsy(categorized.newestRow).document;\n                        categorized.eventBulk.checkpoint = {\n                            id: lastState[primaryPath],\n                            lwt: lastState._meta.lwt\n                        };\n                        categorized.eventBulk.endTime = now();\n                        this.changes$.next(categorized.eventBulk);\n                    }\n                    break;\n                }\n            }\n        }\n        return ret;\n    }\n    async findDocumentsById(ids: string[], withDeleted: boolean): Promise<RxDocumentData<RxDocType>[]> {\n        const kv = await this.kvPromise;\n        const ret: RxDocumentData<RxDocType>[] = [];\n        await Promise.all(\n            ids.map(async (docId) => {\n                const kvKey = [this.keySpace, DENOKV_DOCUMENT_ROOT_PATH, docId];\n                const findSingleResult = await kv.get(kvKey, this.kvOptions);\n                const docInDb = findSingleResult.value;\n                if (\n                    docInDb &&\n                    (\n                        !docInDb._deleted ||\n                        withDeleted\n                    )\n                ) {\n                    ret.push(docInDb);\n                }\n            })\n        );\n        return ret;\n    }\n    query(preparedQuery: PreparedQuery<RxDocType>): Promise<RxStorageQueryResult<RxDocType>> {\n        return this.retryUntilNoWriteInBetween(\n            () => queryDenoKV(this, preparedQuery)\n        );\n    }\n    async count(preparedQuery: PreparedQuery<RxDocType>): Promise<RxStorageCountResult> {\n        /**\n         * At this point in time (end 2023), DenoKV does not support\n         * range counts. So we have to run a normal query and use the result set length.\n         * @link https://github.com/denoland/deno/issues/18965\n         */\n        const result = await this.retryUntilNoWriteInBetween(\n            () => this.query(preparedQuery)\n        );\n        return {\n            count: result.documents.length,\n            mode: 'fast'\n        };\n    }\n    getAttachmentData(documentId: string, attachmentId: string, digest: string): Promise<string> {\n        throw new Error(\"Method not implemented.\");\n    }\n    changeStream() {\n        return this.changes$.asObservable();\n    }\n    async cleanup(minimumDeletedTime: number): Promise<boolean> {\n        const maxDeletionTime = now() - minimumDeletedTime;\n        const kv = await this.kvPromise;\n        const index = CLEANUP_INDEX;\n        const indexName = getDenoKVIndexName(index);\n        const indexMeta = this.internals.indexes[indexName];\n        const lowerBoundString = getStartIndexStringFromLowerBound(\n            this.schema,\n            index,\n            [\n                true,\n                /**\n                 * Do not use 0 here,\n                 * because 1 is the minimum value for _meta.lwt\n                 */\n                1\n            ]\n        );\n        const upperBoundString = getStartIndexStringFromLowerBound(\n            this.schema,\n            index,\n            [\n                true,\n                maxDeletionTime\n            ]\n        );\n        let noMoreUndeleted: boolean = true;\n\n        const range = kv.list({\n            start: [this.keySpace, indexMeta.indexId, lowerBoundString],\n            end: [this.keySpace, indexMeta.indexId, upperBoundString]\n        }, {\n            consistency: this.settings.consistencyLevel,\n            batchSize: this.settings.batchSize,\n            limit: this.settings.batchSize\n        });\n\n        let rangeCount = 0;\n        for await (const row of range) {\n            rangeCount = rangeCount + 1;\n            const docId = row.value;\n            const docDataResult = await kv.get([this.keySpace, DENOKV_DOCUMENT_ROOT_PATH, docId], this.kvOptions);\n            if (!docDataResult.value) {\n                continue;\n            }\n            const docData = ensureNotFalsy(docDataResult.value);\n            if (\n                !docData._deleted ||\n                docData._meta.lwt > maxDeletionTime\n            ) {\n                continue;\n            }\n\n\n            let tx = kv.atomic();\n            tx = tx.check(docDataResult);\n            tx = tx.delete([this.keySpace, DENOKV_DOCUMENT_ROOT_PATH, docId]);\n            Object\n                .values(this.internals.indexes)\n                .forEach(indexMetaInner => {\n                    tx = tx.delete([this.keySpace, indexMetaInner.indexId, docId]);\n                });\n            await tx.commit();\n        }\n        return noMoreUndeleted;\n    }\n    async close(): Promise<void> {\n        if (this.closed) {\n            return this.closed;\n        }\n        this.closed = (async () => {\n            this.changes$.complete();\n            const kv = await this.kvPromise;\n            await kv.close();\n        })();\n        return this.closed;\n    }\n    async remove(): Promise<void> {\n        ensureNotClosed(this);\n        const kv = await this.kvPromise;\n        const range = kv.list({\n            start: [this.keySpace],\n            end: [this.keySpace, INDEX_MAX]\n        }, {\n            consistency: this.settings.consistencyLevel,\n            batchSize: this.settings.batchSize\n        });\n        let promises: Promise<any>[] = [];\n        for await (const row of range) {\n            promises.push(kv.delete(row.key));\n        }\n\n        await Promise.all(promises);\n        return this.close();\n    }\n    conflictResultionTasks(): Observable<RxConflictResultionTask<RxDocType>> {\n        return new Subject<any>().asObservable();\n    }\n    resolveConflictResultionTask(_taskSolution: RxConflictResultionTaskSolution<RxDocType>): Promise<void> {\n        return PROMISE_RESOLVE_VOID;\n    }\n}\n\n\n\nexport async function createDenoKVStorageInstance<RxDocType>(\n    storage: RxStorageDenoKV,\n    params: RxStorageInstanceCreationParams<RxDocType, DenoKVSettings>,\n    settings: DenoKVSettings\n): Promise<RxStorageInstanceDenoKV<RxDocType>> {\n    settings = flatClone(settings);\n    if (!settings.batchSize) {\n        settings.batchSize = 100;\n    }\n\n    const primaryPath = getPrimaryFieldOfPrimaryKey(params.schema.primaryKey);\n\n    const indexDBs: { [indexName: string]: DenoKVIndexMeta<RxDocType>; } = {};\n    const useIndexes = params.schema.indexes ? params.schema.indexes.slice(0) : [];\n    useIndexes.push([primaryPath]);\n    const useIndexesFinal = useIndexes.map(index => {\n        const indexAr = toArray(index);\n        return indexAr;\n    });\n    useIndexesFinal.push(CLEANUP_INDEX);\n    useIndexesFinal.forEach((indexAr, indexId) => {\n        const indexName = getDenoKVIndexName(indexAr);\n        indexDBs[indexName] = {\n            indexId: '|' + indexId + '|',\n            indexName,\n            getIndexableString: getIndexableStringMonad(params.schema, indexAr),\n            index: indexAr\n        };\n    });\n\n    const internals = {\n        indexes: indexDBs\n    };\n    const instance = new RxStorageInstanceDenoKV(\n        storage,\n        params.databaseName,\n        params.collectionName,\n        params.schema,\n        internals,\n        params.options,\n        settings\n    );\n\n    await addRxStorageMultiInstanceSupport(\n        RX_STORAGE_NAME_DENOKV,\n        params,\n        instance\n    );\n\n    return Promise.resolve(instance);\n}\n\n\n\nfunction ensureNotClosed(\n    instance: RxStorageInstanceDenoKV<any>\n) {\n    if (instance.closed) {\n        throw new Error('RxStorageInstanceDenoKV is closed ' + instance.databaseName + '-' + instance.collectionName);\n    }\n}\n"],"mappings":"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","ignoreList":[]}