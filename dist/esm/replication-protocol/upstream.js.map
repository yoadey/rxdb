{"version":3,"file":"upstream.js","names":["firstValueFrom","filter","getChangedDocumentsSince","stackCheckpoints","appendToArray","batchArray","clone","ensureNotFalsy","parseRevision","PROMISE_RESOLVE_FALSE","getLastCheckpointDoc","setCheckpoint","resolveConflictError","stripAttachmentsDataFromMetaWriteRows","writeDocToDocState","getAssumedMasterState","getMetaWriteRow","fillWriteDataForAttachmentsChange","startReplicationUpstream","state","input","initialCheckpoint","upstream","checkpointDoc","replicationHandler","streamQueue","up","then","upstreamInitialSync","processTasks","timer","initialSyncStartTime","taskPlanned","openTasks","persistenceQueue","nonPersistedFromMaster","docs","sub","forkInstance","changeStream","subscribe","eventBulk","context","downstreamBulkWriteFlag","stats","forkChangeStreamEmit","push","task","time","scheduleProcessTasks","events","canceled","pipe","unsubscribe","waitBeforePersist","getValue","checkpointQueue","lastCheckpoint","promises","Set","_loop","size","Promise","race","Array","from","upResult","pushBatchSize","documents","length","checkpoint","promise","persistToMaster","add","catch","delete","resolvedPromises","all","hadConflicts","find","r","firstSyncDone","next","active","taskWithTime","shift","map","documentData","forEach","docData","docId","primaryPath","upDocsById","useCheckpoint","docIds","Object","keys","assumedMasterState","writeRowsToMaster","writeRowsToMasterIds","writeRowsToMeta","forkStateById","fullDocData","hasAttachments","keepMeta","assumedMasterDoc","metaDocument","isResolvedConflict","_rev","conflictHandler","realMasterState","newDocumentState","isEqual","height","_meta","identifier","undefined","writeRowsArray","values","conflictIds","conflictsById","writeBatches","writeBatch","row","masterWriteResult","masterWrite","conflictDoc","id","useWriteRowsToMeta","has","processed","metaInstance","bulkWrite","hadConflictWrites","persistToMasterHadConflicts","conflictWriteFork","conflictWriteMeta","entries","writeToMasterRow","resolved","resolvedConflicts","output","previous","document","resolvedDoc","persistToMasterConflictWrites","forkWriteResult","useMetaWrites","success","unhandledError","error"],"sources":["../../../src/replication-protocol/upstream.ts"],"sourcesContent":["import { firstValueFrom, filter } from 'rxjs';\r\nimport { getChangedDocumentsSince, stackCheckpoints } from '../rx-storage-helper.ts';\r\nimport type {\r\n    BulkWriteRow,\r\n    BulkWriteRowById,\r\n    ById,\r\n    EventBulk,\r\n    RxDocumentData,\r\n    RxReplicationWriteToMasterRow,\r\n    RxStorageChangeEvent,\r\n    RxStorageInstanceReplicationState,\r\n    RxStorageReplicationMeta,\r\n    WithDeleted\r\n} from '../types/index.d.ts';\r\nimport {\r\n    appendToArray,\r\n    batchArray,\r\n    clone,\r\n    ensureNotFalsy,\r\n    parseRevision,\r\n    PROMISE_RESOLVE_FALSE\r\n} from '../plugins/utils/index.ts';\r\nimport {\r\n    getLastCheckpointDoc,\r\n    setCheckpoint\r\n} from './checkpoint.ts';\r\nimport { resolveConflictError } from './conflicts.ts';\r\nimport {\r\n    stripAttachmentsDataFromMetaWriteRows,\r\n    writeDocToDocState\r\n} from './helper.ts';\r\nimport {\r\n    getAssumedMasterState,\r\n    getMetaWriteRow\r\n} from './meta-instance.ts';\r\nimport { fillWriteDataForAttachmentsChange } from '../plugins/attachments/index.ts';\r\n\r\n/**\r\n * Writes all document changes from the fork to the master.\r\n * The upstream runs on two modes:\r\n * - For initial replication, a checkpoint-iteration is used\r\n * - For ongoing local writes, we just subscribe to the changeStream of the fork.\r\n *   In contrast to the master, the fork can be assumed to never loose connection,\r\n *   so we do not have to prepare for missed out events.\r\n */\r\nexport async function startReplicationUpstream<RxDocType, CheckpointType>(\r\n    state: RxStorageInstanceReplicationState<RxDocType>\r\n) {\r\n    if (\r\n        state.input.initialCheckpoint &&\r\n        state.input.initialCheckpoint.upstream\r\n    ) {\r\n        const checkpointDoc = await getLastCheckpointDoc(state, 'up');\r\n        if (!checkpointDoc) {\r\n            await setCheckpoint(\r\n                state,\r\n                'up',\r\n                state.input.initialCheckpoint.upstream\r\n            );\r\n        }\r\n    }\r\n\r\n    const replicationHandler = state.input.replicationHandler;\r\n    state.streamQueue.up = state.streamQueue.up.then(() => {\r\n        return upstreamInitialSync().then(() => {\r\n            processTasks();\r\n        });\r\n    });\r\n\r\n    // used to detect which tasks etc can in it at which order.\r\n    let timer = 0;\r\n    let initialSyncStartTime = -1;\r\n    let taskPlanned: boolean = false;\r\n\r\n    type Task = EventBulk<RxStorageChangeEvent<RxDocType>, any>;\r\n    type TaskWithTime = {\r\n        task: Task;\r\n        time: number;\r\n    };\r\n    const openTasks: TaskWithTime[] = [];\r\n    let persistenceQueue: Promise<boolean> = PROMISE_RESOLVE_FALSE;\r\n    const nonPersistedFromMaster: {\r\n        checkpoint?: CheckpointType;\r\n        docs: ById<RxDocumentData<RxDocType>>;\r\n    } = {\r\n        docs: {}\r\n    };\r\n\r\n    const sub = state.input.forkInstance.changeStream()\r\n        .subscribe(async (eventBulk) => {\r\n            // ignore writes that came from the downstream\r\n            if (eventBulk.context === await state.downstreamBulkWriteFlag) {\r\n                return;\r\n            }\r\n\r\n            state.stats.up.forkChangeStreamEmit = state.stats.up.forkChangeStreamEmit + 1;\r\n            openTasks.push({\r\n                task: eventBulk,\r\n                time: timer++\r\n            });\r\n            return scheduleProcessTasks();\r\n        });\r\n    firstValueFrom(\r\n        state.events.canceled.pipe(\r\n            filter(canceled => !!canceled)\r\n        )\r\n    ).then(() => sub.unsubscribe());\r\n\r\n    function scheduleProcessTasks() {\r\n        if (!taskPlanned) {\r\n            // No need to start another task if there is one already scheduled\r\n            taskPlanned = true;\r\n            if (state.input.waitBeforePersist) {\r\n                return state.input.waitBeforePersist()\r\n                    .then(() => processTasks());\r\n            } else {\r\n                return processTasks();\r\n            }\r\n        }\r\n    }\r\n\r\n    async function upstreamInitialSync() {\r\n        state.stats.up.upstreamInitialSync = state.stats.up.upstreamInitialSync + 1;\r\n        if (state.events.canceled.getValue()) {\r\n            return;\r\n        }\r\n\r\n        state.checkpointQueue = state.checkpointQueue.then(() => getLastCheckpointDoc(state, 'up'));\r\n        let lastCheckpoint: CheckpointType = await state.checkpointQueue;\r\n\r\n        const promises: Set<Promise<any>> = new Set();\r\n\r\n        while (!state.events.canceled.getValue()) {\r\n            initialSyncStartTime = timer++;\r\n\r\n            /**\r\n             * Throttle the calls to\r\n             * forkInstance.getChangedDocumentsSince() so that\r\n             * if the pushing to the remote is slower compared to the\r\n             * pulling out of forkInstance, we do not block the UI too much\r\n             * and have a big memory spike with all forkInstance documents.\r\n             */\r\n            if (promises.size > 3) {\r\n                await Promise.race(Array.from(promises));\r\n            }\r\n\r\n            const upResult = await getChangedDocumentsSince(\r\n                state.input.forkInstance,\r\n                state.input.pushBatchSize,\r\n                lastCheckpoint\r\n            );\r\n            if (upResult.documents.length === 0) {\r\n                break;\r\n            }\r\n\r\n            lastCheckpoint = stackCheckpoints([lastCheckpoint, upResult.checkpoint]);\r\n\r\n            const promise = persistToMaster(\r\n                upResult.documents,\r\n                ensureNotFalsy(lastCheckpoint)\r\n            );\r\n            promises.add(promise);\r\n            promise.catch().then(() => promises.delete(promise));\r\n        }\r\n\r\n        /**\r\n         * If we had conflicts during the initial sync,\r\n         * it means that we likely have new writes to the fork\r\n         * and so we have to run the initial sync again to upstream these new writes.\r\n         */\r\n        const resolvedPromises = await Promise.all(promises);\r\n        const hadConflicts = resolvedPromises.find(r => !!r);\r\n        if (hadConflicts) {\r\n            await upstreamInitialSync();\r\n        } else if (\r\n            !state.firstSyncDone.up.getValue() &&\r\n            !state.events.canceled.getValue()\r\n        ) {\r\n            state.firstSyncDone.up.next(true);\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Takes all open tasks an processes them at once.\r\n     */\r\n    function processTasks() {\r\n        taskPlanned = false;\r\n        if (\r\n            state.events.canceled.getValue() ||\r\n            openTasks.length === 0\r\n        ) {\r\n            state.events.active.up.next(false);\r\n            return;\r\n        }\r\n        state.stats.up.processTasks = state.stats.up.processTasks + 1;\r\n        state.events.active.up.next(true);\r\n        state.streamQueue.up = state.streamQueue.up.then(() => {\r\n            /**\r\n             * Merge/filter all open tasks\r\n             */\r\n            const docs: RxDocumentData<RxDocType>[] = [];\r\n            let checkpoint: CheckpointType = {} as any;\r\n            while (openTasks.length > 0) {\r\n                const taskWithTime = ensureNotFalsy(openTasks.shift());\r\n                /**\r\n                 * If the task came in before the last time the initial sync fetching\r\n                 * has run, we can ignore the task because the initial sync already processed\r\n                 * these documents.\r\n                 */\r\n                if (taskWithTime.time < initialSyncStartTime) {\r\n                    continue;\r\n                }\r\n                appendToArray(\r\n                    docs,\r\n                    taskWithTime.task.events.map(r => {\r\n                        return r.documentData as any;\r\n                    })\r\n                );\r\n                checkpoint = stackCheckpoints([checkpoint, taskWithTime.task.checkpoint]);\r\n            }\r\n\r\n            const promise = docs.length === 0 ? PROMISE_RESOLVE_FALSE : persistToMaster(\r\n                docs,\r\n                checkpoint\r\n            );\r\n            return promise.then(() => {\r\n                if (openTasks.length === 0) {\r\n                    state.events.active.up.next(false);\r\n                } else {\r\n                    scheduleProcessTasks();\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns true if had conflicts,\r\n     * false if not.\r\n     */\r\n    function persistToMaster(\r\n        docs: RxDocumentData<RxDocType>[],\r\n        checkpoint: CheckpointType\r\n    ): Promise<boolean> {\r\n        state.stats.up.persistToMaster = state.stats.up.persistToMaster + 1;\r\n\r\n        /**\r\n         * Add the new docs to the non-persistent list\r\n         */\r\n        docs.forEach(docData => {\r\n            const docId: string = (docData as any)[state.primaryPath];\r\n            nonPersistedFromMaster.docs[docId] = docData;\r\n        });\r\n        nonPersistedFromMaster.checkpoint = checkpoint;\r\n\r\n        persistenceQueue = persistenceQueue.then(async () => {\r\n            if (state.events.canceled.getValue()) {\r\n                return false;\r\n            }\r\n\r\n            const upDocsById: ById<RxDocumentData<RxDocType>> = nonPersistedFromMaster.docs;\r\n            nonPersistedFromMaster.docs = {};\r\n            const useCheckpoint = nonPersistedFromMaster.checkpoint;\r\n            const docIds = Object.keys(upDocsById);\r\n            if (docIds.length === 0) {\r\n                return false;\r\n            }\r\n\r\n            const assumedMasterState = await getAssumedMasterState(\r\n                state,\r\n                docIds\r\n            );\r\n\r\n            const writeRowsToMaster: ById<RxReplicationWriteToMasterRow<RxDocType>> = {};\r\n            const writeRowsToMasterIds: string[] = [];\r\n            const writeRowsToMeta: BulkWriteRowById<RxStorageReplicationMeta<RxDocType, any>> = {};\r\n            const forkStateById: ById<RxDocumentData<RxDocType>> = {};\r\n\r\n            await Promise.all(\r\n                docIds.map(async (docId) => {\r\n                    const fullDocData: RxDocumentData<RxDocType> = upDocsById[docId];\r\n                    forkStateById[docId] = fullDocData;\r\n                    const docData: WithDeleted<RxDocType> = writeDocToDocState(fullDocData, state.hasAttachments, !!state.input.keepMeta);\r\n                    const assumedMasterDoc = assumedMasterState[docId];\r\n\r\n                    /**\r\n                     * If the master state is equal to the\r\n                     * fork state, we can assume that the document state is already\r\n                     * replicated.\r\n                     */\r\n                    if (\r\n                        (\r\n                            assumedMasterDoc &&\r\n                            // if the isResolvedConflict is correct, we do not have to compare the documents.\r\n                            assumedMasterDoc.metaDocument.isResolvedConflict !== fullDocData._rev\r\n                            &&\r\n                            (await state.input.conflictHandler({\r\n                                realMasterState: assumedMasterDoc.docData,\r\n                                newDocumentState: docData\r\n                            }, 'upstream-check-if-equal')).isEqual\r\n                        )\r\n                        ||\r\n                        /**\r\n                         * If the master works with _rev fields,\r\n                         * we use that to check if our current doc state\r\n                         * is different from the assumedMasterDoc.\r\n                         */\r\n                        (\r\n                            assumedMasterDoc &&\r\n                            (assumedMasterDoc.docData as any)._rev &&\r\n                            parseRevision(fullDocData._rev).height === fullDocData._meta[state.input.identifier]\r\n                        )\r\n                    ) {\r\n                        return;\r\n                    }\r\n\r\n                    writeRowsToMasterIds.push(docId);\r\n\r\n                    writeRowsToMaster[docId] = {\r\n                        assumedMasterState: assumedMasterDoc ? assumedMasterDoc.docData : undefined,\r\n                        newDocumentState: docData\r\n                    };\r\n                    writeRowsToMeta[docId] = await getMetaWriteRow(\r\n                        state,\r\n                        docData,\r\n                        assumedMasterDoc ? assumedMasterDoc.metaDocument : undefined\r\n                    );\r\n                })\r\n            );\r\n\r\n            if (writeRowsToMasterIds.length === 0) {\r\n                return false;\r\n            }\r\n\r\n\r\n            const writeRowsArray = Object.values(writeRowsToMaster);\r\n            const conflictIds: Set<string> = new Set();\r\n            const conflictsById: ById<WithDeleted<RxDocType>> = {};\r\n\r\n            /**\r\n             * To always respect the push.batchSize,\r\n             * we have to split the write rows into batches\r\n             * to ensure that replicationHandler.masterWrite() is never\r\n             * called with more documents than what the batchSize limits.\r\n             */\r\n            const writeBatches = batchArray(writeRowsArray, state.input.pushBatchSize);\r\n            await Promise.all(\r\n                writeBatches.map(async (writeBatch) => {\r\n\r\n                    // enhance docs with attachments\r\n                    if (state.hasAttachments) {\r\n                        await Promise.all(\r\n                            writeBatch.map(async (row) => {\r\n                                row.newDocumentState = await fillWriteDataForAttachmentsChange(\r\n                                    state.primaryPath,\r\n                                    state.input.forkInstance,\r\n                                    clone(row.newDocumentState),\r\n                                    row.assumedMasterState\r\n                                );\r\n                            })\r\n                        );\r\n                    }\r\n                    const masterWriteResult = await replicationHandler.masterWrite(writeBatch);\r\n                    masterWriteResult.forEach(conflictDoc => {\r\n                        const id = (conflictDoc as any)[state.primaryPath];\r\n                        conflictIds.add(id);\r\n                        conflictsById[id] = conflictDoc;\r\n                    });\r\n                })\r\n            );\r\n\r\n            const useWriteRowsToMeta: BulkWriteRow<RxStorageReplicationMeta<RxDocType, any>>[] = [];\r\n\r\n            writeRowsToMasterIds.forEach(docId => {\r\n                if (!conflictIds.has(docId)) {\r\n                    state.events.processed.up.next(writeRowsToMaster[docId]);\r\n                    useWriteRowsToMeta.push(writeRowsToMeta[docId]);\r\n                }\r\n            });\r\n\r\n            if (state.events.canceled.getValue()) {\r\n                return false;\r\n            }\r\n\r\n            if (useWriteRowsToMeta.length > 0) {\r\n                await state.input.metaInstance.bulkWrite(\r\n                    stripAttachmentsDataFromMetaWriteRows(state, useWriteRowsToMeta),\r\n                    'replication-up-write-meta'\r\n                );\r\n                // TODO what happens when we have conflicts here?\r\n            }\r\n\r\n            /**\r\n             * Resolve conflicts by writing a new document\r\n             * state to the fork instance and the 'real' master state\r\n             * to the meta instance.\r\n             * Non-409 errors will be detected by resolveConflictError()\r\n             */\r\n            let hadConflictWrites = false;\r\n            if (conflictIds.size > 0) {\r\n                state.stats.up.persistToMasterHadConflicts = state.stats.up.persistToMasterHadConflicts + 1;\r\n                const conflictWriteFork: BulkWriteRow<RxDocType>[] = [];\r\n                const conflictWriteMeta: BulkWriteRowById<RxStorageReplicationMeta<RxDocType, any>> = {};\r\n                await Promise.all(\r\n                    Object\r\n                        .entries(conflictsById)\r\n                        .map(([docId, realMasterState]) => {\r\n                            const writeToMasterRow = writeRowsToMaster[docId];\r\n                            const input = {\r\n                                newDocumentState: writeToMasterRow.newDocumentState,\r\n                                assumedMasterState: writeToMasterRow.assumedMasterState,\r\n                                realMasterState\r\n                            };\r\n                            return resolveConflictError(\r\n                                state,\r\n                                input,\r\n                                forkStateById[docId]\r\n                            ).then(async (resolved) => {\r\n                                if (resolved) {\r\n                                    state.events.resolvedConflicts.next({\r\n                                        input,\r\n                                        output: resolved.output\r\n                                    });\r\n                                    conflictWriteFork.push({\r\n                                        previous: forkStateById[docId],\r\n                                        document: resolved.resolvedDoc\r\n                                    });\r\n                                    const assumedMasterDoc = assumedMasterState[docId];\r\n                                    conflictWriteMeta[docId] = await getMetaWriteRow(\r\n                                        state,\r\n                                        ensureNotFalsy(realMasterState),\r\n                                        assumedMasterDoc ? assumedMasterDoc.metaDocument : undefined,\r\n                                        resolved.resolvedDoc._rev\r\n                                    );\r\n                                }\r\n                            });\r\n                        })\r\n                );\r\n\r\n                if (conflictWriteFork.length > 0) {\r\n                    hadConflictWrites = true;\r\n\r\n                    state.stats.up.persistToMasterConflictWrites = state.stats.up.persistToMasterConflictWrites + 1;\r\n                    const forkWriteResult = await state.input.forkInstance.bulkWrite(\r\n                        conflictWriteFork,\r\n                        'replication-up-write-conflict'\r\n                    );\r\n                    /**\r\n                     * Errors in the forkWriteResult must not be handled\r\n                     * because they have been caused by a write to the forkInstance\r\n                     * in between which will anyway trigger a new upstream cycle\r\n                     * that will then resolved the conflict again.\r\n                     */\r\n                    const useMetaWrites: BulkWriteRow<RxStorageReplicationMeta<RxDocType, any>>[] = [];\r\n                    forkWriteResult.success\r\n                        .forEach(docData => {\r\n                            const docId = (docData as any)[state.primaryPath];\r\n                            useMetaWrites.push(\r\n                                conflictWriteMeta[docId]\r\n                            );\r\n                        });\r\n                    if (useMetaWrites.length > 0) {\r\n                        await state.input.metaInstance.bulkWrite(\r\n                            stripAttachmentsDataFromMetaWriteRows(state, useMetaWrites),\r\n                            'replication-up-write-conflict-meta'\r\n                        );\r\n                    }\r\n                    // TODO what to do with conflicts while writing to the metaInstance?\r\n                }\r\n            }\r\n\r\n            /**\r\n             * For better performance we do not await checkpoint writes,\r\n             * but to ensure order on parallel checkpoint writes,\r\n             * we have to use a queue.\r\n             */\r\n            setCheckpoint(\r\n                state,\r\n                'up',\r\n                useCheckpoint\r\n            );\r\n\r\n            return hadConflictWrites;\r\n        }).catch(unhandledError => {\r\n            state.events.error.next(unhandledError);\r\n            return false;\r\n        });\r\n\r\n        return persistenceQueue;\r\n    }\r\n}\r\n"],"mappings":"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"}