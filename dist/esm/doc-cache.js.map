{"version":3,"file":"doc-cache.js","names":["getFromMapOrCreate","getFromMapOrThrow","getHeightOfRevision","overwriteGetterForCaching","requestIdlePromiseNoQueue","overwritable","getDocumentDataOfRxChangeEvent","DocumentCache","primaryPath","changes$","documentCreator","cacheItemByDocId","Map","registry","FinalizationRegistry","docMeta","docId","cacheItem","get","byRev","delete","revisionHeight","size","undefined","registerIdleTasks","subscribe","changeEvent","documentId","documentData","last","_proto","prototype","getLatestDocumentData","getLatestDocumentDataIfExists","_createClass","key","fn","getCachedRxDocumentMonad","docCache","deepFreezeWhenDevMode","docData","_rev","getNewCacheItem","cachedRxDocumentWeakRef","cachedRxDocument","deref","set","createWeakRefWithFallback","push","registerIdlePromise","then","tasks","length","forEach","doc","register","primary","revision","mapDocumentsDataToCacheDocs","docsData","getCachedRxDocument","documents","i","HAS_WEAK_REF","WeakRef","createWeakRef","createWeakRefFallback","obj"],"sources":["../../src/doc-cache.ts"],"sourcesContent":["import type {\n    RxChangeEvent,\n    RxDocument,\n    RxDocumentData\n} from './types/index.d.ts';\nimport {\n    getFromMapOrCreate,\n    getFromMapOrThrow,\n    getHeightOfRevision,\n    overwriteGetterForCaching,\n    requestIdlePromiseNoQueue\n} from './plugins/utils/index.ts';\nimport {\n    overwritable\n} from './overwritable.ts';\nimport { getDocumentDataOfRxChangeEvent } from './rx-change-event.ts';\nimport { Observable } from 'rxjs';\n\ndeclare type CacheItem<RxDocType, OrmMethods> = {\n    /**\n     * Store the different document states of time\n     * based on their revision height.\n     * We store WeakRefs so that we can later clean up\n     * document states that are no longer needed.\n     */\n    byRev: Map<number, WeakRef<RxDocument<RxDocType, OrmMethods>>>;\n\n    /**\n     * Store the latest known document state.\n     * As long as any state of the document is in the cache,\n     * we observe the changestream and update the latestDoc accordingly.\n     * This makes it easier to optimize performance on other parts\n     * because for each known document we can always get the current state\n     * in the storage.\n     * Also it makes it possible to call RxDocument.latest() in a non-async way\n     * to retrieve the latest document state or to observe$ some property.\n     *\n     * To not prevent the whole cacheItem from being garbage collected,\n     * we store only the document data here, but not the RxDocument.\n     */\n    last: RxDocumentData<RxDocType>;\n};\n\n\n/**\n * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry\n */\ndeclare type FinalizationRegistryValue = {\n    docId: string;\n    revisionHeight: number;\n};\n\n/**\n * The DocumentCache stores RxDocument objects\n * by their primary key and revision.\n * This is useful on client side applications where\n * it is not known how much memory can be used, so\n * we de-duplicate RxDocument states to save memory.\n * To not fill up the memory with old document states, the DocumentCache\n * only contains weak references to the RxDocuments themself.\n * @link https://caniuse.com/?search=weakref\n */\nexport class DocumentCache<RxDocType, OrmMethods> {\n    public cacheItemByDocId = new Map<string, CacheItem<RxDocType, OrmMethods>>();\n\n    /**\n     * Some JavaScript runtimes like QuickJS,\n     * so not have a FinalizationRegistry or WeakRef.\n     * Therefore we need a workaround which might waste a lot of memory,\n     * but at least works.\n     */\n    public readonly registry?: FinalizationRegistry<FinalizationRegistryValue> = typeof FinalizationRegistry === 'function' ?\n        new FinalizationRegistry<FinalizationRegistryValue>(docMeta => {\n            const docId = docMeta.docId;\n            const cacheItem = this.cacheItemByDocId.get(docId);\n            if (cacheItem) {\n                cacheItem.byRev.delete(docMeta.revisionHeight);\n                if (cacheItem.byRev.size === 0) {\n                    /**\n                     * No state of the document is cached anymore,\n                     * so we can clean up.\n                     */\n                    this.cacheItemByDocId.delete(docId);\n                }\n            }\n        }) :\n        undefined;\n\n    /**\n     * Calling registry.register(() has shown to have\n     * really bad performance. So we add the cached documents\n     * lazily.\n     */\n    public registerIdlePromise?: Promise<any>;\n    public registerIdleTasks: RxDocument<RxDocType, OrmMethods>[] = [];\n\n    constructor(\n        public readonly primaryPath: string,\n        public readonly changes$: Observable<RxChangeEvent<RxDocType>>,\n        /**\n         * A method that can create a RxDocument by the given document data.\n         */\n        public documentCreator: (docData: RxDocumentData<RxDocType>) => RxDocument<RxDocType, OrmMethods>\n    ) {\n        changes$.subscribe(changeEvent => {\n            const docId = changeEvent.documentId;\n            const cacheItem = this.cacheItemByDocId.get(docId);\n            if (cacheItem) {\n                const documentData = getDocumentDataOfRxChangeEvent(changeEvent);\n                cacheItem.last = documentData;\n            }\n        });\n    }\n\n    /**\n     * Get the RxDocument from the cache\n     * and create a new one if not exits before.\n     * @overwrites itself with the actual function\n     * because this is @performance relevant.\n     * It is called on each document row for each write and read.\n     */\n    get getCachedRxDocument(): (docData: RxDocumentData<RxDocType>) => RxDocument<RxDocType, OrmMethods> {\n        const fn = getCachedRxDocumentMonad(this);\n        return overwriteGetterForCaching(\n            this,\n            'getCachedRxDocument',\n            fn\n        );\n    }\n\n    /**\n     * Throws if not exists\n     */\n    public getLatestDocumentData(docId: string): RxDocumentData<RxDocType> {\n        const cacheItem = getFromMapOrThrow(this.cacheItemByDocId, docId);\n        return cacheItem.last;\n    }\n\n    public getLatestDocumentDataIfExists(docId: string): RxDocumentData<RxDocType> | undefined {\n        const cacheItem = this.cacheItemByDocId.get(docId);\n        if (cacheItem) {\n            return cacheItem.last;\n        }\n    }\n}\n\n/**\n * This function is called very very often.\n * This is likely the most important function for RxDB overall performance\n */\nfunction getCachedRxDocumentMonad<RxDocType, OrmMethods>(\n    docCache: DocumentCache<RxDocType, OrmMethods>\n): (docData: RxDocumentData<RxDocType>) => RxDocument<RxDocType, OrmMethods> {\n    const primaryPath = docCache.primaryPath;\n    const cacheItemByDocId = docCache.cacheItemByDocId;\n    const registry = docCache.registry;\n    const deepFreezeWhenDevMode = overwritable.deepFreezeWhenDevMode;\n    const documentCreator = docCache.documentCreator;\n    const fn: (docData: RxDocumentData<RxDocType>) => RxDocument<RxDocType, OrmMethods> = (docData: RxDocumentData<RxDocType>) => {\n        const docId: string = (docData as any)[primaryPath];\n        const revisionHeight = getHeightOfRevision(docData._rev);\n        const cacheItem = getFromMapOrCreate<string, CacheItem<RxDocType, OrmMethods>>(\n            cacheItemByDocId,\n            docId,\n            () => getNewCacheItem<RxDocType, OrmMethods>(docData)\n        );\n\n        const byRev = cacheItem.byRev;\n        const cachedRxDocumentWeakRef: WeakRef<RxDocument<RxDocType, OrmMethods>> | undefined = byRev.get(revisionHeight);\n        let cachedRxDocument = cachedRxDocumentWeakRef ? cachedRxDocumentWeakRef.deref() : undefined;\n        if (!cachedRxDocument) {\n            docData = deepFreezeWhenDevMode(docData) as any;\n            cachedRxDocument = documentCreator(docData) as RxDocument<RxDocType, OrmMethods>;\n            byRev.set(revisionHeight, createWeakRefWithFallback(cachedRxDocument));\n            if (registry) {\n                docCache.registerIdleTasks.push(cachedRxDocument);\n                if (!docCache.registerIdlePromise) {\n                    docCache.registerIdlePromise = requestIdlePromiseNoQueue().then(() => {\n                        docCache.registerIdlePromise = undefined;\n                        const tasks = docCache.registerIdleTasks;\n                        if (tasks.length === 0) {\n                            return;\n                        }\n                        docCache.registerIdleTasks = [];\n                        tasks.forEach(doc => {\n                            registry.register(doc, {\n                                docId: doc.primary,\n                                revisionHeight: getHeightOfRevision(doc.revision)\n                            });\n                        });\n                    });\n                }\n            }\n        }\n        return cachedRxDocument;\n    };\n    return fn;\n}\n\nexport function mapDocumentsDataToCacheDocs<RxDocType, OrmMethods>(\n    docCache: DocumentCache<RxDocType, OrmMethods>,\n    docsData: RxDocumentData<RxDocType>[]\n) {\n    const getCachedRxDocument = docCache.getCachedRxDocument;\n    const documents: RxDocument<RxDocType, OrmMethods>[] = [];\n    for (let i = 0; i < docsData.length; i++) {\n        const docData = docsData[i];\n        const doc = getCachedRxDocument(docData);\n        documents.push(doc);\n    }\n    return documents;\n}\n\n\nfunction getNewCacheItem<RxDocType, OrmMethods>(docData: RxDocumentData<RxDocType>): CacheItem<RxDocType, OrmMethods> {\n    return {\n        byRev: new Map(),\n        last: docData\n    };\n}\n\n\n\n\n/**\n * Fallback for JavaScript runtimes that do not support WeakRef.\n * The fallback will keep the items in cache forever,\n * but at least works.\n */\nconst HAS_WEAK_REF = typeof WeakRef === 'function';\nconst createWeakRefWithFallback = HAS_WEAK_REF ? createWeakRef : createWeakRefFallback;\nfunction createWeakRef<T extends object>(obj: T): WeakRef<T> {\n    return new WeakRef(obj) as any;\n}\nfunction createWeakRefFallback<T extends object>(obj: T): WeakRef<T> {\n    return {\n        deref() {\n            return obj;\n        }\n    } as any;\n}\n"],"mappings":"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","ignoreList":[]}