{"version":3,"file":"rx-storage-instance-foundationdb.js","names":["Subject","getPrimaryFieldOfPrimaryKey","categorizeBulkWriteRows","CLEANUP_INDEX","FOUNDATION_DB_WRITE_BATCH_SIZE","getFoundationDBIndexName","getIndexableStringMonad","getStartIndexStringFromLowerBound","getStartIndexStringFromUpperBound","appendToArray","batchArray","ensureNotFalsy","now","PROMISE_RESOLVE_VOID","toArray","queryFoundationDB","INDEX_MAX","attachmentMapKey","RxStorageInstanceFoundationDB","storage","databaseName","collectionName","schema","internals","options","settings","changes$","primaryPath","primaryKey","_proto","prototype","bulkWrite","documentWrites","context","dbs","dbsPromise","ret","success","error","writeBatches","Promise","all","map","writeBatch","categorized","root","doTransaction","tx","ids","row","document","mainTx","at","main","subspace","attachmentTx","attachments","docsInDB","Map","id","doc","get","set","errors","bulkInsertDocs","forEach","writeRow","docId","push","Object","values","indexes","indexMeta","indexString","getIndexableString","indexTx","db","bulkUpdateDocs","oldIndexString","previous","newIndexString","delete","attachmentsAdd","attachment","documentId","attachmentId","attachmentData","attachmentsUpdate","attachmentsRemove","eventBulk","events","length","lastState","newestRow","checkpoint","lwt","_meta","endTime","next","findDocumentsById","withDeleted","docInDb","_deleted","query","preparedQuery","count","result","documents","mode","getAttachmentData","_digest","data","changeStream","asObservable","remove","clearRange","close","cleanup","minimumDeletedTime","keySelector","StreamingMode","require","maxDeletionTime","index","indexName","lowerBoundString","upperBoundString","noMoreUndeleted","batchSize","range","getRangeAll","firstGreaterThan","limit","streamingMode","Exact","pop","docIds","docsData","indexMetaInner","subIndexDB","docData","conflictResultionTasks","resolveConflictResultionTask","_taskSolution","closed","complete","createFoundationDBStorageInstance","params","open","directory","encoders","connection","clusterFile","dir","createOrOpen","version","withKeyEncoding","string","withValueEncoding","json","indexDBs","useIndexes","slice","useIndexesFinal","indexAr","indexDB","instance","resolve"],"sources":["../../../../src/plugins/storage-foundationdb/rx-storage-instance-foundationdb.ts"],"sourcesContent":["import { Observable, Subject } from 'rxjs';\nimport { getPrimaryFieldOfPrimaryKey } from '../../rx-schema-helper.ts';\nimport type {\n    BulkWriteRow,\n    CategorizeBulkWriteRowsOutput,\n    EventBulk,\n    PreparedQuery,\n    RxAttachmentWriteData,\n    RxConflictResultionTask,\n    RxConflictResultionTaskSolution,\n    RxDocumentData,\n    RxJsonSchema,\n    RxStorageBulkWriteResponse,\n    RxStorageChangeEvent,\n    RxStorageCountResult,\n    RxStorageDefaultCheckpoint,\n    RxStorageInstance,\n    RxStorageInstanceCreationParams,\n    RxStorageQueryResult,\n    StringKeys\n} from '../../types/index.d.ts';\nimport type {\n    FoundationDBDatabase,\n    FoundationDBIndexMeta,\n    FoundationDBStorageInternals,\n    RxStorageFoundationDB,\n    RxStorageFoundationDBInstanceCreationOptions,\n    RxStorageFoundationDBSettings\n} from './foundationdb-types.ts';\n// import {\n//     open as foundationDBOpen,\n//     directory as foundationDBDirectory,\n//     encoders as foundationDBEncoders,\n//     keySelector as foundationDBKeySelector,\n//     StreamingMode as foundationDBStreamingMode\n// } from 'foundationdb';\nimport {\n    categorizeBulkWriteRows\n} from '../../rx-storage-helper.ts';\nimport {\n\n    CLEANUP_INDEX,\n    FOUNDATION_DB_WRITE_BATCH_SIZE,\n    getFoundationDBIndexName\n} from './foundationdb-helpers.ts';\nimport {\n    getIndexableStringMonad,\n    getStartIndexStringFromLowerBound,\n    getStartIndexStringFromUpperBound\n} from '../../custom-index.ts';\nimport {\n    appendToArray,\n    batchArray,\n    ensureNotFalsy,\n    lastOfArray,\n    now,\n    PROMISE_RESOLVE_VOID,\n    toArray\n} from '../../plugins/utils/index.ts';\nimport { queryFoundationDB } from './foundationdb-query.ts';\nimport { INDEX_MAX } from '../../query-planner.ts';\nimport { attachmentMapKey } from '../storage-memory/index.ts';\n\nexport class RxStorageInstanceFoundationDB<RxDocType> implements RxStorageInstance<\n    RxDocType,\n    FoundationDBStorageInternals<RxDocType>,\n    RxStorageFoundationDBInstanceCreationOptions,\n    RxStorageDefaultCheckpoint\n> {\n    public readonly primaryPath: StringKeys<RxDocumentData<RxDocType>>;\n\n    public closed?: Promise<void>;\n    private changes$: Subject<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint>> = new Subject();\n\n    constructor(\n        public readonly storage: RxStorageFoundationDB,\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly schema: Readonly<RxJsonSchema<RxDocumentData<RxDocType>>>,\n        public readonly internals: FoundationDBStorageInternals<RxDocType>,\n        public readonly options: Readonly<RxStorageFoundationDBInstanceCreationOptions>,\n        public readonly settings: RxStorageFoundationDBSettings\n    ) {\n        this.primaryPath = getPrimaryFieldOfPrimaryKey(this.schema.primaryKey);\n    }\n\n    async bulkWrite(\n        documentWrites: BulkWriteRow<RxDocType>[],\n        context: string\n    ): Promise<RxStorageBulkWriteResponse<RxDocType>> {\n        const dbs = await this.internals.dbsPromise;\n        const ret: RxStorageBulkWriteResponse<RxDocType> = {\n            success: [],\n            error: []\n        };\n\n        /**\n         * Doing too many write in a single transaction\n         * will throw with a 'Transaction exceeds byte limit'\n         * so we have to batch up the writes.\n         */\n        const writeBatches = batchArray(documentWrites, FOUNDATION_DB_WRITE_BATCH_SIZE);\n        await Promise.all(\n            writeBatches.map(async (writeBatch) => {\n                let categorized: CategorizeBulkWriteRowsOutput<RxDocType> | undefined = null as any;\n                await dbs.root.doTransaction(async (tx: any) => {\n                    const ids = writeBatch.map(row => (row.document as any)[this.primaryPath]);\n                    const mainTx = tx.at(dbs.main.subspace);\n                    const attachmentTx = tx.at(dbs.attachments.subspace);\n                    const docsInDB = new Map<string, RxDocumentData<RxDocType>>();\n                    /**\n                     * TODO this might be faster if fdb\n                     * any time adds a bulk-fetch-by-key method.\n                     */\n                    await Promise.all(\n                        ids.map(async (id) => {\n                            const doc = await mainTx.get(id);\n                            docsInDB.set(id, doc);\n                        })\n                    );\n                    categorized = categorizeBulkWriteRows<RxDocType>(\n                        this,\n                        this.primaryPath as any,\n                        docsInDB,\n                        writeBatch,\n                        context\n                    );\n                    appendToArray(ret.error, categorized.errors);\n\n                    // INSERTS\n                    categorized.bulkInsertDocs.forEach(writeRow => {\n                        const docId: string = writeRow.document[this.primaryPath] as any;\n                        ret.success.push(writeRow.document);\n\n                        // insert document data\n                        mainTx.set(docId, writeRow.document);\n\n                        // insert secondary indexes\n                        Object.values(dbs.indexes).forEach(indexMeta => {\n                            const indexString = indexMeta.getIndexableString(writeRow.document as any);\n                            const indexTx = tx.at(indexMeta.db.subspace);\n                            indexTx.set(indexString, docId);\n                        });\n                    });\n                    // UPDATES\n                    categorized.bulkUpdateDocs.forEach((writeRow: BulkWriteRow<RxDocType>) => {\n                        const docId: string = writeRow.document[this.primaryPath] as any;\n\n                        // overwrite document data\n                        mainTx.set(docId, writeRow.document);\n\n                        // update secondary indexes\n                        Object.values(dbs.indexes).forEach(indexMeta => {\n                            const oldIndexString = indexMeta.getIndexableString(ensureNotFalsy(writeRow.previous));\n                            const newIndexString = indexMeta.getIndexableString(writeRow.document as any);\n                            if (oldIndexString !== newIndexString) {\n                                const indexTx = tx.at(indexMeta.db.subspace);\n                                indexTx.delete(oldIndexString);\n                                indexTx.set(newIndexString, docId);\n                            }\n                        });\n                        ret.success.push(writeRow.document as any);\n                    });\n\n                    // attachments\n                    categorized.attachmentsAdd.forEach(attachment => {\n                        attachmentTx.set(\n                            attachmentMapKey(attachment.documentId, attachment.attachmentId),\n                            attachment.attachmentData\n                        );\n                    });\n                    categorized.attachmentsUpdate.forEach(attachment => {\n                        attachmentTx.set(\n                            attachmentMapKey(attachment.documentId, attachment.attachmentId),\n                            attachment.attachmentData\n                        );\n                    });\n                    categorized.attachmentsRemove.forEach(attachment => {\n                        attachmentTx.delete(\n                            attachmentMapKey(attachment.documentId, attachment.attachmentId)\n                        );\n                    });\n                });\n                categorized = ensureNotFalsy(categorized);\n                /**\n                 * The events must be emitted AFTER the transaction\n                 * has finished.\n                 * Otherwise an observable changestream might cause a read\n                 * to a document that does not already exist outside of the transaction.\n                 */\n                if (categorized.eventBulk.events.length > 0) {\n                    const lastState = ensureNotFalsy(categorized.newestRow).document;\n                    categorized.eventBulk.checkpoint = {\n                        id: lastState[this.primaryPath],\n                        lwt: lastState._meta.lwt\n                    };\n                    categorized.eventBulk.endTime = now();\n                    this.changes$.next(categorized.eventBulk);\n                }\n            })\n        );\n\n\n        return ret;\n    }\n\n    async findDocumentsById(ids: string[], withDeleted: boolean): Promise<RxDocumentData<RxDocType>[]> {\n        const dbs = await this.internals.dbsPromise;\n        return dbs.main.doTransaction(async (tx: any) => {\n            const ret: RxDocumentData<RxDocType>[] = [];\n            await Promise.all(\n                ids.map(async (docId) => {\n                    const docInDb = await tx.get(docId);\n                    if (\n                        docInDb &&\n                        (\n                            !docInDb._deleted ||\n                            withDeleted\n                        )\n                    ) {\n                        ret.push(docInDb);\n                    }\n                })\n            );\n            return ret;\n        });\n    }\n    query(preparedQuery: PreparedQuery<RxDocType>): Promise<RxStorageQueryResult<RxDocType>> {\n        return queryFoundationDB(this, preparedQuery);\n    }\n    async count(\n        preparedQuery: PreparedQuery<RxDocType>\n    ): Promise<RxStorageCountResult> {\n        /**\n         * At this point in time (end 2022), FoundationDB does not support\n         * range counts. So we have to run a normal query and use the result set length.\n         * @link https://github.com/apple/foundationdb/issues/5981\n         */\n        const result = await this.query(preparedQuery);\n        return {\n            count: result.documents.length,\n            mode: 'fast'\n        };\n    }\n\n    async getAttachmentData(documentId: string, attachmentId: string, _digest: string): Promise<string> {\n        const dbs = await this.internals.dbsPromise;\n        const attachment = await dbs.attachments.get(attachmentMapKey(documentId, attachmentId));\n        return attachment.data;\n    }\n    changeStream(): Observable<EventBulk<RxStorageChangeEvent<RxDocType>, RxStorageDefaultCheckpoint>> {\n        return this.changes$.asObservable();\n    }\n\n    async remove(): Promise<void> {\n        const dbs = await this.internals.dbsPromise;\n        await dbs.root.doTransaction((tx: any) => {\n            tx.clearRange('', INDEX_MAX);\n            return PROMISE_RESOLVE_VOID;\n        });\n        return this.close();\n    }\n    async cleanup(minimumDeletedTime: number): Promise<boolean> {\n        const {\n            keySelector,\n            StreamingMode\n        } = require('foundationdb');\n        const maxDeletionTime = now() - minimumDeletedTime;\n        const dbs = await this.internals.dbsPromise;\n        const index = CLEANUP_INDEX;\n        const indexName = getFoundationDBIndexName(index);\n        const indexMeta = dbs.indexes[indexName];\n        const lowerBoundString = getStartIndexStringFromLowerBound(\n            this.schema,\n            index,\n            [\n                true,\n                /**\n                 * Do not use 0 here,\n                 * because 1 is the minimum value for _meta.lwt\n                 */\n                1\n            ]\n        );\n        const upperBoundString = getStartIndexStringFromUpperBound(\n            this.schema,\n            index,\n            [\n                true,\n                maxDeletionTime\n            ]\n        );\n        let noMoreUndeleted: boolean = true;\n        await dbs.root.doTransaction(async (tx: any) => {\n            const batchSize = ensureNotFalsy(this.settings.batchSize);\n            const indexTx = tx.at(indexMeta.db.subspace);\n            const mainTx = tx.at(dbs.main.subspace);\n            const range = await indexTx.getRangeAll(\n                keySelector.firstGreaterThan(lowerBoundString),\n                upperBoundString,\n                {\n                    limit: batchSize + 1, // get one more extra to detect what to return from cleanup()\n                    streamingMode: StreamingMode.Exact\n                }\n            );\n            if (range.length > batchSize) {\n                noMoreUndeleted = false;\n                range.pop();\n            }\n            const docIds = range.map((row: string[]) => row[1]);\n            const docsData: RxDocumentData<RxDocType>[] = await Promise.all(docIds.map((docId: string) => mainTx.get(docId)));\n\n            Object\n                .values(dbs.indexes)\n                .forEach(indexMetaInner => {\n                    const subIndexDB = tx.at(indexMetaInner.db.subspace);\n                    docsData.forEach(docData => {\n                        const indexString = indexMetaInner.getIndexableString(docData);\n                        subIndexDB.delete(indexString);\n                    });\n                });\n            docIds.forEach((id: string) => mainTx.delete(id));\n        });\n\n        return noMoreUndeleted;\n    }\n\n    conflictResultionTasks(): Observable<RxConflictResultionTask<RxDocType>> {\n        return new Subject<any>().asObservable();\n    }\n    resolveConflictResultionTask(_taskSolution: RxConflictResultionTaskSolution<RxDocType>): Promise<void> {\n        return PROMISE_RESOLVE_VOID;\n    }\n\n    async close() {\n        if (this.closed) {\n            return this.closed;\n        }\n        this.closed = (async () => {\n            this.changes$.complete();\n            const dbs = await this.internals.dbsPromise;\n            await dbs.root.close();\n\n            // TODO shouldn't we close the index databases?\n            // Object.values(dbs.indexes).forEach(db => db.close());\n        })();\n        return this.closed;\n    }\n}\n\n\nexport function createFoundationDBStorageInstance<RxDocType>(\n    storage: RxStorageFoundationDB,\n    params: RxStorageInstanceCreationParams<RxDocType, RxStorageFoundationDBInstanceCreationOptions>,\n    settings: RxStorageFoundationDBSettings\n): Promise<RxStorageInstanceFoundationDB<RxDocType>> {\n    const primaryPath = getPrimaryFieldOfPrimaryKey(params.schema.primaryKey);\n\n    const {\n        open,\n        directory,\n        encoders\n    } = require('foundationdb');\n\n    const connection = open(settings.clusterFile);\n    const dbsPromise = (async () => {\n        const dir = await directory.createOrOpen(connection, 'rxdb');\n\n        const root = connection\n            .at(dir)\n            .at(params.databaseName + '.')\n            .at(params.collectionName + '.')\n            .at(params.schema.version + '.');\n        const main: FoundationDBDatabase<RxDocType> = root\n            .at('main.')\n            .withKeyEncoding(encoders.string) // automatically encode & decode keys using tuples\n            .withValueEncoding(encoders.json) as any; // and values using JSON\n\n\n        const events: FoundationDBDatabase<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint>> = root\n            .at('events.')\n            .withKeyEncoding(encoders.string)\n            .withValueEncoding(encoders.json) as any;\n\n        const attachments: FoundationDBDatabase<RxAttachmentWriteData> = root\n            .at('attachments.')\n            .withKeyEncoding(encoders.string)\n            .withValueEncoding(encoders.json) as any;\n\n\n        const indexDBs: { [indexName: string]: FoundationDBIndexMeta<RxDocType>; } = {};\n        const useIndexes = params.schema.indexes ? params.schema.indexes.slice(0) : [];\n        useIndexes.push([primaryPath]);\n        const useIndexesFinal = useIndexes.map(index => {\n            const indexAr = toArray(index);\n            return indexAr;\n        });\n        // used for `getChangedDocumentsSince()`\n        useIndexesFinal.push([\n            '_meta.lwt',\n            primaryPath\n        ]);\n        useIndexesFinal.push(CLEANUP_INDEX);\n        useIndexesFinal.forEach(indexAr => {\n            const indexName = getFoundationDBIndexName(indexAr);\n            const indexDB = root.at(indexName + '.')\n                .withKeyEncoding(encoders.string)\n                .withValueEncoding(encoders.string);\n            indexDBs[indexName] = {\n                indexName,\n                db: indexDB,\n                getIndexableString: getIndexableStringMonad(params.schema, indexAr),\n                index: indexAr\n            };\n        });\n\n        return {\n            root,\n            main,\n            events,\n            attachments,\n            indexes: indexDBs\n        };\n    })();\n\n\n    const internals: FoundationDBStorageInternals<RxDocType> = {\n        connection,\n        dbsPromise: dbsPromise\n    };\n\n    const instance = new RxStorageInstanceFoundationDB(\n        storage,\n        params.databaseName,\n        params.collectionName,\n        params.schema,\n        internals,\n        params.options,\n        settings\n    );\n    return Promise.resolve(instance);\n}\n"],"mappings":"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","ignoreList":[]}