{"version":3,"file":"signaling-server.js","names":["getFromMapOrCreate","promiseWait","randomCouchString","SIMPLE_PEER_PING_INTERVAL","PEER_ID_LENGTH","startSignalingServerSimplePeer","serverOptions","WebSocketServer","wss","peerById","Map","peersByRoom","serverClosed","on","clear","_loop","minTime","Date","now","Array","from","values","forEach","peer","lastPing","disconnectSocket","id","peerId","reason","console","log","get","socket","close","undefined","rooms","roomId","room","delete","size","ws","Set","set","sendMessage","type","yourPeerId","err","error","dir","msgEvent","message","JSON","parse","toString","validateIdString","has","add","otherPeerId","otherPeer","otherPeerIds","senderPeerId","receiver","receiverPeerId","port","server","localUrl","msgString","stringify","send","length"],"sources":["../../../../src/plugins/replication-webrtc/signaling-server.ts"],"sourcesContent":["import {\n    getFromMapOrCreate,\n    promiseWait,\n    randomCouchString\n} from '../utils/index.ts';\nimport {\n    SIMPLE_PEER_PING_INTERVAL,\n    type PeerMessage\n} from './connection-handler-simple-peer.ts';\nimport type {\n    WebSocket,\n    ServerOptions\n} from 'ws';\n\nexport const PEER_ID_LENGTH = 12;\nexport type ServerPeer = {\n    id: string;\n    socket: WebSocket;\n    rooms: Set<string>;\n    lastPing: number;\n};\n\n\n/**\n * Starts a WebRTC signaling server\n * that can be used in tests.\n*/\nexport async function startSignalingServerSimplePeer(\n    serverOptions: ServerOptions\n) {\n    const { WebSocketServer } = await import('ws');\n    const wss = new WebSocketServer(serverOptions);\n\n    const peerById = new Map<string, ServerPeer>();\n    const peersByRoom = new Map<string, Set<string>>();\n\n    let serverClosed = false;\n    wss.on('close', () => {\n        serverClosed = true\n        peerById.clear();\n        peersByRoom.clear();\n    });\n\n    /**\n     * Clients can disconnect without telling that to the\n     * server. Therefore we have to automatically disconnect clients that\n     * have not send a ping message in the last 2 minutes.\n     */\n    (async () => {\n        while (!serverClosed) {\n            await promiseWait(1000 * 5);\n            const minTime = Date.now() - SIMPLE_PEER_PING_INTERVAL;\n            Array.from(peerById.values()).forEach(peer => {\n                if (peer.lastPing < minTime) {\n                    disconnectSocket(peer.id, 'no ping for 2 minutes');\n                }\n            });\n        }\n    })();\n\n    function disconnectSocket(peerId: string, reason: string) {\n        console.log('# disconnect peer ' + peerId + ' reason: ' + reason);\n        const peer = peerById.get(peerId);\n        if (peer) {\n            peer.socket.close && peer.socket.close(undefined, reason);\n            peer.rooms.forEach(roomId => {\n                const room = peersByRoom.get(roomId);\n                room?.delete(peerId);\n                if (room && room.size === 0) {\n                    peersByRoom.delete(roomId);\n                }\n            });\n        }\n        peerById.delete(peerId);\n    }\n\n    wss.on('connection', function (ws) {\n        /**\n         * PeerID is created by the server to prevent malicious\n         * actors from falsy claiming other peoples ids.\n         */\n        const peerId = randomCouchString(PEER_ID_LENGTH);\n        const peer: ServerPeer = {\n            id: peerId,\n            socket: ws,\n            rooms: new Set(),\n            lastPing: Date.now()\n        };\n        peerById.set(peerId, peer);\n\n        sendMessage(ws, { type: 'init', yourPeerId: peerId });\n\n\n        ws.on('error', err => {\n            console.error('SERVER ERROR:');\n            console.dir(err);\n            disconnectSocket(peerId, 'socket errored');\n        });\n        ws.on('close', () => {\n            disconnectSocket(peerId, 'socket disconnected');\n        });\n\n        ws.on('message', msgEvent => {\n            peer.lastPing = Date.now();\n            const message = JSON.parse(msgEvent.toString());\n            const type = message.type;\n            switch (type) {\n                case 'join':\n                    const roomId = message.room;\n                    if (\n                        !validateIdString(roomId) ||\n                        !validateIdString(peerId)\n                    ) {\n                        disconnectSocket(peerId, 'invalid ids');\n                        return;\n                    }\n\n                    if (peer.rooms.has(peerId)) {\n                        return;\n                    }\n                    peer.rooms.add(roomId);\n\n\n                    const room = getFromMapOrCreate(\n                        peersByRoom,\n                        message.room,\n                        () => new Set()\n                    );\n\n                    room.add(peerId);\n\n                    // tell everyone about new room state\n                    room.forEach(otherPeerId => {\n                        const otherPeer = peerById.get(otherPeerId);\n                        if (otherPeer) {\n                            sendMessage(\n                                otherPeer.socket,\n                                {\n                                    type: 'joined',\n                                    otherPeerIds: Array.from(room)\n                                }\n                            );\n                        }\n                    });\n                    break;\n                case 'signal':\n                    if (\n                        message.senderPeerId !== peerId\n                    ) {\n                        disconnectSocket(peerId, 'spoofed sender');\n                        return;\n                    }\n                    const receiver = peerById.get(message.receiverPeerId);\n                    if (receiver) {\n                        sendMessage(\n                            receiver.socket,\n                            message\n                        );\n                    }\n                    break;\n                case 'ping':\n                    break;\n                default:\n                    disconnectSocket(peerId, 'unknown message type ' + type);\n            }\n\n        });\n    });\n\n    return {\n        port: serverOptions.port,\n        server: wss,\n        localUrl: 'ws://localhost:' + serverOptions.port\n    };\n}\n\n\nfunction sendMessage(ws: WebSocket, message: PeerMessage) {\n    const msgString = JSON.stringify(message);\n    ws.send(msgString);\n}\n\nfunction validateIdString(roomId: string): boolean {\n    if (\n        typeof roomId === 'string' &&\n        roomId.length > 5 &&\n        roomId.length < 100\n    ) {\n        return true;\n    } else {\n        return false;\n    }\n}\n"],"mappings":"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","ignoreList":[]}