{"version":3,"file":"denokv-query.js","names":["changeIndexableStringByOneQuantum","getStartIndexStringFromLowerBound","getStartIndexStringFromUpperBound","ensureNotFalsy","getQueryMatcher","getSortComparator","DENOKV_DOCUMENT_ROOT_PATH","getDenoKVIndexName","queryDenoKV","instance","preparedQuery","queryPlan","query","skip","limit","Infinity","skipPlusLimit","queryPlanFields","index","mustManuallyResort","sortSatisfiedByIndex","queryMatcher","selectorSatisfiedByIndex","schema","kv","kvPromise","indexForName","slice","indexName","indexMeta","internals","indexes","lowerBound","startKeys","lowerBoundString","inclusiveStart","upperBound","endKeys","upperBoundString","inclusiveEnd","result","singleDocResult","get","keySpace","indexId","kvOptions","value","docId","docDataResult","docData","push","documents","range","list","start","end","consistency","settings","consistencyLevel","undefined","batchSize","indexDocEntry","length","sortComparator","sort"],"sources":["../../../../src/plugins/storage-denokv/denokv-query.ts"],"sourcesContent":["import {\n    changeIndexableStringByOneQuantum,\n    getStartIndexStringFromLowerBound,\n    getStartIndexStringFromUpperBound\n} from '../../custom-index.ts';\nimport type {\n    PreparedQuery,\n    QueryMatcher,\n    RxDocumentData,\n    RxStorageQueryResult\n} from '../../types/index.d.ts';\nimport { ensureNotFalsy } from '../../plugins/utils/index.ts';\nimport { getQueryMatcher, getSortComparator } from '../../rx-query-helper.ts';\nimport { RxStorageInstanceDenoKV } from \"./rx-storage-instance-denokv.ts\";\nimport { DENOKV_DOCUMENT_ROOT_PATH, getDenoKVIndexName } from \"./denokv-helper.ts\";\n\nexport async function queryDenoKV<RxDocType>(\n    instance: RxStorageInstanceDenoKV<RxDocType>,\n    preparedQuery: PreparedQuery<RxDocType>\n): Promise<RxStorageQueryResult<RxDocType>> {\n    const queryPlan = preparedQuery.queryPlan;\n    const query = preparedQuery.query;\n    const skip = query.skip ? query.skip : 0;\n    const limit = query.limit ? query.limit : Infinity;\n    const skipPlusLimit = skip + limit;\n    const queryPlanFields: string[] = queryPlan.index;\n    const mustManuallyResort = !queryPlan.sortSatisfiedByIndex;\n\n\n    let queryMatcher: QueryMatcher<RxDocumentData<RxDocType>> | false = false;\n    if (!queryPlan.selectorSatisfiedByIndex) {\n        queryMatcher = getQueryMatcher(\n            instance.schema,\n            preparedQuery.query\n        );\n    }\n\n    const kv = await instance.kvPromise;\n\n    const indexForName = queryPlanFields.slice(0);\n    const indexName = getDenoKVIndexName(indexForName);\n    const indexMeta = ensureNotFalsy(instance.internals.indexes[indexName]);\n\n    let lowerBound: any[] = queryPlan.startKeys;\n    let lowerBoundString = getStartIndexStringFromLowerBound(\n        instance.schema,\n        indexForName,\n        lowerBound\n    );\n    if (!queryPlan.inclusiveStart) {\n        lowerBoundString = changeIndexableStringByOneQuantum(lowerBoundString, 1);\n    }\n\n    let upperBound: any[] = queryPlan.endKeys;\n    let upperBoundString = getStartIndexStringFromUpperBound(\n        instance.schema,\n        indexForName,\n        upperBound\n    );\n\n    if (queryPlan.inclusiveEnd) {\n        upperBoundString = changeIndexableStringByOneQuantum(upperBoundString, +1);\n    }\n\n\n    let result: RxDocumentData<RxDocType>[] = [];\n\n\n    /**\n     * TODO for whatever reason the keySelectors like firstGreaterThan etc.\n     * do not work properly. So we have to hack here to find the correct\n     * document in case lowerBoundString===upperBoundString.\n     * This likely must be fixed in the foundationdb library.\n     * When it is fixed, we do not need this if-case and instead\n     * can rely on .getRangeBatch() in all cases.\n     */\n    if (lowerBoundString === upperBoundString) {\n        const singleDocResult = await kv.get([instance.keySpace, indexMeta.indexId, lowerBoundString], instance.kvOptions);\n        if (singleDocResult.value) {\n            const docId: string = singleDocResult.value;\n            const docDataResult = await kv.get([instance.keySpace, DENOKV_DOCUMENT_ROOT_PATH, docId], instance.kvOptions);\n            const docData = ensureNotFalsy(docDataResult.value);\n            if (!queryMatcher || queryMatcher(docData)) {\n                result.push(docData);\n            }\n        }\n        return {\n            documents: result\n        };\n    }\n\n    const range = kv.list({\n        start: [instance.keySpace, indexMeta.indexId, lowerBoundString],\n        end: [instance.keySpace, indexMeta.indexId, upperBoundString]\n    }, {\n        consistency: instance.settings.consistencyLevel,\n        limit: (!mustManuallyResort && queryPlan.selectorSatisfiedByIndex) ? skipPlusLimit : undefined,\n        batchSize: instance.settings.batchSize\n    });\n\n    for await (const indexDocEntry of range) {\n        const docId = indexDocEntry.value;\n        const docDataResult = await kv.get([instance.keySpace, DENOKV_DOCUMENT_ROOT_PATH, docId], instance.kvOptions);\n        const docData = ensureNotFalsy(docDataResult.value);\n        if (!queryMatcher || queryMatcher(docData)) {\n            result.push(docData);\n        }\n        if (\n            !mustManuallyResort &&\n            result.length === skipPlusLimit\n        ) {\n            break;\n        }\n    }\n\n    if (mustManuallyResort) {\n        const sortComparator = getSortComparator(instance.schema, preparedQuery.query);\n        result = result.sort(sortComparator);\n    }\n\n    // apply skip and limit boundaries.\n    result = result.slice(skip, skipPlusLimit);\n\n    return {\n        documents: result\n    };\n}\n"],"mappings":"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","ignoreList":[]}