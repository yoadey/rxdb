{"version":3,"file":"rx-state.js","names":["Subject","distinctUntilChanged","map","shareReplay","startWith","tap","zip","overwritable","getChangedDocumentsSince","RXJS_SHARE_REPLAY_DEFAULTS","getProperty","setProperty","PROMISE_RESOLVE_VOID","appendToArray","clone","randomCouchString","deepEqual","RX_STATE_COLLECTION_SCHEMA","nextRxStateId","newRxError","runPluginHooks","RxStateBase","prefix","collection","_state","_nonPersisted","_writeQueue","_initDone","_instanceId","properties","sId","maxLength","_ownEmits$","onDestroy","push","_lastIdQuery","findOne","sort","id","$","subscribe","pipe","event","operation","documentData","mergeOperationsIntoState","ops","_proto","prototype","set","path","modifier","_triggerWrite","then","length","useWrites","done","lastIdDoc","exec","nextId","undefined","newState","index","writeRow","value","newValue","k","v","insert","next","err","code","catch","error","name","get","deepFreezeWhenDevMode","get$","get$$","obs","reactivity","database","getReactivityFactory","fromObservable","_cleanup","firstWrite","lastWrite","firstNr","parseInt","lastNr","find","selector","$lte","remove","createRxState","collectionName","addCollections","schema","collections","rxState","checkpoint","result","storageInstance","documents","document","proxy","Proxy","target","property","ret","bind","lastChar","charAt","endsWith","key","slice","receiver","Error","state","operations"],"sources":["../../../../src/plugins/state/rx-state.ts"],"sourcesContent":["import {\n    Observable,\n    Subject,\n    distinctUntilChanged,\n    filter,\n    map,\n    merge,\n    shareReplay,\n    startWith,\n    tap,\n    zip\n} from 'rxjs';\nimport { overwritable } from '../../overwritable.ts';\nimport { getChangedDocumentsSince } from '../../rx-storage-helper.ts';\nimport type {\n    RxChangeEvent,\n    RxCollection,\n    RxDatabase,\n    RxQuery,\n    RxDocument,\n    RxError,\n    Paths\n} from '../../types';\nimport {\n    RXJS_SHARE_REPLAY_DEFAULTS,\n    getProperty,\n    setProperty,\n    PROMISE_RESOLVE_VOID,\n    appendToArray,\n    clone,\n    randomCouchString,\n    deepEqual\n} from '../utils/index.ts';\nimport {\n    RX_STATE_COLLECTION_SCHEMA,\n    nextRxStateId\n} from './helpers.ts';\nimport {\n    RxStateDocument,\n    RxStateOperation,\n    RxStateModifier\n} from './types.ts';\nimport { newRxError } from '../../rx-error.ts';\nimport { runPluginHooks } from '../../hooks.ts';\n\n\n/**\n * RxDB internally used properties are\n * prefixed with lodash _ to make them less\n * likely to clash with actual state properties\n * from the user.\n */\nexport class RxStateBase<T, Reactivity = unknown> {\n    public _state: T | any = {};\n    public $: Observable<T>;\n    public _lastIdQuery: RxQuery<RxStateDocument, RxDocument<RxStateDocument, {}> | null>;\n    public _nonPersisted: {\n        path: string;\n        modifier: RxStateModifier;\n    }[] = [];\n    public _writeQueue = PROMISE_RESOLVE_VOID;\n    public _initDone = false;\n    public _instanceId = randomCouchString(RX_STATE_COLLECTION_SCHEMA.properties.sId.maxLength);\n    public _ownEmits$ = new Subject<T>();\n\n    constructor(\n        public readonly prefix: string,\n        public readonly collection: RxCollection<RxStateDocument>\n    ) {\n        this.collection.onDestroy.push(() => this._writeQueue);\n        this._lastIdQuery = this.collection.findOne({\n            sort: [\n                { id: 'desc' }\n            ]\n        });\n        // make it \"hot\" for better write performance\n        this._lastIdQuery.$.subscribe();\n\n        this.$ = zip([\n            this._ownEmits$,\n            this.collection.$.pipe(\n                tap(event => {\n                    if (\n                        this._initDone &&\n                        event.operation === 'INSERT' &&\n                        event.documentData.sId !== this._instanceId\n                    ) {\n                        mergeOperationsIntoState(this._state, event.documentData.ops);\n                    }\n                })\n            )\n        ]).pipe(\n            shareReplay(RXJS_SHARE_REPLAY_DEFAULTS),\n            map(() => this._state)\n        );\n        // directly subscribe because of the tap() side effect\n        this.$.subscribe();\n    }\n\n    async set(\n        path: Paths<T> | '',\n        modifier: RxStateModifier\n    ) {\n        this._nonPersisted.push({\n            path,\n            modifier\n        });\n        return this._triggerWrite();\n    }\n\n    /**\n     * To have deterministic writes,\n     * and to ensure that multiple js realms do not overwrite\n     * each other, the write happens with incremental ids\n     * that would throw conflict errors and trigger a retry.\n     */\n    _triggerWrite() {\n        this._writeQueue = this._writeQueue.then(async () => {\n            if (this._nonPersisted.length === 0) {\n                return;\n            }\n            let useWrites: typeof this._nonPersisted = [];\n            let done = false;\n            while (!done) {\n                const lastIdDoc = await this._lastIdQuery.exec();\n                appendToArray(useWrites, this._nonPersisted);\n                this._nonPersisted = [];\n                const nextId = nextRxStateId(lastIdDoc ? lastIdDoc.id : undefined);\n                try {\n                    /**\n                     * TODO instead of a deep-clone we should\n                     * only clone the parts where we know that they\n                     * will be changed. This would improve performance.\n                     */\n                    const newState = clone(this._state);\n                    const ops: RxStateOperation[] = [];\n                    for (let index = 0; index < useWrites.length; index++) {\n                        const writeRow = useWrites[index];\n                        const value = getProperty(newState, writeRow.path);\n                        const newValue = writeRow.modifier(value);\n                        setProperty(newState, writeRow.path, newValue);\n                        ops.push({\n                            k: writeRow.path,\n                            /**\n                             * Here we have to clone the value because\n                             * some storages like the memory storage\n                             * make input data deep-frozen in dev-mode.\n                             */\n                            v: clone(newValue)\n                        });\n                    }\n                    await this.collection.insert({\n                        id: nextId,\n                        sId: this._instanceId,\n                        ops\n                    });\n                    this._state = newState;\n                    this._ownEmits$.next(this._state);\n                    done = true;\n                } catch (err) {\n                    if ((err as RxError).code !== 'CONFLICT') {\n                        throw err;\n                    }\n                }\n            }\n        }).catch(error => {\n            throw newRxError('SNH', {\n                name: 'RxState WRITE QUEUE ERROR',\n                error\n            });\n        });\n        return this._writeQueue;\n    }\n\n    get(path?: Paths<T>) {\n        if (!path) {\n            return overwritable.deepFreezeWhenDevMode(this._state);\n        }\n        return overwritable.deepFreezeWhenDevMode(\n            getProperty(this._state, path)\n        );\n    }\n    get$(path?: Paths<T>): Observable<any> {\n        return this.$.pipe(\n            map(() => this.get(path)),\n            startWith(this.get(path)),\n            distinctUntilChanged(deepEqual),\n            shareReplay(RXJS_SHARE_REPLAY_DEFAULTS),\n        );\n    }\n    get$$(path?: Paths<T>): Reactivity {\n        const obs = this.get$(path);\n        const reactivity = this.collection.database.getReactivityFactory();\n        return reactivity.fromObservable(\n            obs,\n            this.get(path),\n            this.collection.database\n        );\n    }\n\n    /**\n     * Merges the state operations into a single write row\n     * to store space and make recreating the state from\n     * disc faster.\n     */\n    async _cleanup() {\n        const firstWrite = await this.collection.findOne({\n            sort: [{ id: 'asc' }]\n        }).exec();\n        const lastWrite = await this._lastIdQuery.exec();\n\n        if (!firstWrite || !lastWrite) {\n            return;\n        }\n\n        const firstNr = parseInt(firstWrite.id, 10);\n        const lastNr = parseInt(lastWrite.id, 10);\n        if ((lastNr - 5) < firstNr) {\n            // only run if more then 5 write rows\n            return;\n        }\n\n        // update whole state object\n        await this._writeQueue;\n        await this.set('', () => this._state);\n\n        // delete old ones\n        await this.collection.find({\n            selector: {\n                id: {\n                    $lte: lastWrite.id\n                }\n            }\n        }).remove();\n    }\n}\n\n\nexport async function createRxState<T>(\n    database: RxDatabase,\n    prefix: string\n): Promise<RxStateBase<T>> {\n    const collectionName = 'rx-state-' + prefix;\n    await database.addCollections({\n        [collectionName]: {\n            schema: RX_STATE_COLLECTION_SCHEMA as any\n        }\n    });\n    const collection: RxCollection<RxStateDocument> = database.collections[collectionName];\n\n    const rxState = new RxStateBase<T>(\n        prefix,\n        collection\n    );\n\n\n    /**\n     * Directly get the state and put it into memory.\n     * This ensures we can do non-async accesses to the\n     * correct state.\n     */\n    let done = false;\n    let checkpoint: any = undefined;\n    while (!done) {\n        const result = await getChangedDocumentsSince<RxStateDocument, any>(\n            collection.storageInstance,\n            1000,\n            checkpoint\n        );\n        checkpoint = result.checkpoint;\n        const documents = result.documents;\n        if (documents.length === 0) {\n            done = true;\n        } else {\n            for (let index = 0; index < documents.length; index++) {\n                const document = documents[index];\n                mergeOperationsIntoState(rxState._state, document.ops);\n            }\n        }\n    }\n    rxState._initDone = true;\n\n    const proxy = new Proxy(\n        rxState as any,\n        {\n            get(target, property: any) {\n                if (typeof property !== 'string') {\n                    return target[property];\n                }\n                if ((rxState as any)[property]) {\n                    const ret = (rxState as any)[property];\n                    if (typeof ret === 'function') {\n                        return ret.bind(rxState);\n                    } else {\n                        return ret;\n                    }\n                }\n                const lastChar = property.charAt(property.length - 1);\n                if (property.endsWith('$$')) {\n                    const key = property.slice(0, -2);\n                    return rxState.get$$(key as any);\n                } else if (lastChar === '$') {\n                    const key = property.slice(0, -1);\n                    return rxState.get$(key as any);\n                } else {\n                    return rxState.get(property as any);\n                }\n            },\n            set(target, newValue, receiver) {\n                throw new Error('Do not write to RxState');\n            }\n        }\n    );\n\n    runPluginHooks('createRxState', {\n        collection,\n        state: proxy\n    });\n\n    return proxy;\n}\n\n\nexport function mergeOperationsIntoState<T>(\n    state: T,\n    operations: RxStateOperation[]\n) {\n    for (let index = 0; index < operations.length; index++) {\n        const operation = operations[index];\n        setProperty(state, operation.k, clone(operation.v));\n    }\n}\n"],"mappings":"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","ignoreList":[]}