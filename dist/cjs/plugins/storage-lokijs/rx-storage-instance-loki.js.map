{"version":3,"file":"rx-storage-instance-loki.js","names":["_rxjs","require","_index","_rxError","_lokijsHelper","_rxSchemaHelper","_rxStorageHelper","_rxStorageMultiinstance","_rxQueryHelper","instanceId","now","RxStorageInstanceLoki","exports","databaseInstanceToken","storage","databaseName","collectionName","schema","internals","options","databaseSettings","changes$","Subject","primaryPath","getPrimaryFieldOfPrimaryKey","primaryKey","OPEN_LOKIJS_STORAGE_INSTANCES","add","leaderElector","copiedSelf","bulkWrite","bind","changeStream","cleanup","close","query","count","findDocumentsById","conflictResultionTasks","getAttachmentData","remove","resolveConflictResultionTask","awaitLeadership","then","ensureNotFalsy","broadcastChannel","addEventListener","msg","handleRemoteRequest","catch","_proto","prototype","documentWrites","context","length","newRxError","args","localState","mustUseLocalState","requestRemoteInstance","ret","success","error","docsInDb","Map","docsInDbWithLokiKey","forEach","writeRow","id","document","documentInDb","collection","by","set","stripLokiKey","categorized","categorizeBulkWriteRows","errors","bulkInsertDocs","insert","flatClone","push","bulkUpdateDocs","docId","documentInDbWithLokiKey","getFromMapOrThrow","writeDoc","Object","assign","$loki","update","databaseState","saveQueue","addWrite","eventBulk","events","lastState","newestRow","checkpoint","lwt","_meta","endTime","next","ids","deleted","_deleted","preparedQueryOriginal","preparedQuery","selector","transformRegexToRegExp","skip","limit","Infinity","skipPlusLimit","mustRunMatcher","hasDeepProperty","lokiQuery","chain","find","sort","getLokiSortComparator","foundDocuments","data","map","lokiDoc","queryMatcher","getQueryMatcher","filter","d","slice","documents","result","mode","_documentId","_attachmentId","_digest","Error","asObservable","minimumDeletedTime","deleteAmountPerRun","maxDeletionTime","$lt","closed","complete","delete","dbState","getLokiDatabase","run","closeLokiCollections","database","removeCollection","name","_taskSolution","createLokiLocalState","params","indices","indexes","idx","isMaybeReadonlyArray","lokiCollectionName","version","collectionOptions","unique","LOKIJS_COLLECTION_DEFAULT_OPTIONS","addCollection","collections","createLokiStorageInstance","broadcastChannelRefObject","multiInstance","getLokiLeaderElector","instance","addRxStorageMultiInstanceSupport","RX_STORAGE_NAME_LOKIJS","undefined","closeBefore","removeBroadcastChannelReference","removeBefore"],"sources":["../../../../src/plugins/storage-lokijs/rx-storage-instance-loki.ts"],"sourcesContent":["import {\n    Subject,\n    Observable\n} from 'rxjs';\nimport {\n    flatClone,\n    now,\n    ensureNotFalsy,\n    isMaybeReadonlyArray,\n    getFromMapOrThrow,\n    hasDeepProperty\n} from '../utils/index.ts';\nimport { newRxError } from '../../rx-error.ts';\nimport type {\n    RxStorageInstance,\n    LokiSettings,\n    RxStorageChangeEvent,\n    RxDocumentData,\n    BulkWriteRow,\n    RxStorageBulkWriteResponse,\n    RxStorageQueryResult,\n    RxJsonSchema,\n    MangoQuery,\n    LokiStorageInternals,\n    RxStorageInstanceCreationParams,\n    LokiDatabaseSettings,\n    LokiLocalDatabaseState,\n    EventBulk,\n    StringKeys,\n    DeepReadonly,\n    RxConflictResultionTask,\n    RxConflictResultionTaskSolution,\n    RxStorageDefaultCheckpoint,\n    RxStorageCountResult,\n    PreparedQuery\n} from '../../types/index.d.ts';\nimport {\n    closeLokiCollections,\n    getLokiDatabase,\n    OPEN_LOKIJS_STORAGE_INSTANCES,\n    LOKIJS_COLLECTION_DEFAULT_OPTIONS,\n    stripLokiKey,\n    getLokiSortComparator,\n    getLokiLeaderElector,\n    requestRemoteInstance,\n    mustUseLocalState,\n    handleRemoteRequest,\n    RX_STORAGE_NAME_LOKIJS,\n    transformRegexToRegExp\n} from './lokijs-helper.ts';\nimport type { RxStorageLoki } from './rx-storage-lokijs.ts';\nimport { getPrimaryFieldOfPrimaryKey } from '../../rx-schema-helper.ts';\nimport { categorizeBulkWriteRows } from '../../rx-storage-helper.ts';\nimport {\n    addRxStorageMultiInstanceSupport,\n    removeBroadcastChannelReference\n} from '../../rx-storage-multiinstance.ts';\nimport { getQueryMatcher } from '../../rx-query-helper.ts';\n\nlet instanceId = now();\n\nexport class RxStorageInstanceLoki<RxDocType> implements RxStorageInstance<\n    RxDocType,\n    LokiStorageInternals,\n    LokiSettings,\n    RxStorageDefaultCheckpoint\n> {\n\n    public readonly primaryPath: StringKeys<RxDocumentData<RxDocType>>;\n    private changes$: Subject<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint>> = new Subject();\n    public readonly instanceId = instanceId++;\n\n    public closed?: Promise<void>;\n\n    constructor(\n        public readonly databaseInstanceToken: string,\n        public readonly storage: RxStorageLoki,\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly schema: Readonly<RxJsonSchema<RxDocumentData<RxDocType>>>,\n        public readonly internals: LokiStorageInternals,\n        public readonly options: Readonly<LokiSettings>,\n        public readonly databaseSettings: LokiDatabaseSettings\n    ) {\n        this.primaryPath = getPrimaryFieldOfPrimaryKey(this.schema.primaryKey);\n        OPEN_LOKIJS_STORAGE_INSTANCES.add(this);\n        if (this.internals.leaderElector) {\n\n\n            /**\n             * To run handleRemoteRequest(),\n             * the instance will call its own methods.\n             * But these methods could have already been swapped out by a RxStorageWrapper\n             * so we must store the original methods here and use them instead.\n             */\n            const copiedSelf: RxStorageInstance<RxDocType, any, any> = {\n                bulkWrite: this.bulkWrite.bind(this),\n                changeStream: this.changeStream.bind(this),\n                cleanup: this.cleanup.bind(this),\n                close: this.close.bind(this),\n                query: this.query.bind(this),\n                count: this.count.bind(this),\n                findDocumentsById: this.findDocumentsById.bind(this),\n                collectionName: this.collectionName,\n                databaseName: this.databaseName,\n                conflictResultionTasks: this.conflictResultionTasks.bind(this),\n                getAttachmentData: this.getAttachmentData.bind(this),\n                internals: this.internals,\n                options: this.options,\n                remove: this.remove.bind(this),\n                resolveConflictResultionTask: this.resolveConflictResultionTask.bind(this),\n                schema: this.schema\n            };\n\n            this.internals.leaderElector.awaitLeadership().then(() => {\n                // this instance is leader now, so it has to reply to queries from other instances\n                ensureNotFalsy(this.internals.leaderElector).broadcastChannel\n                    .addEventListener('message', (msg) => handleRemoteRequest(copiedSelf as any, msg));\n            }).catch(() => { });\n        }\n    }\n\n    async bulkWrite(\n        documentWrites: BulkWriteRow<RxDocType>[],\n        context: string\n    ): Promise<RxStorageBulkWriteResponse<RxDocType>> {\n        if (documentWrites.length === 0) {\n            throw newRxError('P2', {\n                args: {\n                    documentWrites\n                }\n            });\n        }\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'bulkWrite', [documentWrites]);\n        }\n\n        const ret: RxStorageBulkWriteResponse<RxDocType> = {\n            success: [],\n            error: []\n        };\n\n        const docsInDb: Map<RxDocumentData<RxDocType>[StringKeys<RxDocType>], RxDocumentData<RxDocType>> = new Map();\n        const docsInDbWithLokiKey: Map<\n            RxDocumentData<RxDocType>[StringKeys<RxDocType>],\n            RxDocumentData<RxDocType> & { $loki: number; }\n        > = new Map();\n        documentWrites.forEach(writeRow => {\n            const id = writeRow.document[this.primaryPath];\n            const documentInDb = localState.collection.by(this.primaryPath, id);\n            if (documentInDb) {\n                docsInDbWithLokiKey.set(id as any, documentInDb);\n                docsInDb.set(id as any, stripLokiKey(documentInDb));\n            }\n        });\n\n        const categorized = categorizeBulkWriteRows<RxDocType>(\n            this,\n            this.primaryPath as any,\n            docsInDb,\n            documentWrites,\n            context\n        );\n        ret.error = categorized.errors;\n\n        categorized.bulkInsertDocs.forEach(writeRow => {\n            localState.collection.insert(flatClone(writeRow.document));\n            ret.success.push(writeRow.document);\n        });\n        categorized.bulkUpdateDocs.forEach(writeRow => {\n            const docId = writeRow.document[this.primaryPath];\n            const documentInDbWithLokiKey = getFromMapOrThrow(docsInDbWithLokiKey, docId as any);\n            const writeDoc: any = Object.assign(\n                {},\n                writeRow.document,\n                {\n                    $loki: documentInDbWithLokiKey.$loki\n                }\n            );\n            localState.collection.update(writeDoc);\n            ret.success.push(writeRow.document);\n        });\n        localState.databaseState.saveQueue.addWrite();\n\n        if (categorized.eventBulk.events.length > 0) {\n            const lastState = ensureNotFalsy(categorized.newestRow).document;\n            categorized.eventBulk.checkpoint = {\n                id: lastState[this.primaryPath],\n                lwt: lastState._meta.lwt\n            };\n            categorized.eventBulk.endTime = now();\n            this.changes$.next(categorized.eventBulk);\n        }\n\n        return ret;\n    }\n    async findDocumentsById(ids: string[], deleted: boolean): Promise<RxDocumentData<RxDocType>[]> {\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'findDocumentsById', [ids, deleted]);\n        }\n\n        const ret: RxDocumentData<RxDocType>[] = [];\n        ids.forEach(id => {\n            const documentInDb = localState.collection.by(this.primaryPath, id);\n            if (\n                documentInDb &&\n                (!documentInDb._deleted || deleted)\n            ) {\n                ret.push(stripLokiKey(documentInDb));\n            }\n        });\n        return ret;\n    }\n    async query(preparedQueryOriginal: PreparedQuery<RxDocType>): Promise<RxStorageQueryResult<RxDocType>> {\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'query', [preparedQueryOriginal]);\n        }\n\n        let preparedQuery = ensureNotFalsy(preparedQueryOriginal.query);\n        if (preparedQuery.selector) {\n            preparedQuery = flatClone(preparedQuery);\n            preparedQuery.selector = transformRegexToRegExp(preparedQuery.selector);\n        }\n\n        const query = preparedQueryOriginal.query;\n        const skip = query.skip ? query.skip : 0;\n        const limit = query.limit ? query.limit : Infinity;\n        const skipPlusLimit = skip + limit;\n\n        /**\n         * LokiJS is not able to give correct results for some\n         * operators, so we have to check all documents in that case\n         * and laster apply skip and limit manually.\n         * @link https://github.com/pubkey/rxdb/issues/5320\n         */\n        let mustRunMatcher = false;\n        if (hasDeepProperty(preparedQuery.selector, '$in')) {\n            mustRunMatcher = true;\n        }\n\n\n        let lokiQuery = localState.collection\n            .chain()\n            .find(mustRunMatcher ? {} : preparedQuery.selector);\n\n        if (preparedQuery.sort) {\n            lokiQuery = lokiQuery.sort(getLokiSortComparator(this.schema, preparedQuery));\n        }\n\n\n        let foundDocuments = lokiQuery.data().map((lokiDoc: any) => stripLokiKey(lokiDoc));\n\n\n        /**\n         * LokiJS returned wrong results on some queries\n         * with complex indexes. Therefore we run the query-match\n         * over all result docs to patch this bug.\n         * TODO create an issue at the LokiJS repository.\n         */\n        const queryMatcher = getQueryMatcher(\n            this.schema,\n            preparedQuery as any\n        );\n        foundDocuments = foundDocuments.filter((d: any) => queryMatcher(d));\n\n        // always apply offset and limit like this, because\n        // sylvieQuery.offset() and sylvieQuery.limit() results were inconsistent\n        foundDocuments = foundDocuments.slice(skip, skipPlusLimit);\n\n        return {\n            documents: foundDocuments\n        };\n    }\n    async count(\n        preparedQuery: PreparedQuery<RxDocType>\n    ): Promise<RxStorageCountResult> {\n        const result = await this.query(preparedQuery);\n        return {\n            count: result.documents.length,\n            mode: 'fast'\n        };\n    }\n    getAttachmentData(_documentId: string, _attachmentId: string, _digest: string): Promise<string> {\n        throw new Error('Attachments are not implemented in the lokijs RxStorage. Make a pull request.');\n    }\n\n    changeStream(): Observable<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint>> {\n        return this.changes$.asObservable();\n    }\n\n    async cleanup(minimumDeletedTime: number): Promise<boolean> {\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'cleanup', [minimumDeletedTime]);\n        }\n\n        const deleteAmountPerRun = 10;\n        const maxDeletionTime = now() - minimumDeletedTime;\n        const query = localState.collection\n            .chain()\n            .find({\n                _deleted: true,\n                '_meta.lwt': {\n                    $lt: maxDeletionTime\n                }\n            }).limit(deleteAmountPerRun);\n        const foundDocuments = query.data();\n        if (foundDocuments.length > 0) {\n            localState.collection.remove(foundDocuments);\n            localState.databaseState.saveQueue.addWrite();\n        }\n\n        return foundDocuments.length !== deleteAmountPerRun;\n    }\n\n    async close(): Promise<void> {\n        if (this.closed) {\n            return this.closed;\n        }\n        this.closed = (async () => {\n            this.changes$.complete();\n            OPEN_LOKIJS_STORAGE_INSTANCES.delete(this);\n            if (this.internals.localState) {\n                const localState = await this.internals.localState;\n                const dbState = await getLokiDatabase(\n                    this.databaseName,\n                    this.databaseSettings\n                );\n                await dbState.saveQueue.run();\n                await closeLokiCollections(\n                    this.databaseName,\n                    [\n                        localState.collection\n                    ]\n                );\n            }\n        })();\n        return this.closed;\n    }\n    async remove(): Promise<void> {\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'remove', []);\n        }\n        localState.databaseState.database.removeCollection(localState.collection.name);\n        await localState.databaseState.saveQueue.run();\n        return this.close();\n    }\n\n    conflictResultionTasks(): Observable<RxConflictResultionTask<RxDocType>> {\n        return new Subject();\n    }\n    async resolveConflictResultionTask(_taskSolution: RxConflictResultionTaskSolution<RxDocType>): Promise<void> { }\n\n}\n\nexport async function createLokiLocalState<RxDocType>(\n    params: RxStorageInstanceCreationParams<RxDocType, LokiSettings>,\n    databaseSettings: LokiDatabaseSettings\n): Promise<LokiLocalDatabaseState> {\n    if (!params.options) {\n        params.options = {};\n    }\n\n    const databaseState = await getLokiDatabase(\n        params.databaseName,\n        databaseSettings\n    );\n\n    /**\n     * Construct loki indexes from RxJsonSchema indexes.\n     * TODO what about compound indexes? Are they possible in lokijs?\n     */\n    const indices: string[] = [];\n    if (params.schema.indexes) {\n        params.schema.indexes.forEach(idx => {\n            if (!isMaybeReadonlyArray(idx)) {\n                indices.push(idx);\n            }\n        });\n    }\n    /**\n     * LokiJS has no concept of custom primary key, they use a number-id that is generated.\n     * To be able to query fast by primary key, we always add an index to the primary.\n     */\n    const primaryKey = getPrimaryFieldOfPrimaryKey(params.schema.primaryKey);\n    indices.push(primaryKey as string);\n\n    const lokiCollectionName = params.collectionName + '-' + params.schema.version;\n    const collectionOptions: Partial<any> = Object.assign(\n        {},\n        lokiCollectionName,\n        {\n            indices: indices as string[],\n            unique: [primaryKey]\n        } as any,\n        LOKIJS_COLLECTION_DEFAULT_OPTIONS\n    );\n\n    const collection: any = databaseState.database.addCollection(\n        lokiCollectionName,\n        collectionOptions as any\n    );\n    databaseState.collections[params.collectionName] = collection;\n    const ret: LokiLocalDatabaseState = {\n        databaseState,\n        collection\n    };\n\n    return ret;\n}\n\n\nexport async function createLokiStorageInstance<RxDocType>(\n    storage: RxStorageLoki,\n    params: RxStorageInstanceCreationParams<RxDocType, LokiSettings>,\n    databaseSettings: LokiDatabaseSettings\n): Promise<RxStorageInstanceLoki<RxDocType>> {\n    const internals: LokiStorageInternals = {};\n\n    const broadcastChannelRefObject: DeepReadonly<any> = {};\n\n\n    if (params.multiInstance) {\n        const leaderElector = getLokiLeaderElector(\n            params.databaseInstanceToken,\n            broadcastChannelRefObject,\n            params.databaseName\n        );\n        internals.leaderElector = leaderElector;\n    } else {\n        // optimisation shortcut, directly create db is non multi instance.\n        internals.localState = createLokiLocalState(params, databaseSettings);\n        await internals.localState;\n    }\n\n    const instance = new RxStorageInstanceLoki(\n        params.databaseInstanceToken,\n        storage,\n        params.databaseName,\n        params.collectionName,\n        params.schema,\n        internals,\n        params.options,\n        databaseSettings\n    );\n\n    await addRxStorageMultiInstanceSupport(\n        RX_STORAGE_NAME_LOKIJS,\n        params,\n        instance,\n        internals.leaderElector ? internals.leaderElector.broadcastChannel : undefined\n    );\n\n    if (params.multiInstance) {\n        /**\n         * Clean up the broadcast-channel reference on close()\n         */\n        const closeBefore = instance.close.bind(instance);\n        instance.close = function () {\n            removeBroadcastChannelReference(\n                params.databaseInstanceToken,\n                broadcastChannelRefObject\n            );\n            return closeBefore();\n        };\n        const removeBefore = instance.remove.bind(instance);\n        instance.remove = function () {\n            removeBroadcastChannelReference(\n                params.databaseInstanceToken,\n                broadcastChannelRefObject\n            );\n            return removeBefore();\n        };\n\n        /**\n         * Directly create the localState when/if the db becomes leader.\n         */\n        ensureNotFalsy(internals.leaderElector)\n            .awaitLeadership()\n            .then(() => {\n                if (!instance.closed) {\n                    mustUseLocalState(instance);\n                }\n            });\n    }\n\n\n    return instance;\n}\n"],"mappings":"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","ignoreList":[]}