{"version":3,"file":"check-migration-strategies.js","names":["newRxTypeError","newRxError","getPreviousVersions","checkMigrationStrategies","schema","migrationStrategies","Array","isArray","previousVersions","length","Object","keys","have","should","map","vNr","v","s","filter","strategy","forEach","version","type"],"sources":["../../../../src/plugins/dev-mode/check-migration-strategies.ts"],"sourcesContent":["import type { RxJsonSchema, NumberFunctionMap } from '../../types/index.d.ts';\nimport { newRxTypeError, newRxError } from '../../rx-error.ts';\nimport { getPreviousVersions } from '../../rx-schema.ts';\n\n\n/**\n * checks if the migrationStrategies are ok, throws if not\n * @throws {Error|TypeError} if not ok\n */\nexport function checkMigrationStrategies(\n    schema: RxJsonSchema<any>,\n    migrationStrategies: NumberFunctionMap\n): boolean {\n    // migrationStrategies must be object not array\n    if (\n        typeof migrationStrategies !== 'object' ||\n        Array.isArray(migrationStrategies)\n    ) {\n        throw newRxTypeError('COL11', {\n            schema\n        });\n    }\n\n    const previousVersions = getPreviousVersions(schema);\n\n    // for every previousVersion there must be strategy\n    if (\n        previousVersions.length !== Object\n            .keys(migrationStrategies).length\n    ) {\n        throw newRxError('COL12', {\n            have: Object.keys(migrationStrategies),\n            should: previousVersions\n        });\n    }\n\n    // every strategy must have number as property and be a function\n    previousVersions\n        .map(vNr => ({\n            v: vNr,\n            s: migrationStrategies[(vNr + 1)]\n        }))\n        .filter(strategy => typeof strategy.s !== 'function')\n        .forEach(strategy => {\n            throw newRxTypeError('COL13', {\n                version: strategy.v,\n                type: typeof strategy,\n                schema\n            });\n        });\n\n    return true;\n}\n"],"mappings":"AACA,SAASA,cAAc,EAAEC,UAAU,QAAQ,mBAAmB;AAC9D,SAASC,mBAAmB,QAAQ,oBAAoB;;AAGxD;AACA;AACA;AACA;AACA,OAAO,SAASC,wBAAwBA,CACpCC,MAAyB,EACzBC,mBAAsC,EAC/B;EACP;EACA,IACI,OAAOA,mBAAmB,KAAK,QAAQ,IACvCC,KAAK,CAACC,OAAO,CAACF,mBAAmB,CAAC,EACpC;IACE,MAAML,cAAc,CAAC,OAAO,EAAE;MAC1BI;IACJ,CAAC,CAAC;EACN;EAEA,IAAMI,gBAAgB,GAAGN,mBAAmB,CAACE,MAAM,CAAC;;EAEpD;EACA,IACII,gBAAgB,CAACC,MAAM,KAAKC,MAAM,CAC7BC,IAAI,CAACN,mBAAmB,CAAC,CAACI,MAAM,EACvC;IACE,MAAMR,UAAU,CAAC,OAAO,EAAE;MACtBW,IAAI,EAAEF,MAAM,CAACC,IAAI,CAACN,mBAAmB,CAAC;MACtCQ,MAAM,EAAEL;IACZ,CAAC,CAAC;EACN;;EAEA;EACAA,gBAAgB,CACXM,GAAG,CAACC,GAAG,KAAK;IACTC,CAAC,EAAED,GAAG;IACNE,CAAC,EAAEZ,mBAAmB,CAAEU,GAAG,GAAG,CAAC;EACnC,CAAC,CAAC,CAAC,CACFG,MAAM,CAACC,QAAQ,IAAI,OAAOA,QAAQ,CAACF,CAAC,KAAK,UAAU,CAAC,CACpDG,OAAO,CAACD,QAAQ,IAAI;IACjB,MAAMnB,cAAc,CAAC,OAAO,EAAE;MAC1BqB,OAAO,EAAEF,QAAQ,CAACH,CAAC;MACnBM,IAAI,EAAE,OAAOH,QAAQ;MACrBf;IACJ,CAAC,CAAC;EACN,CAAC,CAAC;EAEN,OAAO,IAAI;AACf","ignoreList":[]}