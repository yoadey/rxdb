{"version":3,"file":"foundationdb-query.js","names":["_customIndex","require","_index","_foundationdbHelpers","_rxQueryHelper","queryFoundationDB","instance","preparedQuery","queryPlan","query","skip","limit","Infinity","skipPlusLimit","queryPlanFields","index","mustManuallyResort","sortSatisfiedByIndex","queryMatcher","selectorSatisfiedByIndex","getQueryMatcher","schema","dbs","internals","dbsPromise","indexForName","slice","indexName","getFoundationDBIndexName","indexDB","ensureNotFalsy","indexes","db","lowerBound","startKeys","lowerBoundString","getStartIndexStringFromLowerBound","upperBound","endKeys","upperBoundString","getStartIndexStringFromUpperBound","result","root","doTransaction","tx","innerResult","indexTx","at","subspace","mainTx","main","docId","get","docData","push","inclusiveStart","changeIndexableStringByOneQuantum","inclusiveEnd","range","getRangeBatch","done","next","rows","value","firstRow","shift","lastRow","lastOfArray","pop","docIds","map","row","docsData","Promise","all","forEach","length","return","sortComparator","getSortComparator","sort","documents"],"sources":["../../../../src/plugins/storage-foundationdb/foundationdb-query.ts"],"sourcesContent":["import {\n    changeIndexableStringByOneQuantum,\n    getStartIndexStringFromLowerBound,\n    getStartIndexStringFromUpperBound\n} from '../../custom-index.ts';\nimport type {\n    PreparedQuery,\n    QueryMatcher,\n    RxDocumentData,\n    RxStorageQueryResult\n} from '../../types/index.d.ts';\nimport { ensureNotFalsy, lastOfArray } from '../../plugins/utils/index.ts';\nimport { getFoundationDBIndexName } from './foundationdb-helpers.ts';\nimport { RxStorageInstanceFoundationDB } from './rx-storage-instance-foundationdb.ts';\nimport { getQueryMatcher, getSortComparator } from '../../rx-query-helper.ts';\n\nexport async function queryFoundationDB<RxDocType>(\n    instance: RxStorageInstanceFoundationDB<RxDocType>,\n    preparedQuery: PreparedQuery<RxDocType>\n): Promise<RxStorageQueryResult<RxDocType>> {\n    const queryPlan = preparedQuery.queryPlan;\n    const query = preparedQuery.query;\n    const skip = query.skip ? query.skip : 0;\n    const limit = query.limit ? query.limit : Infinity;\n    const skipPlusLimit = skip + limit;\n    const queryPlanFields: string[] = queryPlan.index;\n    const mustManuallyResort = !queryPlan.sortSatisfiedByIndex;\n\n\n    let queryMatcher: QueryMatcher<RxDocumentData<RxDocType>> | false = false;\n    if (!queryPlan.selectorSatisfiedByIndex) {\n        queryMatcher = getQueryMatcher(\n            instance.schema,\n            preparedQuery.query\n        );\n    }\n\n    const dbs = await instance.internals.dbsPromise;\n\n\n    const indexForName = queryPlanFields.slice(0);\n    const indexName = getFoundationDBIndexName(indexForName);\n    const indexDB = ensureNotFalsy(dbs.indexes[indexName]).db;\n\n    let lowerBound: any[] = queryPlan.startKeys;\n    let lowerBoundString = getStartIndexStringFromLowerBound(\n        instance.schema,\n        indexForName,\n        lowerBound\n    );\n\n    let upperBound: any[] = queryPlan.endKeys;\n    let upperBoundString = getStartIndexStringFromUpperBound(\n        instance.schema,\n        indexForName,\n        upperBound\n    );\n    let result: RxDocumentData<RxDocType>[] = await dbs.root.doTransaction(async (tx: any) => {\n        const innerResult: RxDocumentData<RxDocType>[] = [];\n        const indexTx = tx.at(indexDB.subspace);\n        const mainTx = tx.at(dbs.main.subspace);\n\n\n        /**\n         * TODO for whatever reason the keySelectors like firstGreaterThan etc.\n         * do not work properly. So we have to hack here to find the correct\n         * document in case lowerBoundString===upperBoundString.\n         * This likely must be fixed in the foundationdb library.\n         * When it is fixed, we do not need this if-case and instead\n         * can rely on .getRangeBatch() in all cases.\n         */\n        if (lowerBoundString === upperBoundString) {\n            const docId: string = await indexTx.get(lowerBoundString);\n            if (docId) {\n                const docData = await mainTx.get(docId);\n                if (!queryMatcher || queryMatcher(docData)) {\n                    innerResult.push(docData);\n                }\n            }\n            return innerResult;\n        }\n\n        if (!queryPlan.inclusiveStart) {\n            lowerBoundString = changeIndexableStringByOneQuantum(lowerBoundString, 1);\n        }\n        if (queryPlan.inclusiveEnd) {\n            upperBoundString = changeIndexableStringByOneQuantum(upperBoundString, +1);\n        }\n\n        const range = indexTx.getRangeBatch(\n            lowerBoundString,\n            upperBoundString,\n            // queryPlan.inclusiveStart ? keySelector.firstGreaterThan(lowerBoundString) : keySelector.firstGreaterOrEqual(lowerBoundString),\n            // queryPlan.inclusiveEnd ? keySelector.lastLessOrEqual(upperBoundString) : keySelector.lastLessThan(upperBoundString),\n            {\n                // TODO these options seem to be broken in the foundationdb node bindings\n                // limit: instance.settings.batchSize,\n                // streamingMode: StreamingMode.Exact\n            }\n        );\n        let done = false;\n        while (!done) {\n            const next = await range.next();\n            if (next.done) {\n                done = true;\n                break;\n            }\n            const rows: [string, string] = next.value;\n\n            if (!queryPlan.inclusiveStart) {\n                const firstRow = rows[0];\n                if (\n                    firstRow &&\n                    firstRow[0] === lowerBoundString\n                ) {\n                    rows.shift();\n                }\n            }\n            if (!queryPlan.inclusiveEnd) {\n                const lastRow = lastOfArray(rows);\n                if (\n                    lastRow &&\n                    lastRow[0] === upperBoundString\n                ) {\n                    rows.pop();\n                }\n            }\n\n            const docIds = rows.map(row => row[1]);\n            const docsData: RxDocumentData<RxDocType>[] = await Promise.all(docIds.map((docId: string) => mainTx.get(docId)));\n\n            docsData.forEach((docData) => {\n                if (!done) {\n                    if (!queryMatcher || queryMatcher(docData)) {\n                        innerResult.push(docData);\n                    }\n                }\n                if (\n                    !mustManuallyResort &&\n                    innerResult.length === skipPlusLimit\n                ) {\n                    done = true;\n                    range.return();\n                }\n            });\n        }\n        return innerResult;\n    });\n    if (mustManuallyResort) {\n        const sortComparator = getSortComparator(instance.schema, preparedQuery.query);\n        result = result.sort(sortComparator);\n    }\n\n    // apply skip and limit boundaries.\n    result = result.slice(skip, skipPlusLimit);\n\n    return {\n        documents: result\n    };\n}\n"],"mappings":"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","ignoreList":[]}