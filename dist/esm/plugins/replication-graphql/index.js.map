{"version":3,"file":"index.js","names":["ensureNotFalsy","flatClone","getProperty","graphQLRequest","RxDBLeaderElectionPlugin","RxReplicationState","startReplicationOnLeaderShip","addRxPlugin","removeGraphQLWebSocketRef","getGraphQLWebSocket","Subject","RxGraphQLReplicationState","_RxReplicationState","url","clientState","replicationIdentifier","collection","deletedField","pull","push","live","retryTime","autoStart","customFetch","_this","call","_inheritsLoose","_proto","prototype","setHeaders","headers","setCredentials","credentials","queryParams","fetch","http","replicateGraphQL","waitForLeadership","mutateableClientState","pullStream$","replicationPrimitivesPull","pullBatchSize","batchSize","handler","lastPulledCheckpoint","pullGraphQL","queryBuilder","result","graphqlReplicationState","errors","dataPath","Object","keys","data","responseModifier","docsData","documents","newCheckpoint","checkpoint","modifier","stream$","asObservable","replicationPrimitivesPush","rows","pushObj","mustUseSocket","ws","streamQueryBuilder","startBefore","start","bind","httpHeaders","includeWsHeaders","undefined","wsClient","on","next","query","subscribe","streamResponse","firstField","error","complete","cancelBefore","cancel","isStopped"],"sources":["../../../../src/plugins/replication-graphql/index.ts"],"sourcesContent":["/**\n * this plugin adds the RxCollection.syncGraphQl()-function to rxdb\n * you can use it to sync collections with a remote graphql endpoint.\n */\nimport {\n    ensureNotFalsy,\n    flatClone,\n    getProperty\n} from '../../plugins/utils/index.ts';\n\nimport {\n    graphQLRequest\n} from './helper.ts';\n\nimport { RxDBLeaderElectionPlugin } from '../leader-election/index.ts';\nimport type {\n    RxCollection,\n    ReplicationPullOptions,\n    ReplicationPushOptions,\n    RxReplicationWriteToMasterRow,\n    GraphQLServerUrl,\n    RxReplicationPullStreamItem,\n    RxGraphQLReplicationQueryBuilderResponseObject,\n    RxGraphQLReplicationClientState,\n    ById\n} from '../../types/index.d.ts';\nimport {\n    RxReplicationState,\n    startReplicationOnLeaderShip\n} from '../replication/index.ts';\nimport {\n    addRxPlugin,\n    SyncOptionsGraphQL,\n    WithDeleted\n} from '../../index.ts';\n\nimport {\n    removeGraphQLWebSocketRef,\n    getGraphQLWebSocket\n} from './graphql-websocket.ts';\nimport { Subject } from 'rxjs';\n\n\n\n\nexport class RxGraphQLReplicationState<RxDocType, CheckpointType> extends RxReplicationState<RxDocType, CheckpointType> {\n    constructor(\n        public readonly url: GraphQLServerUrl,\n        public readonly clientState: RxGraphQLReplicationClientState,\n        public readonly replicationIdentifier: string,\n        public readonly collection: RxCollection<RxDocType>,\n        public readonly deletedField: string,\n        public readonly pull?: ReplicationPullOptions<RxDocType, CheckpointType>,\n        public readonly push?: ReplicationPushOptions<RxDocType>,\n        public readonly live?: boolean,\n        public retryTime?: number,\n        public autoStart?: boolean,\n        public readonly customFetch?: WindowOrWorkerGlobalScope['fetch']\n    ) {\n        super(\n            replicationIdentifier,\n            collection,\n            deletedField,\n            pull,\n            push,\n            live,\n            retryTime,\n            autoStart\n        );\n    }\n\n    setHeaders(headers: ById<string>): void {\n        this.clientState.headers = flatClone(headers);\n    }\n\n    setCredentials(credentials: RequestCredentials | undefined) {\n        this.clientState.credentials = credentials;\n    }\n\n    graphQLRequest(\n        queryParams: RxGraphQLReplicationQueryBuilderResponseObject\n    ) {\n        return graphQLRequest(\n            this.customFetch ?? fetch,\n            ensureNotFalsy(this.url.http),\n            this.clientState,\n            queryParams\n        );\n    }\n}\n\nexport function replicateGraphQL<RxDocType, CheckpointType>(\n    {\n        collection,\n        url,\n        headers = {},\n        credentials,\n        deletedField = '_deleted',\n        waitForLeadership = true,\n        pull,\n        push,\n        live = true,\n        fetch: customFetch,\n        retryTime = 1000 * 5, // in ms\n        autoStart = true,\n        replicationIdentifier\n    }: SyncOptionsGraphQL<RxDocType, CheckpointType>\n): RxGraphQLReplicationState<RxDocType, CheckpointType> {\n    addRxPlugin(RxDBLeaderElectionPlugin);\n    /**\n     * We use this object to store the GraphQL client\n     * so we can later swap out the client inside of the replication handlers.\n     */\n    const mutateableClientState = {\n        headers,\n        credentials\n    };\n\n\n    const pullStream$: Subject<RxReplicationPullStreamItem<RxDocType, CheckpointType>> = new Subject();\n\n    let replicationPrimitivesPull: ReplicationPullOptions<RxDocType, CheckpointType> | undefined;\n    if (pull) {\n        const pullBatchSize = pull.batchSize ? pull.batchSize : 20;\n        replicationPrimitivesPull = {\n            async handler(\n                lastPulledCheckpoint: CheckpointType | undefined\n            ) {\n                const pullGraphQL = await pull.queryBuilder(lastPulledCheckpoint, pullBatchSize);\n                const result = await graphqlReplicationState.graphQLRequest(pullGraphQL);\n                if (result.errors) {\n                    throw result.errors;\n                }\n                const dataPath = pull.dataPath || ['data', Object.keys(result.data)[0]];\n                let data: any = getProperty(result, dataPath);\n                if (pull.responseModifier) {\n                    data = await pull.responseModifier(\n                        data,\n                        'handler',\n                        lastPulledCheckpoint\n                    );\n                }\n\n                const docsData: WithDeleted<RxDocType>[] = data.documents;\n                const newCheckpoint = data.checkpoint;\n\n                return {\n                    documents: docsData,\n                    checkpoint: newCheckpoint\n                };\n            },\n            batchSize: pull.batchSize,\n            modifier: pull.modifier,\n            stream$: pullStream$.asObservable()\n        };\n    }\n    let replicationPrimitivesPush: ReplicationPushOptions<RxDocType> | undefined;\n    if (push) {\n        replicationPrimitivesPush = {\n            async handler(\n                rows: RxReplicationWriteToMasterRow<RxDocType>[]\n            ) {\n                const pushObj = await push.queryBuilder(rows);\n                const result = await graphqlReplicationState.graphQLRequest(pushObj);\n\n                if (result.errors) {\n                    throw result.errors;\n                }\n                const dataPath = push.dataPath || Object.keys(result.data)[0];\n                let data: any = getProperty(result.data, dataPath);\n\n                if (push.responseModifier) {\n                    data = await push.responseModifier(\n                        data,\n                    );\n                }\n\n                return data;\n            },\n            batchSize: push.batchSize,\n            modifier: push.modifier\n        };\n    }\n\n    const graphqlReplicationState = new RxGraphQLReplicationState(\n        url,\n        mutateableClientState,\n        replicationIdentifier,\n        collection,\n        deletedField,\n        replicationPrimitivesPull,\n        replicationPrimitivesPush,\n        live,\n        retryTime,\n        autoStart,\n        customFetch\n    );\n\n    const mustUseSocket = url.ws &&\n        pull &&\n        pull.streamQueryBuilder &&\n        live;\n\n    const startBefore = graphqlReplicationState.start.bind(graphqlReplicationState);\n    graphqlReplicationState.start = () => {\n        if (mustUseSocket) {\n            const httpHeaders = pull.includeWsHeaders ? mutateableClientState.headers : undefined;\n            const wsClient = getGraphQLWebSocket(ensureNotFalsy(url.ws), httpHeaders);\n\n            wsClient.on('connected', () => {\n                pullStream$.next('RESYNC');\n            });\n\n            const query: any = ensureNotFalsy(pull.streamQueryBuilder)(mutateableClientState.headers);\n\n            wsClient.subscribe(\n                query,\n                {\n                    next: async (streamResponse: any) => {\n                        const firstField = Object.keys(streamResponse.data)[0];\n                        let data = streamResponse.data[firstField];\n                        if (pull.responseModifier) {\n                            data = await pull.responseModifier(\n                                data,\n                                'stream'\n                            );\n                        }\n                        pullStream$.next(data);\n                    },\n                    error: (error: any) => {\n                        pullStream$.error(error);\n                    },\n                    complete: () => {\n                        pullStream$.complete();\n                    }\n                });\n        }\n        return startBefore();\n    };\n\n    const cancelBefore = graphqlReplicationState.cancel.bind(graphqlReplicationState);\n    graphqlReplicationState.cancel = () => {\n        if (!graphqlReplicationState.isStopped()) {\n            pullStream$.complete();\n            if (mustUseSocket) {\n                removeGraphQLWebSocketRef(ensureNotFalsy(url.ws));\n            }\n        }\n        return cancelBefore();\n    };\n\n    startReplicationOnLeaderShip(waitForLeadership, graphqlReplicationState);\n    return graphqlReplicationState;\n}\n\nexport * from './helper.ts';\nexport * from './graphql-schema-from-rx-schema.ts';\nexport * from './query-builder-from-rx-schema.ts';\nexport * from './graphql-websocket.ts';\n"],"mappings":"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","ignoreList":[]}