{"version":3,"file":"query-planner.js","names":["_index","require","_rxError","_rxSchemaHelper","INDEX_MAX","exports","String","fromCharCode","INDEX_MIN","Number","MIN_SAFE_INTEGER","getQueryPlan","schema","query","selector","indexes","slice","index","hasDescSorting","sort","find","sortField","Object","values","sortIrrelevevantFields","Set","keys","forEach","fieldName","schemaPart","getSchemaByObjectPath","type","prototype","hasOwnProperty","call","add","optimalSortIndex","map","optimalSortIndexCompareString","filter","f","has","join","currentBestQuality","currentBestQueryPlan","inclusiveEnd","inclusiveStart","opts","indexField","matcher","operators","matcherOpts","length","startKey","endKey","operator","LOGICAL_OPERATORS","operatorValue","partialOpts","getMatcherQueryOpts","assign","startKeys","opt","endKeys","queryPlan","sortSatisfiedByIndex","selectorSatisfiedByIndex","isSelectorSatisfiedByIndex","quality","rateQueryPlan","newRxError","LOWER_BOUND_LOGICAL_OPERATORS","UPPER_BOUND_LOGICAL_OPERATORS","selectorEntries","entries","hasNonMatchingOperator","operation","includes","hasNonLogicOperator","op","_value","$and","$or","satisfieldLowerBound","lowerOperatorFieldNames","lowerLogicOps","key","hasLowerLogicOp","push","satisfieldUpperBound","upperOperatorFieldNames","upperLogicOps","hasUperLogicOp","i","set","size","delete","Error","addQuality","value","pointsPerMatchingKey","nonMinKeyCount","countUntilNotMatching","keyValue","nonMaxKeyCount","equalKeyCount","idx","pointsIfNoReSortMustBeDone"],"sources":["../../src/query-planner.ts"],"sourcesContent":["import { countUntilNotMatching } from './plugins/utils/index.ts';\nimport { newRxError } from './rx-error.ts';\nimport { getSchemaByObjectPath } from './rx-schema-helper.ts';\nimport type {\n    FilledMangoQuery,\n    MangoQuerySelector,\n    RxDocumentData,\n    RxJsonSchema,\n    RxQueryPlan,\n    RxQueryPlanKey,\n    RxQueryPlanerOpts\n} from './types/index.d.ts';\n\nexport const INDEX_MAX = String.fromCharCode(65535);\n\n/**\n * Do not use -Infinity here because it would be\n * transformed to null on JSON.stringify() which can break things\n * when the query plan is send to the storage as json.\n * @link https://stackoverflow.com/a/16644751\n * Notice that for IndexedDB IDBKeyRange we have\n * to transform the value back to -Infinity\n * before we can use it in IDBKeyRange.bound.\n */\nexport const INDEX_MIN = Number.MIN_SAFE_INTEGER;\n\n/**\n * Returns the query plan which contains\n * information about how to run the query\n * and which indexes to use.\n *\n * This is used in some storage like Memory, dexie.js and IndexedDB.\n */\nexport function getQueryPlan<RxDocType>(\n    schema: RxJsonSchema<RxDocumentData<RxDocType>>,\n    query: FilledMangoQuery<RxDocType>\n): RxQueryPlan {\n    const selector = query.selector;\n\n    let indexes: string[][] = schema.indexes ? schema.indexes.slice(0) as any : [];\n    if (query.index) {\n        indexes = [query.index];\n    }\n\n    /**\n     * Most storages do not support descending indexes\n     * so having a 'desc' in the sorting, means we always have to re-sort the results.\n     */\n    const hasDescSorting = !!query.sort.find(sortField => Object.values(sortField)[0] === 'desc');\n\n    /**\n     * Some fields can be part of the selector while not being relevant for sorting\n     * because their selector operators specify that in all cases all matching docs\n     * would have the same value.\n     * For example the boolean field _deleted.\n     * TODO similar thing could be done for enums.\n     */\n    const sortIrrelevevantFields = new Set();\n    Object.keys(selector).forEach(fieldName => {\n        const schemaPart = getSchemaByObjectPath(schema, fieldName);\n        if (\n            schemaPart &&\n            schemaPart.type === 'boolean' &&\n            Object.prototype.hasOwnProperty.call((selector as any)[fieldName], '$eq')\n        ) {\n            sortIrrelevevantFields.add(fieldName);\n        }\n    });\n\n\n    const optimalSortIndex = query.sort.map(sortField => Object.keys(sortField)[0]);\n    const optimalSortIndexCompareString = optimalSortIndex\n        .filter(f => !sortIrrelevevantFields.has(f))\n        .join(',');\n\n    let currentBestQuality = -1;\n    let currentBestQueryPlan: RxQueryPlan | undefined;\n\n    /**\n     * Calculate one query plan for each index\n     * and then test which of the plans is best.\n     */\n    indexes.forEach((index) => {\n        let inclusiveEnd = true;\n        let inclusiveStart = true;\n        const opts: RxQueryPlanerOpts[] = index.map(indexField => {\n            const matcher = (selector as any)[indexField];\n            const operators = matcher ? Object.keys(matcher) : [];\n\n            let matcherOpts: RxQueryPlanerOpts = {} as any;\n            if (\n                !matcher ||\n                !operators.length\n            ) {\n                const startKey = inclusiveStart ? INDEX_MIN : INDEX_MAX;\n                matcherOpts = {\n                    startKey,\n                    endKey: inclusiveEnd ? INDEX_MAX : INDEX_MIN,\n                    inclusiveStart: true,\n                    inclusiveEnd: true\n                };\n            } else {\n                operators.forEach(operator => {\n                    if (LOGICAL_OPERATORS.has(operator)) {\n                        const operatorValue = matcher[operator];\n                        const partialOpts = getMatcherQueryOpts(operator, operatorValue);\n                        matcherOpts = Object.assign(matcherOpts, partialOpts);\n                    }\n                });\n            }\n\n            // fill missing attributes\n            if (typeof matcherOpts.startKey === 'undefined') {\n                matcherOpts.startKey = INDEX_MIN;\n            }\n            if (typeof matcherOpts.endKey === 'undefined') {\n                matcherOpts.endKey = INDEX_MAX;\n            }\n            if (typeof matcherOpts.inclusiveStart === 'undefined') {\n                matcherOpts.inclusiveStart = true;\n            }\n            if (typeof matcherOpts.inclusiveEnd === 'undefined') {\n                matcherOpts.inclusiveEnd = true;\n            }\n\n            if (inclusiveStart && !matcherOpts.inclusiveStart) {\n                inclusiveStart = false;\n            }\n            if (inclusiveEnd && !matcherOpts.inclusiveEnd) {\n                inclusiveEnd = false;\n            }\n\n            return matcherOpts;\n        });\n\n\n        const startKeys = opts.map(opt => opt.startKey);\n        const endKeys = opts.map(opt => opt.endKey);\n        const queryPlan: RxQueryPlan = {\n            index,\n            startKeys,\n            endKeys,\n            inclusiveEnd,\n            inclusiveStart,\n            sortSatisfiedByIndex: !hasDescSorting && optimalSortIndexCompareString === index.filter(f => !sortIrrelevevantFields.has(f)).join(','),\n            selectorSatisfiedByIndex: isSelectorSatisfiedByIndex(index, query.selector, startKeys, endKeys)\n        };\n        const quality = rateQueryPlan(\n            schema,\n            query,\n            queryPlan\n        );\n        if (\n            (\n                quality >= currentBestQuality\n            ) ||\n            query.index\n        ) {\n            currentBestQuality = quality;\n            currentBestQueryPlan = queryPlan;\n        }\n    });\n\n    /**\n     * In all cases and index must be found\n     */\n    if (!currentBestQueryPlan) {\n        throw newRxError('SNH', {\n            query\n        });\n    }\n\n    return currentBestQueryPlan;\n}\n\nexport const LOGICAL_OPERATORS = new Set(['$eq', '$gt', '$gte', '$lt', '$lte']);\nexport const LOWER_BOUND_LOGICAL_OPERATORS = new Set(['$eq', '$gt', '$gte']);\nexport const UPPER_BOUND_LOGICAL_OPERATORS = new Set(['$eq', '$lt', '$lte']);\n\n\nexport function isSelectorSatisfiedByIndex(\n    index: string[],\n    selector: MangoQuerySelector<any>,\n    startKeys: RxQueryPlanKey[],\n    endKeys: RxQueryPlanKey[]\n): boolean {\n\n\n    /**\n     * Not satisfied if one or more operators are non-logical\n     * operators that can never be satisfied by an index.\n     */\n    const selectorEntries = Object.entries(selector);\n    const hasNonMatchingOperator = selectorEntries\n        .find(([fieldName, operation]) => {\n            if (!index.includes(fieldName)) {\n                return true;\n            }\n            const hasNonLogicOperator = Object.entries(operation as any)\n                .find(([op, _value]) => !LOGICAL_OPERATORS.has(op));\n            return hasNonLogicOperator;\n        });\n\n    if (hasNonMatchingOperator) {\n        return false;\n    }\n\n    /**\n     * Not satisfied if contains $and or $or operations.\n     */\n    if (selector.$and || selector.$or) {\n        return false;\n    }\n\n\n\n    // ensure all lower bound in index\n    const satisfieldLowerBound: string[] = [];\n    const lowerOperatorFieldNames = new Set<string>();\n    for (const [fieldName, operation] of Object.entries(selector)) {\n        if (!index.includes(fieldName)) {\n            return false;\n        }\n\n        // If more then one logic op on the same field, we have to selector-match.\n        const lowerLogicOps = Object.keys(operation as any).filter(key => LOWER_BOUND_LOGICAL_OPERATORS.has(key));\n        if (lowerLogicOps.length > 1) {\n            return false;\n        }\n\n        const hasLowerLogicOp = lowerLogicOps[0];\n        if (hasLowerLogicOp) {\n            lowerOperatorFieldNames.add(fieldName);\n        }\n        if (hasLowerLogicOp !== '$eq') {\n            if (satisfieldLowerBound.length > 0) {\n                return false;\n            } else {\n                satisfieldLowerBound.push(hasLowerLogicOp);\n            }\n        }\n    }\n\n    // ensure all upper bound in index\n    const satisfieldUpperBound: string[] = [];\n    const upperOperatorFieldNames = new Set<string>();\n    for (const [fieldName, operation] of Object.entries(selector)) {\n        if (!index.includes(fieldName)) {\n            return false;\n        }\n\n        // If more then one logic op on the same field, we have to selector-match.\n        const upperLogicOps = Object.keys(operation as any).filter(key => UPPER_BOUND_LOGICAL_OPERATORS.has(key));\n        if (upperLogicOps.length > 1) {\n            return false;\n        }\n\n        const hasUperLogicOp = upperLogicOps[0];\n        if (hasUperLogicOp) {\n            upperOperatorFieldNames.add(fieldName);\n        }\n        if (hasUperLogicOp !== '$eq') {\n            if (satisfieldUpperBound.length > 0) {\n                return false;\n            } else {\n                satisfieldUpperBound.push(hasUperLogicOp);\n            }\n        }\n    }\n\n\n    /**\n     * If the index contains a non-relevant field between\n     * the relevant fields, then the index is not satisfying.\n     */\n    let i = 0;\n    for (const fieldName of index) {\n        for (const set of [\n            lowerOperatorFieldNames,\n            upperOperatorFieldNames\n        ]) {\n            if (\n                !set.has(fieldName) &&\n                set.size > 0\n            ) {\n                return false;\n            }\n            set.delete(fieldName);\n        }\n\n        const startKey = startKeys[i];\n        const endKey = endKeys[i];\n\n        if (\n            startKey !== endKey && (\n                lowerOperatorFieldNames.size > 0 &&\n                upperOperatorFieldNames.size > 0\n            )\n        ) {\n            return false;\n        }\n\n        i++;\n    }\n\n    return true;\n}\n\nexport function getMatcherQueryOpts(\n    operator: string,\n    operatorValue: any\n): Partial<RxQueryPlanerOpts> {\n    switch (operator) {\n        case '$eq':\n            return {\n                startKey: operatorValue,\n                endKey: operatorValue,\n                inclusiveEnd: true,\n                inclusiveStart: true\n            };\n        case '$lte':\n            return {\n                endKey: operatorValue,\n                inclusiveEnd: true\n            };\n        case '$gte':\n            return {\n                startKey: operatorValue,\n                inclusiveStart: true\n            };\n        case '$lt':\n            return {\n                endKey: operatorValue,\n                inclusiveEnd: false\n            };\n        case '$gt':\n            return {\n                startKey: operatorValue,\n                inclusiveStart: false\n            };\n        default:\n            throw new Error('SNH');\n    }\n}\n\n\n/**\n * Returns a number that determines the quality of the query plan.\n * Higher number means better query plan.\n */\nexport function rateQueryPlan<RxDocType>(\n    schema: RxJsonSchema<RxDocumentData<RxDocType>>,\n    query: FilledMangoQuery<RxDocType>,\n    queryPlan: RxQueryPlan\n): number {\n    let quality: number = 0;\n    const addQuality = (value: number) => {\n        if (value > 0) {\n            quality = quality + value;\n        }\n    };\n\n    const pointsPerMatchingKey = 10;\n\n    const nonMinKeyCount = countUntilNotMatching(queryPlan.startKeys, keyValue => keyValue !== INDEX_MIN && keyValue !== INDEX_MAX);\n    addQuality(nonMinKeyCount * pointsPerMatchingKey);\n\n    const nonMaxKeyCount = countUntilNotMatching(queryPlan.startKeys, keyValue => keyValue !== INDEX_MAX && keyValue !== INDEX_MIN);\n    addQuality(nonMaxKeyCount * pointsPerMatchingKey);\n\n    const equalKeyCount = countUntilNotMatching(queryPlan.startKeys, (keyValue, idx) => {\n        if (keyValue === queryPlan.endKeys[idx]) {\n            return true;\n        } else {\n            return false;\n        }\n    });\n    addQuality(equalKeyCount * pointsPerMatchingKey * 1.5);\n\n    const pointsIfNoReSortMustBeDone = queryPlan.sortSatisfiedByIndex ? 5 : 0;\n    addQuality(pointsIfNoReSortMustBeDone);\n\n    return quality;\n}\n"],"mappings":"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","ignoreList":[]}