{"version":3,"file":"rx-collection.d.js","names":[],"sources":["../../../src/types/rx-collection.d.ts"],"sourcesContent":["import type {\n    RxJsonSchema,\n    RxDocument,\n    MigrationStrategies,\n    RxConflictHandler\n} from './index.d.ts';\nimport type {\n    RxCollectionBase\n} from '../rx-collection.d.ts';\nimport type { QueryCache } from '../query-cache.d.ts';\nimport type { RxLocalDocumentMutation } from './rx-database.d.ts';\n\nexport interface KeyFunctionMap {\n    [key: string]: Function;\n}\nexport interface NumberFunctionMap {\n    [key: number]: Function;\n}\n\n\n/**\n * Params to create a new collection.\n * Notice the name of the collection is set one level higher\n * when calling addCollections()\n */\nexport type RxCollectionCreator<RxDocType = any> = {\n    schema: RxJsonSchema<RxDocType>;\n    instanceCreationOptions?: any;\n    migrationStrategies?: MigrationStrategies;\n    autoMigrate?: boolean;\n    statics?: KeyFunctionMap;\n    methods?: KeyFunctionMap;\n    attachments?: KeyFunctionMap;\n    options?: any;\n    /**\n     * Set this to true if you want to store local documents\n     * in the RxCollection instance.\n     */\n    localDocuments?: boolean;\n    cacheReplacementPolicy?: RxCacheReplacementPolicy;\n\n    /**\n     * Depending on which plugins or storage is used,\n     * the RxCollection might need a way to resolve conflicts\n     * which is done by this conflict handler.\n     * If no conflict handler is provided, a master-always-wins handler\n     * will be used as default\n     */\n    conflictHandler?: RxConflictHandler<RxDocType>;\n};\n\nexport type RxCacheReplacementPolicy = (collection: RxCollection, queryCache: QueryCache) => void;\n\nexport type RxCollectionHookCallback<\n    RxDocumentType,\n    OrmMethods,\n    Reactivity\n> = (\n    data: RxDocumentType,\n    instance: RxDocument<RxDocumentType, OrmMethods, Reactivity>\n) => void | Promise<void> | any;\nexport type RxCollectionHookNoInstance<RxDocumentType> = (data: RxDocumentType) => void | Promise<void> | any;\nexport type RxCollectionHookCallbackNonAsync<RxDocumentType, OrmMethods, Reactivity> = (\n    data: RxDocumentType,\n    instance: RxDocument<RxDocumentType, OrmMethods, Reactivity>\n) => void | any;\nexport type RxCollectionHookNoInstanceCallback<\n    RxDocumentType,\n    OrmMethods,\n    Reactivity\n> = (\n    data: RxDocumentType,\n    instance: RxCollection<RxDocumentType, OrmMethods, Reactivity>\n) => Promise<void> | void | any;\n\nexport type RxCollection<\n    RxDocumentType = any,\n    OrmMethods = {},\n    StaticMethods = {},\n    InstanceCreationOptions = {},\n    Reactivity = unknown\n> = StaticMethods &\n    RxCollectionBase<InstanceCreationOptions, RxDocumentType, OrmMethods, Reactivity> &\n    RxCollectionGenerated<RxDocumentType, OrmMethods, Reactivity>;\n\nexport interface RxCollectionGenerated<RxDocumentType = any, OrmMethods = {}, Reactivity = unknown> extends RxLocalDocumentMutation<RxCollection<RxDocumentType, OrmMethods, any, any, Reactivity>> {\n\n    // HOOKS\n    preInsert(fun: RxCollectionHookNoInstanceCallback<RxDocumentType, OrmMethods, Reactivity>, parallel: boolean): void;\n    preSave(fun: RxCollectionHookCallback<RxDocumentType, OrmMethods, Reactivity>, parallel: boolean): void;\n    preRemove(fun: RxCollectionHookCallback<RxDocumentType, OrmMethods, Reactivity>, parallel: boolean): void;\n    postInsert(fun: RxCollectionHookCallback<RxDocumentType, OrmMethods, Reactivity>, parallel: boolean): void;\n    postSave(fun: RxCollectionHookCallback<RxDocumentType, OrmMethods, Reactivity>, parallel: boolean): void;\n    postRemove(fun: RxCollectionHookCallback<RxDocumentType, OrmMethods, Reactivity>, parallel: boolean): void;\n    postCreate(fun: RxCollectionHookCallbackNonAsync<RxDocumentType, OrmMethods, Reactivity>): void;\n\n    // only inMemory-collections\n    awaitPersistence(): Promise<void>;\n}\n\n/**\n * Properties are possibly encrypted so type them as any. TODO this is no longer needed.\n */\nexport type RxDumpCollectionAsAny<T> = { [P in keyof T]: any };\n\ninterface RxDumpCollectionBase {\n    name: string;\n    passwordHash?: string;\n    schemaHash: string;\n}\nexport interface RxDumpCollection<RxDocumentType> extends RxDumpCollectionBase {\n    docs: RxDocumentType[];\n}\n/**\n * All base properties are typed as any because they can be encrypted.\n */\nexport interface RxDumpCollectionAny<RxDocumentType> extends RxDumpCollectionBase {\n    docs: RxDumpCollectionAsAny<RxDocumentType>[];\n}\n"],"mappings":"","ignoreList":[]}