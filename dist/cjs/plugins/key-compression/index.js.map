{"version":3,"file":"index.js","names":["_jsonschemaKeyCompression","require","_overwritable","_pluginHelpers","_rxSchemaHelper","_rxStorageHelper","_index","_rxQuery","COMPRESSION_STATE_BY_SCHEMA","WeakMap","getCompressionStateByRxJsonSchema","schema","overwritable","deepFreezeWhenDevMode","getFromMapOrCreate","compressionSchema","flatClone","primaryKey","table","createCompressionTable","DEFAULT_COMPRESSION_FLAG","getPrimaryFieldOfPrimaryKey","compressedSchema","createCompressedJsonSchema","composedPrimary","newComposedPrimary","key","compressedPath","fields","map","field","separator","indexes","newIndexes","idx","isMaybeReadonlyArray","subIdx","compressionState","wrappedKeyCompressionStorage","args","Object","assign","storage","createStorageInstance","params","keyCompression","modifyToStorage","docData","ret","compressDocumentData","modifyFromStorage","decompressDocumentData","childSchema","instance","wrappedInstance","wrapRxStorageInstance","overwriteMethods","forEach","methodName","methodBefore","bind","preparedQuery","compressedQuery","compressQuery","query","compressedPreparedQuery","prepareQuery","flatCloneDocWithMeta","attachments","_attachments","compressObject","decompressObject"],"sources":["../../../../src/plugins/key-compression/index.ts"],"sourcesContent":["/**\n * this plugin adds the keycompression-capabilities to rxdb\n * if you don't use this, ensure that you set disableKeyCompression to false in your schema\n */\n\nimport {\n    createCompressionTable,\n    CompressionTable,\n    JsonSchema as KeyCompressionJsonSchema,\n    compressObject,\n    decompressObject,\n    compressedPath,\n    DEFAULT_COMPRESSION_FLAG,\n    createCompressedJsonSchema,\n    compressQuery\n} from 'jsonschema-key-compression';\nimport {\n    overwritable\n} from '../../overwritable.ts';\nimport { wrapRxStorageInstance } from '../../plugin-helpers.ts';\nimport { getPrimaryFieldOfPrimaryKey } from '../../rx-schema-helper.ts';\nimport { flatCloneDocWithMeta } from '../../rx-storage-helper.ts';\n\nimport type {\n    RxJsonSchema,\n    CompositePrimaryKey,\n    RxStorage,\n    RxStorageInstanceCreationParams,\n    RxDocumentData,\n    FilledMangoQuery,\n    PreparedQuery,\n    RxDocumentWriteData\n} from '../../types/index.d.ts';\nimport {\n    clone,\n    flatClone,\n    getFromMapOrCreate,\n    isMaybeReadonlyArray\n} from '../../plugins/utils/index.ts';\nimport { prepareQuery } from '../../rx-query.ts';\n\ndeclare type CompressionState = {\n    table: CompressionTable;\n    schema: RxJsonSchema<any>;\n    compressedSchema: RxJsonSchema<any>;\n};\n\n/**\n * Cache the compression table and the compressed schema\n * by the storage instance for better performance.\n */\nconst COMPRESSION_STATE_BY_SCHEMA: WeakMap<\n    RxJsonSchema<any>,\n    CompressionState\n> = new WeakMap();\n\n\nexport function getCompressionStateByRxJsonSchema(\n    schema: RxJsonSchema<any>\n): CompressionState {\n    /**\n     * Because we cache the state by the JsonSchema,\n     * it must be assured that the given schema object\n     * is never mutated.\n     */\n    overwritable.deepFreezeWhenDevMode(schema);\n\n    return getFromMapOrCreate(\n        COMPRESSION_STATE_BY_SCHEMA,\n        schema,\n        () => {\n            const compressionSchema: KeyCompressionJsonSchema = flatClone(schema) as any;\n            delete (compressionSchema as any).primaryKey;\n\n            const table = createCompressionTable(\n                compressionSchema,\n                DEFAULT_COMPRESSION_FLAG,\n                [\n                    /**\n                     * Do not compress the primary field\n                     * for easier debugging.\n                     */\n                    getPrimaryFieldOfPrimaryKey(schema.primaryKey),\n                    '_rev',\n                    '_attachments',\n                    '_deleted',\n                    '_meta'\n                ]\n            );\n\n            delete (compressionSchema as any).primaryKey;\n            const compressedSchema: RxJsonSchema<any> = createCompressedJsonSchema(\n                table,\n                compressionSchema\n            ) as RxJsonSchema<any>;\n\n            // also compress primary key\n            if (typeof schema.primaryKey !== 'string') {\n                const composedPrimary: CompositePrimaryKey<any> = schema.primaryKey;\n                const newComposedPrimary: CompositePrimaryKey<any> = {\n                    key: compressedPath(table, composedPrimary.key as string),\n                    fields: composedPrimary.fields.map(field => compressedPath(table, field as string)),\n                    separator: composedPrimary.separator\n                };\n                compressedSchema.primaryKey = newComposedPrimary;\n            } else {\n                compressedSchema.primaryKey = compressedPath(table, schema.primaryKey);\n            }\n\n            /**\n             * the key compression module does not know about indexes\n             * in the schema, so we have to also compress them here.\n             */\n            if (schema.indexes) {\n                const newIndexes = schema.indexes.map(idx => {\n                    if (isMaybeReadonlyArray(idx)) {\n                        return idx.map(subIdx => compressedPath(table, subIdx));\n                    } else {\n                        return compressedPath(table, idx);\n                    }\n                });\n                compressedSchema.indexes = newIndexes;\n            }\n\n            const compressionState = {\n                table,\n                schema,\n                compressedSchema\n            };\n            return compressionState;\n        }\n    );\n}\n\nexport function wrappedKeyCompressionStorage<Internals, InstanceCreationOptions>(\n    args: {\n        storage: RxStorage<Internals, InstanceCreationOptions>;\n    }\n): RxStorage<Internals, InstanceCreationOptions> {\n    return Object.assign(\n        {},\n        args.storage,\n        {\n            async createStorageInstance<RxDocType>(\n                params: RxStorageInstanceCreationParams<RxDocType, any>\n            ) {\n                if (!params.schema.keyCompression) {\n                    return args.storage.createStorageInstance(params);\n                }\n\n                const compressionState = getCompressionStateByRxJsonSchema(params.schema);\n                function modifyToStorage(docData: RxDocumentWriteData<RxDocType>) {\n                    const ret = compressDocumentData(compressionState, docData);\n                    return ret;\n                }\n                function modifyFromStorage(docData: RxDocumentData<any>): Promise<RxDocumentData<RxDocType>> {\n                    return decompressDocumentData(compressionState, docData);\n                }\n\n                /**\n                 * Because this wrapper resolves the key-compression,\n                 * we can set the flag to false\n                 * which allows underlying storages to detect wrong configurations\n                 * like when keyCompression is set to false but no key-compression module is used.\n                 */\n                const childSchema = flatClone(compressionState.compressedSchema);\n                childSchema.keyCompression = false;\n\n                const instance = await args.storage.createStorageInstance(\n                    Object.assign(\n                        {},\n                        params,\n                        {\n                            schema: childSchema\n                        }\n                    )\n                );\n\n                const wrappedInstance = wrapRxStorageInstance(\n                    params.schema,\n                    instance,\n                    modifyToStorage,\n                    modifyFromStorage\n                );\n\n\n                const overwriteMethods = ['query', 'count'] as const;\n                overwriteMethods.forEach(methodName => {\n                    const methodBefore = wrappedInstance[methodName].bind(wrappedInstance);\n                    (wrappedInstance as any)[methodName] = async (preparedQuery: PreparedQuery<RxDocType>) => {\n                        const compressedQuery: FilledMangoQuery<RxDocType> = compressQuery(\n                            compressionState.table,\n                            preparedQuery.query as any\n                        ) as any;\n\n                        const compressedPreparedQuery = prepareQuery(\n                            compressionState.compressedSchema,\n                            compressedQuery\n                        );\n                        return methodBefore(compressedPreparedQuery);\n                    }\n                });\n\n                return wrappedInstance;\n            }\n        }\n    );\n}\n\nexport function compressDocumentData(\n    compressionState: CompressionState,\n    docData: RxDocumentData<any>\n): RxDocumentData<any> {\n    /**\n     * Do not send attachments to compressObject()\n     * because it will deep clone which does not work on Blob or Buffer.\n     */\n    docData = flatCloneDocWithMeta(docData);\n    const attachments = docData._attachments;\n    delete docData._attachments;\n\n    docData = compressObject(\n        compressionState.table,\n        docData\n    );\n    docData._attachments = attachments;\n    return docData;\n}\n\nexport function decompressDocumentData(\n    compressionState: CompressionState,\n    docData: RxDocumentData<any>\n): RxDocumentData<any> {\n    return decompressObject(\n        compressionState.table,\n        docData\n    );\n}\n"],"mappings":"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","ignoreList":[]}