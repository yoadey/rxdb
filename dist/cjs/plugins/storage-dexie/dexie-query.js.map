{"version":3,"file":"dexie-query.js","names":["_queryPlanner","require","_rxQueryHelper","_dexieHelper","mapKeyForKeyRange","k","INDEX_MIN","Infinity","rangeFieldToBooleanSubstitute","booleanIndexes","fieldName","value","includes","newValue","INDEX_MAX","getKeyRangeByQueryPlan","queryPlan","IDBKeyRange","window","Error","startKeys","map","v","i","index","endKeys","keyRange","bound","inclusiveStart","inclusiveEnd","dexieQuery","instance","preparedQuery","state","internals","query","skip","limit","skipPlusLimit","queryMatcher","selectorSatisfiedByIndex","getQueryMatcher","schema","dexieDb","_options","queryPlanFields","rows","transaction","dexieTable","dexieTx","tx","idbtrans","store","objectStore","DEXIE_DOCS_TABLE_NAME","indexName","field","dexieReplaceIfStartsWithPipe","join","cursorReq","openCursor","Promise","res","onsuccess","e","cursor","target","result","docData","fromDexieToStorage","push","sortSatisfiedByIndex","length","continue","sortComparator","getSortComparator","sort","slice","documents","dexieCount","count","request","rej","onerror","err"],"sources":["../../../../src/plugins/storage-dexie/dexie-query.ts"],"sourcesContent":["import { INDEX_MAX, INDEX_MIN } from '../../query-planner.ts';\nimport { getQueryMatcher, getSortComparator } from '../../rx-query-helper.ts';\nimport type {\n    PreparedQuery,\n    QueryMatcher,\n    RxDocumentData,\n    RxQueryPlan,\n    RxStorageQueryResult\n} from '../../types/index.d.ts';\nimport {\n    dexieReplaceIfStartsWithPipe,\n    DEXIE_DOCS_TABLE_NAME,\n    fromDexieToStorage\n} from './dexie-helper.ts';\nimport type { RxStorageInstanceDexie } from './rx-storage-instance-dexie.ts';\n\nexport function mapKeyForKeyRange(k: any) {\n    if (k === INDEX_MIN) {\n        return -Infinity;\n    } else {\n        return k;\n    }\n}\n\nfunction rangeFieldToBooleanSubstitute(\n    booleanIndexes: string[],\n    fieldName: string,\n    value: any\n) {\n    if (booleanIndexes.includes(fieldName)) {\n        const newValue = value === INDEX_MAX || value === true ? '1' : '0';\n        return newValue;\n    } else {\n        return value;\n    }\n}\n\nexport function getKeyRangeByQueryPlan(\n    booleanIndexes: string[],\n    queryPlan: RxQueryPlan,\n    IDBKeyRange?: any\n) {\n    if (!IDBKeyRange) {\n        if (typeof window === 'undefined') {\n            throw new Error('IDBKeyRange missing');\n        } else {\n            IDBKeyRange = window.IDBKeyRange;\n        }\n    }\n\n\n    const startKeys = queryPlan.startKeys\n        .map((v, i) => {\n            const fieldName = queryPlan.index[i];\n            return rangeFieldToBooleanSubstitute(booleanIndexes, fieldName, v);\n        })\n        .map(mapKeyForKeyRange);\n    const endKeys = queryPlan.endKeys\n        .map((v, i) => {\n            const fieldName = queryPlan.index[i];\n            return rangeFieldToBooleanSubstitute(booleanIndexes, fieldName, v);\n        })\n        .map(mapKeyForKeyRange);\n\n    const keyRange = IDBKeyRange.bound(\n        startKeys,\n        endKeys,\n        !queryPlan.inclusiveStart,\n        !queryPlan.inclusiveEnd\n    );\n    return keyRange;\n}\n\n\n/**\n * Runs mango queries over the Dexie.js database.\n */\nexport async function dexieQuery<RxDocType>(\n    instance: RxStorageInstanceDexie<RxDocType>,\n    preparedQuery: PreparedQuery<RxDocType>\n): Promise<RxStorageQueryResult<RxDocType>> {\n    const state = await instance.internals;\n    const query = preparedQuery.query;\n\n    const skip = query.skip ? query.skip : 0;\n    const limit = query.limit ? query.limit : Infinity;\n    const skipPlusLimit = skip + limit;\n    const queryPlan = preparedQuery.queryPlan;\n\n    let queryMatcher: QueryMatcher<RxDocumentData<RxDocType>> | false = false;\n    if (!queryPlan.selectorSatisfiedByIndex) {\n        queryMatcher = getQueryMatcher(\n            instance.schema,\n            preparedQuery.query\n        );\n    }\n    const keyRange = getKeyRangeByQueryPlan(\n        state.booleanIndexes,\n        queryPlan,\n        (state.dexieDb as any)._options.IDBKeyRange\n    );\n\n    const queryPlanFields: string[] = queryPlan.index;\n\n    let rows: any[] = [];\n    await state.dexieDb.transaction(\n        'r',\n        state.dexieTable,\n        async (dexieTx) => {\n            /**\n             * TODO here we use the native IndexedDB transaction\n             * to get the cursor.\n             * Instead we should not leave Dexie.js API and find\n             * a way to create the cursor with Dexie.js.\n             */\n            const tx = (dexieTx as any).idbtrans;\n\n            // const nativeIndexedDB = state.dexieDb.backendDB();\n            // const trans = nativeIndexedDB.transaction([DEXIE_DOCS_TABLE_NAME], 'readonly');\n\n            const store = tx.objectStore(DEXIE_DOCS_TABLE_NAME);\n            let index: any;\n            let indexName: string;\n            indexName = '[' +\n                queryPlanFields\n                    .map(field => dexieReplaceIfStartsWithPipe(field))\n                    .join('+')\n                + ']';\n            index = store.index(indexName);\n\n\n            const cursorReq = index.openCursor(keyRange);\n            await new Promise<void>(res => {\n                cursorReq.onsuccess = function (e: any) {\n                    const cursor = e.target.result;\n                    if (cursor) {\n                        // We have a record in cursor.value\n                        const docData = fromDexieToStorage<RxDocType>(state.booleanIndexes, cursor.value);\n                        if (!queryMatcher || queryMatcher(docData)) {\n                            rows.push(docData);\n                        }\n\n                        /**\n                         * If we do not have to manually sort\n                         * and have enough documents,\n                         * we can abort iterating over the cursor\n                         * because we already have every relevant document.\n                         */\n                        if (\n                            queryPlan.sortSatisfiedByIndex &&\n                            rows.length === skipPlusLimit\n                        ) {\n                            res();\n                        } else {\n                            cursor.continue();\n                        }\n                    } else {\n                        // Iteration complete\n                        res();\n                    }\n                };\n            });\n\n\n        }\n    );\n\n\n    if (!queryPlan.sortSatisfiedByIndex) {\n        const sortComparator = getSortComparator(instance.schema, preparedQuery.query);\n        rows = rows.sort(sortComparator);\n    }\n\n    // apply skip and limit boundaries.\n    rows = rows.slice(skip, skipPlusLimit);\n\n    /**\n     * Comment this in for debugging to check all fields in the database.\n     */\n    // const docsInDb = await state.dexieTable.filter(queryMatcher).toArray();\n    // let documents = docsInDb\n    //     .map(docData => stripDexieKey(docData))\n    //     .sort(sortComparator);\n    // if (preparedQuery.skip) {\n    //     documents = documents.slice(preparedQuery.skip);\n    // }\n    // if (preparedQuery.limit && documents.length > preparedQuery.limit) {\n    //     documents = documents.slice(0, preparedQuery.limit);\n    // }\n\n\n\n    return {\n        documents: rows\n    };\n}\n\n\nexport async function dexieCount<RxDocType>(\n    instance: RxStorageInstanceDexie<RxDocType>,\n    preparedQuery: PreparedQuery<RxDocType>\n): Promise<number> {\n    const state = await instance.internals;\n    const queryPlan = preparedQuery.queryPlan;\n    const queryPlanFields: string[] = queryPlan.index;\n\n    const keyRange = getKeyRangeByQueryPlan(\n        state.booleanIndexes,\n        queryPlan,\n        (state.dexieDb as any)._options.IDBKeyRange\n    );\n    let count: number = -1;\n    await state.dexieDb.transaction(\n        'r',\n        state.dexieTable,\n        async (dexieTx) => {\n            const tx = (dexieTx as any).idbtrans;\n            const store = tx.objectStore(DEXIE_DOCS_TABLE_NAME);\n            let index: any;\n            let indexName: string;\n            indexName = '[' +\n                queryPlanFields\n                    .map(field => dexieReplaceIfStartsWithPipe(field))\n                    .join('+')\n                + ']';\n            index = store.index(indexName);\n            const request = index.count(keyRange);\n            count = await new Promise<number>((res, rej) => {\n                request.onsuccess = function () {\n                    res(request.result);\n                };\n                request.onerror = (err: any) => rej(err);\n            });\n        }\n    );\n    return count;\n}\n"],"mappings":"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","ignoreList":[]}