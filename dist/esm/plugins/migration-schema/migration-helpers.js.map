{"version":3,"file":"migration-helpers.js","names":["BehaviorSubject","INTERNAL_CONTEXT_COLLECTION","getPrimaryKeyOfInternalDocument","getPreviousVersions","PROMISE_RESOLVE_FALSE","PROMISE_RESOLVE_NULL","clone","flatClone","getFromMapOrCreate","toPromise","getOldCollectionMeta","migrationState","collectionDocKeys","collection","schema","jsonSchema","map","version","name","found","database","internalStore","findDocumentsById","key","length","Error","migrateDocumentData","docSchemaVersion","docData","attachmentsBefore","_attachments","mutateableDocData","meta","_meta","nextVersion","currentPromise","Promise","resolve","_loop","then","docOrNull","runStrategyIfNotNull","doc","ret","migrationStrategies","retPromise","mustMigrate","oldColDoc","MIGRATION_DEFAULT_BATCH_SIZE","DATA_MIGRATION_STATE_SUBJECT_BY_DATABASE","WeakMap","addMigrationStateToDatabase","allSubject","getMigrationStateByDatabase","allList","getValue","slice","push","next","onDatabaseDestroy","subject","get","complete"],"sources":["../../../../src/plugins/migration-schema/migration-helpers.ts"],"sourcesContent":["import { BehaviorSubject } from 'rxjs';\nimport {\n    INTERNAL_CONTEXT_COLLECTION,\n    getPrimaryKeyOfInternalDocument\n} from '../../rx-database-internal-store.ts';\nimport { getPreviousVersions } from '../../rx-schema.ts';\nimport type {\n    InternalStoreCollectionDocType,\n    RxCollection,\n    RxDatabase,\n    RxDocumentData\n} from '../../types/index.d.ts';\nimport {\n    PROMISE_RESOLVE_FALSE,\n    PROMISE_RESOLVE_NULL,\n    clone,\n    flatClone,\n    getFromMapOrCreate,\n    toPromise\n} from '../utils/index.ts';\nimport { RxMigrationState } from './rx-migration-state.ts';\n\nexport async function getOldCollectionMeta(\n    migrationState: RxMigrationState\n): Promise<RxDocumentData<InternalStoreCollectionDocType>> {\n\n    const collectionDocKeys = getPreviousVersions(migrationState.collection.schema.jsonSchema)\n        .map(version => migrationState.collection.name + '-' + version);\n\n    const found = await migrationState.database.internalStore.findDocumentsById(\n        collectionDocKeys.map(key => getPrimaryKeyOfInternalDocument(\n            key,\n            INTERNAL_CONTEXT_COLLECTION\n        )),\n        false\n    );\n    if (found.length > 1) {\n        throw new Error('more the one old collection meta found');\n    }\n    return found[0];\n}\n\n\n/**\n * runs the doc-data through all following migrationStrategies\n * so it will match the newest schema.\n * @throws Error if final doc does not match final schema or migrationStrategy crashes\n * @return final object or null if migrationStrategy deleted it\n */\nexport function migrateDocumentData(\n    collection: RxCollection,\n    docSchemaVersion: number,\n    docData: any\n): Promise<any | null> {\n    /**\n     * We cannot deep-clone Blob or Buffer\n     * so we just flat clone it here\n     * and attach it to the deep cloned document data.\n     */\n    const attachmentsBefore = flatClone(docData._attachments);\n    const mutateableDocData = clone(docData);\n    const meta = mutateableDocData._meta;\n    delete mutateableDocData._meta;\n    mutateableDocData._attachments = attachmentsBefore;\n\n    let nextVersion = docSchemaVersion + 1;\n\n    // run the document through migrationStrategies\n    let currentPromise = Promise.resolve(mutateableDocData);\n    while (nextVersion <= collection.schema.version) {\n        const version = nextVersion;\n        currentPromise = currentPromise.then(docOrNull => runStrategyIfNotNull(\n            collection,\n            version,\n            docOrNull\n        ));\n        nextVersion++;\n    }\n\n    return currentPromise.then(doc => {\n        if (doc === null) {\n            return PROMISE_RESOLVE_NULL;\n        }\n        doc._meta = meta;\n        return doc;\n    });\n}\n\nexport function runStrategyIfNotNull(\n    collection: RxCollection,\n    version: number,\n    docOrNull: any | null\n): Promise<any | null> {\n    if (docOrNull === null) {\n        return PROMISE_RESOLVE_NULL;\n    } else {\n        const ret = collection.migrationStrategies[version](docOrNull, collection);\n        const retPromise = toPromise(ret);\n        return retPromise;\n    }\n}\n\n/**\n * returns true if a migration is needed\n */\nexport async function mustMigrate(\n    migrationState: RxMigrationState\n): Promise<boolean> {\n    if (migrationState.collection.schema.version === 0) {\n        return PROMISE_RESOLVE_FALSE;\n    }\n    const oldColDoc = await getOldCollectionMeta(migrationState);\n    return !!oldColDoc;\n}\nexport const MIGRATION_DEFAULT_BATCH_SIZE = 200;\n\n\nexport type MigrationStateWithCollection = {\n    collection: RxCollection;\n    migrationState: RxMigrationState;\n};\n\nexport const DATA_MIGRATION_STATE_SUBJECT_BY_DATABASE = new WeakMap<RxDatabase, BehaviorSubject<RxMigrationState[]>>();\nexport function addMigrationStateToDatabase(\n    migrationState: RxMigrationState\n) {\n    const allSubject = getMigrationStateByDatabase(migrationState.database);\n    const allList = allSubject.getValue().slice(0);\n    allList.push(migrationState);\n    allSubject.next(allList);\n}\nexport function getMigrationStateByDatabase(database: RxDatabase): BehaviorSubject<RxMigrationState[]> {\n    return getFromMapOrCreate(\n        DATA_MIGRATION_STATE_SUBJECT_BY_DATABASE,\n        database,\n        () => new BehaviorSubject<RxMigrationState[]>([])\n    );\n}\n\n/**\n * Complete on database destroy\n * so people do not have to unsubscribe\n */\nexport function onDatabaseDestroy(database: RxDatabase) {\n    const subject = DATA_MIGRATION_STATE_SUBJECT_BY_DATABASE.get(database);\n    if (subject) {\n        subject.complete();\n    }\n}\n"],"mappings":"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","ignoreList":[]}