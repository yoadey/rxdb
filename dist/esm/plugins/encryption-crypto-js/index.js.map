{"version":3,"file":"index.js","names":["pkg","AES","enc","cryptoEnc","wrapRxStorageInstance","newRxError","newRxTypeError","hasEncryption","b64DecodeUnicode","b64EncodeUnicode","clone","ensureNotFalsy","flatClone","getProperty","setProperty","MINIMUM_PASSWORD_LENGTH","encryptString","value","password","encrypted","encrypt","toString","decryptString","cipherText","args","decrypted","decrypt","ret","Utf8","wrappedKeyEncryptionCryptoJsStorage","Object","assign","storage","createStorageInstance","params","validatePassword","schema","retInstance","database","databaseName","collection","collectionName","schemaWithoutEncrypted","attachments","instance","modifyToStorage","docData","cloneWithoutAttachments","forEach","path","stringValue","JSON","stringify","newAttachments","entries","_attachments","id","attachment","useAttachment","data","dataString","modifyFromStorage","decryptedParsed","parse","modifyAttachmentFromStorage","attachmentData","length","minPassLength"],"sources":["../../../../src/plugins/encryption-crypto-js/index.ts"],"sourcesContent":["/**\n * this plugin adds the encryption-capabilities to rxdb\n * It's using crypto-js/aes for password-encryption\n * @link https://github.com/brix/crypto-js\n */\nimport pkg from 'crypto-js';\nconst { AES, enc: cryptoEnc } = pkg;\n\nimport { wrapRxStorageInstance } from '../../plugin-helpers.ts';\nimport { newRxError, newRxTypeError } from '../../rx-error.ts';\nimport { hasEncryption } from '../../rx-storage-helper.ts';\nimport type {\n    InternalStoreDocType,\n    RxAttachmentWriteData,\n    RxDocumentData,\n    RxDocumentWriteData,\n    RxJsonSchema,\n    RxStorage,\n    RxStorageInstanceCreationParams\n} from '../../types/index.d.ts';\nimport {\n    b64DecodeUnicode,\n    b64EncodeUnicode,\n    clone,\n    ensureNotFalsy,\n    flatClone,\n    getProperty,\n    setProperty\n} from '../../plugins/utils/index.ts';\n\nexport const MINIMUM_PASSWORD_LENGTH: 8 = 8;\n\n\nexport function encryptString(value: string, password: string): string {\n    const encrypted = AES.encrypt(value, password);\n    return encrypted.toString();\n}\n\nexport function decryptString(cipherText: string, password: any): string {\n    /**\n     * Trying to decrypt non-strings\n     * will cause no errors and will be hard to debug.\n     * So instead we do this check here.\n     */\n    if (typeof cipherText !== 'string') {\n        throw newRxError('SNH', {\n            args: {\n                cipherText\n            }\n        });\n    }\n\n    const decrypted = AES.decrypt(cipherText, password);\n    const ret = decrypted.toString(cryptoEnc.Utf8);\n    return ret;\n}\n\nexport type InternalStorePasswordDocType = InternalStoreDocType<{\n    hash: string;\n}>;\n\nexport function wrappedKeyEncryptionCryptoJsStorage<Internals, InstanceCreationOptions>(\n    args: {\n        storage: RxStorage<Internals, InstanceCreationOptions>;\n    }\n): RxStorage<Internals, InstanceCreationOptions> {\n    return Object.assign(\n        {},\n        args.storage,\n        {\n            async createStorageInstance<RxDocType>(\n                params: RxStorageInstanceCreationParams<RxDocType, any>\n            ) {\n                if (typeof params.password !== 'undefined') {\n                    validatePassword(params.password as any);\n                }\n\n                if (!hasEncryption(params.schema)) {\n                    const retInstance = await args.storage.createStorageInstance(params);\n                    return retInstance;\n                }\n\n                if (!params.password) {\n                    throw newRxError('EN3', {\n                        database: params.databaseName,\n                        collection: params.collectionName,\n                        schema: params.schema\n                    });\n                }\n                const password = params.password;\n\n                const schemaWithoutEncrypted: RxJsonSchema<RxDocumentData<RxDocType>> = clone(params.schema);\n                delete schemaWithoutEncrypted.encrypted;\n                if (schemaWithoutEncrypted.attachments) {\n                    schemaWithoutEncrypted.attachments.encrypted = false;\n                }\n\n                const instance = await args.storage.createStorageInstance(\n                    Object.assign(\n                        {},\n                        params,\n                        {\n                            schema: schemaWithoutEncrypted\n                        }\n                    )\n                );\n\n                function modifyToStorage(docData: RxDocumentWriteData<RxDocType>) {\n                    docData = cloneWithoutAttachments(docData);\n                    ensureNotFalsy(params.schema.encrypted)\n                        .forEach(path => {\n                            const value = getProperty(docData, path);\n                            if (typeof value === 'undefined') {\n                                return;\n                            }\n\n                            const stringValue = JSON.stringify(value);\n                            const encrypted = encryptString(stringValue, password);\n                            setProperty(docData, path, encrypted);\n                        });\n\n                    // handle attachments\n                    if (\n                        params.schema.attachments &&\n                        params.schema.attachments.encrypted\n                    ) {\n                        const newAttachments: typeof docData._attachments = {};\n                        Object.entries(docData._attachments).forEach(([id, attachment]) => {\n                            const useAttachment: RxAttachmentWriteData = flatClone(attachment) as any;\n                            if (useAttachment.data) {\n                                const dataString = useAttachment.data;\n                                useAttachment.data = b64EncodeUnicode(encryptString(dataString, password));\n                            }\n                            newAttachments[id] = useAttachment;\n                        });\n                        docData._attachments = newAttachments;\n                    }\n                    return docData;\n                }\n                function modifyFromStorage(docData: RxDocumentData<any>): Promise<RxDocumentData<RxDocType>> {\n                    docData = cloneWithoutAttachments(docData);\n                    ensureNotFalsy(params.schema.encrypted)\n                        .forEach(path => {\n                            const value = getProperty(docData, path);\n                            if (typeof value === 'undefined') {\n                                return;\n                            }\n                            const decrypted = decryptString(value, password);\n                            const decryptedParsed = JSON.parse(decrypted);\n                            setProperty(docData, path, decryptedParsed);\n                        });\n                    return docData;\n                }\n\n                function modifyAttachmentFromStorage(attachmentData: string): string {\n                    if (\n                        params.schema.attachments &&\n                        params.schema.attachments.encrypted\n                    ) {\n                        const decrypted = decryptString(b64DecodeUnicode(attachmentData), password);\n                        return decrypted;\n                    } else {\n                        return attachmentData;\n                    }\n                }\n\n                return wrapRxStorageInstance(\n                    params.schema,\n                    instance,\n                    modifyToStorage,\n                    modifyFromStorage,\n                    modifyAttachmentFromStorage\n                );\n            }\n        }\n    );\n}\n\n\n\n\n\nfunction cloneWithoutAttachments<T>(data: RxDocumentWriteData<T>): RxDocumentData<T> {\n    const attachments = data._attachments;\n    data = flatClone(data);\n    delete (data as any)._attachments;\n    data = clone(data);\n    data._attachments = attachments;\n    return data as any;\n}\n\nfunction validatePassword(password: string) {\n    if (typeof password !== 'string') {\n        throw newRxTypeError('EN1', {\n            password\n        });\n    }\n    if (password.length < MINIMUM_PASSWORD_LENGTH) {\n        throw newRxError('EN2', {\n            minPassLength: MINIMUM_PASSWORD_LENGTH,\n            password\n        });\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,OAAOA,GAAG,MAAM,WAAW;AAC3B,IAAM;EAAEC,GAAG;EAAEC,GAAG,EAAEC;AAAU,CAAC,GAAGH,GAAG;AAEnC,SAASI,qBAAqB,QAAQ,yBAAyB;AAC/D,SAASC,UAAU,EAAEC,cAAc,QAAQ,mBAAmB;AAC9D,SAASC,aAAa,QAAQ,4BAA4B;AAU1D,SACIC,gBAAgB,EAChBC,gBAAgB,EAChBC,KAAK,EACLC,cAAc,EACdC,SAAS,EACTC,WAAW,EACXC,WAAW,QACR,8BAA8B;AAErC,OAAO,IAAMC,uBAA0B,GAAG,CAAC;AAG3C,OAAO,SAASC,aAAaA,CAACC,KAAa,EAAEC,QAAgB,EAAU;EACnE,IAAMC,SAAS,GAAGlB,GAAG,CAACmB,OAAO,CAACH,KAAK,EAAEC,QAAQ,CAAC;EAC9C,OAAOC,SAAS,CAACE,QAAQ,CAAC,CAAC;AAC/B;AAEA,OAAO,SAASC,aAAaA,CAACC,UAAkB,EAAEL,QAAa,EAAU;EACrE;AACJ;AACA;AACA;AACA;EACI,IAAI,OAAOK,UAAU,KAAK,QAAQ,EAAE;IAChC,MAAMlB,UAAU,CAAC,KAAK,EAAE;MACpBmB,IAAI,EAAE;QACFD;MACJ;IACJ,CAAC,CAAC;EACN;EAEA,IAAME,SAAS,GAAGxB,GAAG,CAACyB,OAAO,CAACH,UAAU,EAAEL,QAAQ,CAAC;EACnD,IAAMS,GAAG,GAAGF,SAAS,CAACJ,QAAQ,CAAClB,SAAS,CAACyB,IAAI,CAAC;EAC9C,OAAOD,GAAG;AACd;AAMA,OAAO,SAASE,mCAAmCA,CAC/CL,IAEC,EAC4C;EAC7C,OAAOM,MAAM,CAACC,MAAM,CAChB,CAAC,CAAC,EACFP,IAAI,CAACQ,OAAO,EACZ;IACI,MAAMC,qBAAqBA,CACvBC,MAAuD,EACzD;MACE,IAAI,OAAOA,MAAM,CAAChB,QAAQ,KAAK,WAAW,EAAE;QACxCiB,gBAAgB,CAACD,MAAM,CAAChB,QAAe,CAAC;MAC5C;MAEA,IAAI,CAACX,aAAa,CAAC2B,MAAM,CAACE,MAAM,CAAC,EAAE;QAC/B,IAAMC,WAAW,GAAG,MAAMb,IAAI,CAACQ,OAAO,CAACC,qBAAqB,CAACC,MAAM,CAAC;QACpE,OAAOG,WAAW;MACtB;MAEA,IAAI,CAACH,MAAM,CAAChB,QAAQ,EAAE;QAClB,MAAMb,UAAU,CAAC,KAAK,EAAE;UACpBiC,QAAQ,EAAEJ,MAAM,CAACK,YAAY;UAC7BC,UAAU,EAAEN,MAAM,CAACO,cAAc;UACjCL,MAAM,EAAEF,MAAM,CAACE;QACnB,CAAC,CAAC;MACN;MACA,IAAMlB,QAAQ,GAAGgB,MAAM,CAAChB,QAAQ;MAEhC,IAAMwB,sBAA+D,GAAGhC,KAAK,CAACwB,MAAM,CAACE,MAAM,CAAC;MAC5F,OAAOM,sBAAsB,CAACvB,SAAS;MACvC,IAAIuB,sBAAsB,CAACC,WAAW,EAAE;QACpCD,sBAAsB,CAACC,WAAW,CAACxB,SAAS,GAAG,KAAK;MACxD;MAEA,IAAMyB,QAAQ,GAAG,MAAMpB,IAAI,CAACQ,OAAO,CAACC,qBAAqB,CACrDH,MAAM,CAACC,MAAM,CACT,CAAC,CAAC,EACFG,MAAM,EACN;QACIE,MAAM,EAAEM;MACZ,CACJ,CACJ,CAAC;MAED,SAASG,eAAeA,CAACC,OAAuC,EAAE;QAC9DA,OAAO,GAAGC,uBAAuB,CAACD,OAAO,CAAC;QAC1CnC,cAAc,CAACuB,MAAM,CAACE,MAAM,CAACjB,SAAS,CAAC,CAClC6B,OAAO,CAACC,IAAI,IAAI;UACb,IAAMhC,KAAK,GAAGJ,WAAW,CAACiC,OAAO,EAAEG,IAAI,CAAC;UACxC,IAAI,OAAOhC,KAAK,KAAK,WAAW,EAAE;YAC9B;UACJ;UAEA,IAAMiC,WAAW,GAAGC,IAAI,CAACC,SAAS,CAACnC,KAAK,CAAC;UACzC,IAAME,SAAS,GAAGH,aAAa,CAACkC,WAAW,EAAEhC,QAAQ,CAAC;UACtDJ,WAAW,CAACgC,OAAO,EAAEG,IAAI,EAAE9B,SAAS,CAAC;QACzC,CAAC,CAAC;;QAEN;QACA,IACIe,MAAM,CAACE,MAAM,CAACO,WAAW,IACzBT,MAAM,CAACE,MAAM,CAACO,WAAW,CAACxB,SAAS,EACrC;UACE,IAAMkC,cAA2C,GAAG,CAAC,CAAC;UACtDvB,MAAM,CAACwB,OAAO,CAACR,OAAO,CAACS,YAAY,CAAC,CAACP,OAAO,CAAC,CAAC,CAACQ,EAAE,EAAEC,UAAU,CAAC,KAAK;YAC/D,IAAMC,aAAoC,GAAG9C,SAAS,CAAC6C,UAAU,CAAQ;YACzE,IAAIC,aAAa,CAACC,IAAI,EAAE;cACpB,IAAMC,UAAU,GAAGF,aAAa,CAACC,IAAI;cACrCD,aAAa,CAACC,IAAI,GAAGlD,gBAAgB,CAACO,aAAa,CAAC4C,UAAU,EAAE1C,QAAQ,CAAC,CAAC;YAC9E;YACAmC,cAAc,CAACG,EAAE,CAAC,GAAGE,aAAa;UACtC,CAAC,CAAC;UACFZ,OAAO,CAACS,YAAY,GAAGF,cAAc;QACzC;QACA,OAAOP,OAAO;MAClB;MACA,SAASe,iBAAiBA,CAACf,OAA4B,EAAsC;QACzFA,OAAO,GAAGC,uBAAuB,CAACD,OAAO,CAAC;QAC1CnC,cAAc,CAACuB,MAAM,CAACE,MAAM,CAACjB,SAAS,CAAC,CAClC6B,OAAO,CAACC,IAAI,IAAI;UACb,IAAMhC,KAAK,GAAGJ,WAAW,CAACiC,OAAO,EAAEG,IAAI,CAAC;UACxC,IAAI,OAAOhC,KAAK,KAAK,WAAW,EAAE;YAC9B;UACJ;UACA,IAAMQ,SAAS,GAAGH,aAAa,CAACL,KAAK,EAAEC,QAAQ,CAAC;UAChD,IAAM4C,eAAe,GAAGX,IAAI,CAACY,KAAK,CAACtC,SAAS,CAAC;UAC7CX,WAAW,CAACgC,OAAO,EAAEG,IAAI,EAAEa,eAAe,CAAC;QAC/C,CAAC,CAAC;QACN,OAAOhB,OAAO;MAClB;MAEA,SAASkB,2BAA2BA,CAACC,cAAsB,EAAU;QACjE,IACI/B,MAAM,CAACE,MAAM,CAACO,WAAW,IACzBT,MAAM,CAACE,MAAM,CAACO,WAAW,CAACxB,SAAS,EACrC;UACE,IAAMM,SAAS,GAAGH,aAAa,CAACd,gBAAgB,CAACyD,cAAc,CAAC,EAAE/C,QAAQ,CAAC;UAC3E,OAAOO,SAAS;QACpB,CAAC,MAAM;UACH,OAAOwC,cAAc;QACzB;MACJ;MAEA,OAAO7D,qBAAqB,CACxB8B,MAAM,CAACE,MAAM,EACbQ,QAAQ,EACRC,eAAe,EACfgB,iBAAiB,EACjBG,2BACJ,CAAC;IACL;EACJ,CACJ,CAAC;AACL;AAMA,SAASjB,uBAAuBA,CAAIY,IAA4B,EAAqB;EACjF,IAAMhB,WAAW,GAAGgB,IAAI,CAACJ,YAAY;EACrCI,IAAI,GAAG/C,SAAS,CAAC+C,IAAI,CAAC;EACtB,OAAQA,IAAI,CAASJ,YAAY;EACjCI,IAAI,GAAGjD,KAAK,CAACiD,IAAI,CAAC;EAClBA,IAAI,CAACJ,YAAY,GAAGZ,WAAW;EAC/B,OAAOgB,IAAI;AACf;AAEA,SAASxB,gBAAgBA,CAACjB,QAAgB,EAAE;EACxC,IAAI,OAAOA,QAAQ,KAAK,QAAQ,EAAE;IAC9B,MAAMZ,cAAc,CAAC,KAAK,EAAE;MACxBY;IACJ,CAAC,CAAC;EACN;EACA,IAAIA,QAAQ,CAACgD,MAAM,GAAGnD,uBAAuB,EAAE;IAC3C,MAAMV,UAAU,CAAC,KAAK,EAAE;MACpB8D,aAAa,EAAEpD,uBAAuB;MACtCG;IACJ,CAAC,CAAC;EACN;AACJ","ignoreList":[]}