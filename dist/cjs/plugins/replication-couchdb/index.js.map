{"version":3,"file":"index.js","names":["_index","require","_index2","_index3","_index4","_rxjs","_couchdbHelper","Object","keys","forEach","key","prototype","hasOwnProperty","call","_exportNames","exports","defineProperty","enumerable","get","_replicationHelper","_couchdbTypes","RxCouchDBReplicationState","_RxReplicationState","url","fetch","replicationIdentifier","collection","pull","push","live","retryTime","autoStart","_this","_inheritsLoose2","default","RxReplicationState","replicateCouchDB","options","conflictHandler","addRxPlugin","RxDBLeaderElectionPlugin","primaryPath","schema","endsWith","newRxError","args","name","flatClone","waitForLeadership","pullStream$","Subject","replicationPrimitivesPull","handler","lastPulledCheckpoint","batchSize","mergeUrlQueryParams","style","feed","include_docs","since","sequence","heartbeat","limit","seq_interval","response","replicationState","jsonResponse","json","results","documents","map","row","couchDBDocToRxDocData","ensureNotFalsy","doc","checkpoint","last_seq","modifier","stream$","asObservable","initialCheckpoint","replicationPrimitivesPush","rows","conflicts","pushRowsById","Map","id","newDocumentState","set","docsByIdResponse","method","headers","body","JSON","stringify","deleted","docsByIdRows","nonConflictRows","remoteRevById","Promise","all","getFromMapOrThrow","realMasterState","pushRow","assumedMasterState","isEqual","_rev","docs","docId","sendDoc","has","couchSwapPrimaryToId","responseJson","conflictAgainIds","writeResultRow","isConflict","error","ok","length","getConflictDocsUrl","conflictResponse","conflictResponseJson","conflictAgainRow","getDefaultFetch","startBefore","start","bind","lastRequestStartTime","now","isStopped","err","subjects","next","errorToPlainJson","promiseWait","awaitRetry","startReplicationOnLeaderShip"],"sources":["../../../../src/plugins/replication-couchdb/index.ts"],"sourcesContent":["/**\n * This plugin can be used to sync collections with a remote CouchDB endpoint.\n */\nimport {\n    ensureNotFalsy,\n    errorToPlainJson,\n    flatClone,\n    getFromMapOrThrow,\n    now,\n    promiseWait\n} from '../../plugins/utils/index.ts';\n\nimport { RxDBLeaderElectionPlugin } from '../leader-election/index.ts';\nimport type {\n    RxCollection,\n    ReplicationPullOptions,\n    ReplicationPushOptions,\n    RxReplicationWriteToMasterRow,\n    RxReplicationPullStreamItem,\n    CouchdbChangesResult,\n    CouchBulkDocResultRow,\n    CouchAllDocsResponse,\n    RxConflictHandler\n} from '../../types/index.d.ts';\nimport {\n    RxReplicationState,\n    startReplicationOnLeaderShip\n} from '../replication/index.ts';\nimport {\n    addRxPlugin,\n    newRxError,\n    WithDeleted\n} from '../../index.ts';\n\nimport { Subject } from 'rxjs';\nimport type {\n    CouchDBCheckpointType,\n    FetchMethodType,\n    SyncOptionsCouchDB\n} from './couchdb-types.ts';\nimport {\n    couchDBDocToRxDocData,\n    mergeUrlQueryParams,\n    couchSwapPrimaryToId,\n    getDefaultFetch\n} from './couchdb-helper.ts';\nimport { awaitRetry } from '../replication/replication-helper.ts';\n\nexport * from './couchdb-helper.ts';\nexport * from './couchdb-types.ts';\n\nexport class RxCouchDBReplicationState<RxDocType> extends RxReplicationState<RxDocType, CouchDBCheckpointType> {\n    constructor(\n        public readonly url: string,\n        public fetch: FetchMethodType,\n        public readonly replicationIdentifier: string,\n        public readonly collection: RxCollection<RxDocType>,\n        public readonly pull?: ReplicationPullOptions<RxDocType, CouchDBCheckpointType>,\n        public readonly push?: ReplicationPushOptions<RxDocType>,\n        public readonly live: boolean = true,\n        public retryTime: number = 1000 * 5,\n        public autoStart: boolean = true\n    ) {\n        super(\n            replicationIdentifier,\n            collection,\n            '_deleted',\n            pull,\n            push,\n            live,\n            retryTime,\n            autoStart\n        );\n    }\n}\n\nexport function replicateCouchDB<RxDocType>(\n    options: SyncOptionsCouchDB<RxDocType>\n) {\n    const collection = options.collection;\n    const conflictHandler: RxConflictHandler<unknown> = collection.conflictHandler;\n    addRxPlugin(RxDBLeaderElectionPlugin);\n    const primaryPath = options.collection.schema.primaryPath;\n\n    if (!options.url.endsWith('/')) {\n        throw newRxError('RC_COUCHDB_1', {\n            args: {\n                collection: options.collection.name,\n                url: options.url\n            }\n        });\n    }\n\n    options = flatClone(options);\n    if (!options.url.endsWith('/')) {\n        options.url = options.url + '/';\n    }\n    options.waitForLeadership = typeof options.waitForLeadership === 'undefined' ? true : options.waitForLeadership;\n    const pullStream$: Subject<RxReplicationPullStreamItem<RxDocType, CouchDBCheckpointType>> = new Subject();\n    let replicationPrimitivesPull: ReplicationPullOptions<RxDocType, CouchDBCheckpointType> | undefined;\n    if (options.pull) {\n        replicationPrimitivesPull = {\n            async handler(\n                lastPulledCheckpoint: CouchDBCheckpointType | undefined,\n                batchSize: number\n            ) {\n                /**\n                 * @link https://docs.couchdb.org/en/3.2.2-docs/api/database/changes.html\n                 */\n                const url = options.url + '_changes?' + mergeUrlQueryParams({\n                    style: 'all_docs',\n                    feed: 'normal',\n                    include_docs: true,\n                    since: lastPulledCheckpoint ? lastPulledCheckpoint.sequence : 0,\n                    heartbeat: options.pull && options.pull.heartbeat ? options.pull.heartbeat : 60000,\n                    limit: batchSize,\n                    seq_interval: batchSize\n                });\n\n                const response = await replicationState.fetch(url);\n                const jsonResponse: CouchdbChangesResult = await response.json();\n                if (!jsonResponse.results) {\n                    throw newRxError('RC_COUCHDB_2', {\n                        args: { jsonResponse }\n                    });\n                }\n                const documents: WithDeleted<RxDocType>[] = jsonResponse.results\n                    .map(row => couchDBDocToRxDocData(collection.schema.primaryPath, ensureNotFalsy(row.doc)));\n                return {\n                    documents,\n                    checkpoint: {\n                        sequence: jsonResponse.last_seq\n                    }\n                };\n            },\n            batchSize: ensureNotFalsy(options.pull).batchSize,\n            modifier: ensureNotFalsy(options.pull).modifier,\n            stream$: pullStream$.asObservable(),\n            initialCheckpoint: options.pull.initialCheckpoint\n        };\n    }\n\n    let replicationPrimitivesPush: ReplicationPushOptions<RxDocType> | undefined;\n    if (options.push) {\n        replicationPrimitivesPush = {\n            async handler(\n                rows: RxReplicationWriteToMasterRow<RxDocType>[]\n            ) {\n                const conflicts: WithDeleted<RxDocType>[] = [];\n                const pushRowsById = new Map<string, RxReplicationWriteToMasterRow<RxDocType>>();\n                rows.forEach(row => {\n                    const id = (row.newDocumentState as any)[primaryPath];\n                    pushRowsById.set(id, row);\n                });\n\n                /**\n                 * First get the current master state from the remote\n                 * to check for conflicts\n                 */\n                const docsByIdResponse = await replicationState.fetch(\n                    options.url + '_all_docs?' + mergeUrlQueryParams({}),\n                    {\n                        method: 'POST',\n                        headers: {\n                            'content-type': 'application/json'\n                        },\n                        body: JSON.stringify({\n                            keys: rows.map(row => (row.newDocumentState as any)[primaryPath]),\n                            include_docs: true,\n                            deleted: 'ok'\n                        })\n                    }\n                );\n                const docsByIdRows: CouchAllDocsResponse = await docsByIdResponse.json();\n                const nonConflictRows: typeof rows = [];\n                const remoteRevById = new Map<string, string>();\n                await Promise.all(\n                    docsByIdRows.rows.map(async (row) => {\n                        if (!row.doc) {\n                            nonConflictRows.push(getFromMapOrThrow(pushRowsById, row.key));\n                            return;\n                        }\n                        const realMasterState: WithDeleted<RxDocType> = couchDBDocToRxDocData(primaryPath, row.doc);\n                        const pushRow = getFromMapOrThrow(pushRowsById, row.id);\n\n                        if (\n                            pushRow.assumedMasterState &&\n                            (await conflictHandler({\n                                realMasterState,\n                                newDocumentState: pushRow.assumedMasterState\n                            }, 'couchdb-push-1')).isEqual\n                        ) {\n                            remoteRevById.set(row.id, row.doc._rev);\n                            nonConflictRows.push(pushRow);\n                        } else {\n                            conflicts.push(realMasterState);\n                        }\n                    })\n                );\n\n                /**\n                 * @link https://docs.couchdb.org/en/3.2.2-docs/api/database/bulk-api.html#db-bulk-docs\n                 */\n                const url = options.url + '_bulk_docs?' + mergeUrlQueryParams({});\n                const body = {\n                    docs: nonConflictRows.map(row => {\n                        const docId = (row.newDocumentState as any)[primaryPath];\n                        const sendDoc = flatClone(row.newDocumentState);\n                        if (remoteRevById.has(docId)) {\n                            (sendDoc as any)._rev = getFromMapOrThrow(remoteRevById, docId);\n                        }\n                        return couchSwapPrimaryToId(collection.schema.primaryPath, sendDoc);\n                    })\n                };\n\n                const response = await replicationState.fetch(\n                    url,\n                    {\n                        method: 'POST',\n                        headers: {\n                            'content-type': 'application/json'\n                        },\n                        body: JSON.stringify(body)\n                    }\n                );\n                const responseJson: CouchBulkDocResultRow[] = await response.json();\n\n                // get conflicting writes\n                const conflictAgainIds: string[] = [];\n                responseJson.forEach(writeResultRow => {\n                    const isConflict = writeResultRow.error === 'conflict';\n                    if (!writeResultRow.ok && !isConflict) {\n                        throw newRxError('SNH', { args: { writeResultRow } });\n                    }\n                    if (isConflict) {\n                        conflictAgainIds.push(writeResultRow.id);\n                    }\n                });\n\n                if (conflictAgainIds.length === 0) {\n                    return conflicts;\n                }\n\n                const getConflictDocsUrl = options.url + '_all_docs?' + mergeUrlQueryParams({\n                    include_docs: true,\n                    keys: JSON.stringify(conflictAgainIds)\n                });\n                const conflictResponse = await replicationState.fetch(getConflictDocsUrl);\n                const conflictResponseJson: CouchAllDocsResponse = await conflictResponse.json();\n                conflictResponseJson.rows.forEach(conflictAgainRow => {\n                    conflicts.push(couchDBDocToRxDocData(collection.schema.primaryPath, conflictAgainRow.doc));\n                });\n\n                return conflicts;\n            },\n            batchSize: options.push.batchSize,\n            modifier: options.push.modifier,\n            initialCheckpoint: options.push.initialCheckpoint\n        };\n    }\n\n    const replicationState = new RxCouchDBReplicationState<RxDocType>(\n        options.url,\n        options.fetch ? options.fetch : getDefaultFetch(),\n        options.replicationIdentifier,\n        collection,\n        replicationPrimitivesPull,\n        replicationPrimitivesPush,\n        options.live,\n        options.retryTime,\n        options.autoStart\n    );\n\n    /**\n     * Use long polling to get live changes for the pull.stream$\n     */\n    if (options.live && options.pull) {\n        const startBefore = replicationState.start.bind(replicationState);\n        replicationState.start = () => {\n            let since: string | number = 'now';\n            const batchSize = options.pull && options.pull.batchSize ? options.pull.batchSize : 20;\n\n            (async () => {\n                let lastRequestStartTime = now();\n                while (!replicationState.isStopped()) {\n                    const url = options.url + '_changes?' + mergeUrlQueryParams({\n                        style: 'all_docs',\n                        feed: 'longpoll',\n                        since,\n                        include_docs: true,\n                        heartbeat: options.pull && options.pull.heartbeat ? options.pull.heartbeat : 60000,\n                        limit: batchSize,\n                        seq_interval: batchSize\n                    });\n\n                    let jsonResponse: CouchdbChangesResult;\n                    try {\n                        lastRequestStartTime = now();\n                        jsonResponse = await (await replicationState.fetch(url)).json();\n                    } catch (err: any) {\n                        replicationState.subjects.error.next(\n                            newRxError('RC_STREAM', {\n                                args: { url },\n                                error: errorToPlainJson(err)\n                            })\n                        );\n\n                        if (lastRequestStartTime < (now() - replicationState.retryTime)) {\n                            /**\n                             * Last request start was long ago,\n                             * so we directly retry.\n                             * This mostly happens on timeouts\n                             * which are normal behavior for long polling requests.\n                             */\n                            await promiseWait(0);\n                        } else {\n                            // await next tick here otherwise we could go in to a 100% CPU blocking cycle.\n                            await awaitRetry(\n                                collection,\n                                replicationState.retryTime\n                            );\n                        }\n                        continue;\n                    }\n                    const documents: WithDeleted<RxDocType>[] = jsonResponse.results\n                        .map(row => couchDBDocToRxDocData(collection.schema.primaryPath, ensureNotFalsy(row.doc)));\n                    since = jsonResponse.last_seq;\n\n                    pullStream$.next({\n                        documents,\n                        checkpoint: {\n                            sequence: jsonResponse.last_seq\n                        }\n                    });\n                }\n            })();\n            return startBefore();\n        };\n    }\n\n    startReplicationOnLeaderShip(options.waitForLeadership, replicationState);\n\n    return replicationState;\n}\n"],"mappings":"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","ignoreList":[]}