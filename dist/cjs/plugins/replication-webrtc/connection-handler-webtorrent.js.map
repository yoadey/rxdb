{"version":3,"file":"connection-handler-webtorrent.js","names":[],"sources":["../../../../src/plugins/replication-webrtc/connection-handler-webtorrent.ts"],"sourcesContent":["// /**\n//  * Uses the Webtorrent servers as signaling server, works similar to p2pt.\n//  * We could not use p2pt directly because it has so many bugs and behaves wrong in\n//  * cases with more then 2 peers.\n//  * @link https://github.com/subins2000/p2pt/blob/master/p2pt.js\n//  */\n\n// import { Subject } from 'rxjs';\n// import { PROMISE_RESOLVE_VOID, randomCouchString } from '../../util';\n// import { P2PConnectionHandler, P2PConnectionHandlerCreator, P2PMessage, P2PPeer, PeerWithMessage, PeerWithResponse } from './p2p-types';\n// const wrtc = require('wrtc');\n\n// const WebSocketTracker = require('bittorrent-tracker/lib/client/websocket-tracker');\n// const Client = require('bittorrent-tracker');\n// const randombytes = require('randombytes');\n// const EventEmitter = require('events');\n// const sha1 = require('simple-sha1');\n// const debug = require('debug')('p2pt');\n\n\n// export const P2PT_DEFAULT_TRACKERS = [\n//     'wss://tracker.files.fm:7073/announce',\n//     'wss://tracker.btorrent.xyz',\n//     'wss://spacetradersapi-chatbox.herokuapp.com:443/announce',\n//     'wss://qot.abiir.top:443/announce'\n// ];\n\n// export function getConnectionHandlerWebtorrent(\n//     trackers: string[] = P2PT_DEFAULT_TRACKERS,\n//     /**\n//      * Port is only required in Node.js,\n//      * not on browsers.\n//      */\n//     torrentClientPort = 18669\n// ): P2PConnectionHandlerCreator {\n//     const creator: P2PConnectionHandlerCreator = (options) => {\n//         /**\n//          * @link https://github.com/webtorrent/bittorrent-tracker#client\n//          */\n//         const requiredOpts = {\n//             infoHash: sha1.sync(options.topic).toLowerCase(),\n//             peerId: randombytes(20),\n//             announce: trackers,\n//             port: torrentClientPort,\n//             wrtc\n//         }\n//         const client = new Client(requiredOpts);\n\n//         const connect$ = new Subject<P2PPeer>();\n//         const disconnect$ = new Subject<P2PPeer>();\n//         const message$ = new Subject<PeerWithMessage>();\n//         const response$ = new Subject<PeerWithResponse>();\n\n\n//         client.on('error', function (err) {\n//             console.error('fatal client error! ' + requiredOpts.peerId.toString('hex'));\n//             console.log(err.message)\n//         })\n\n//         client.on('warning', function (err) {\n//             // a tracker was unavailable or sent bad data to the client. you can probably ignore it\n//             console.log(err.message)\n//         })\n\n//         client.on('update', function (data) {\n//             console.log('got an announce response from tracker: ' + data.announce)\n//             console.log('number of seeders in the swarm: ' + data.complete)\n//             console.log('number of leechers in the swarm: ' + data.incomplete)\n//         });\n\n//         const knownPeers = new Set<string>();\n//         client.on('peer', function (peer: P2PPeer) {\n//             console.log('found a peer: ' + peer.id + '    ' + requiredOpts.peerId.toString('hex')) // 85.10.239.191:48623\n//             if (knownPeers.has(peer.id)) {\n//                 return;\n//             }\n//             knownPeers.add(peer.id);\n//             peer.once('connect', () => {\n//                 connect$.next(peer);\n//             });\n//             peer.on('data', (data: Buffer) => {\n//                 console.log('# GOT DATA FROM PEER:');\n//                 const messageOrResponse = JSON.parse(data as any);\n//                 console.dir(messageOrResponse);\n//                 if (messageOrResponse.result) {\n//                     response$.next({\n//                         peer: peer as any,\n//                         response: messageOrResponse\n//                     });\n//                 } else {\n//                     message$.next({\n//                         peer,\n//                         message: JSON.parse(data)\n//                     });\n//                 }\n//             });\n//             peer.on('signal', (signal) => {\n//                 console.log('GOT SIGNAL: ' + requiredOpts.peerId.toString('hex'));\n//                 console.dir(signal);\n//                 client.signal(signal);\n//                 client.update();\n//                 client.scrape();\n//             });\n//         });\n\n//         client.on('scrape', function (data) {\n//             console.log('number of leechers in the swarm: ' + data.incomplete)\n//         })\n\n//         const handler: P2PConnectionHandler = {\n//             connect$,\n//             disconnect$,\n//             message$,\n//             response$,\n//             async send(peer: P2PPeer, message: P2PMessage) {\n//                 await peer.send(JSON.stringify(message));\n//             },\n//             destroy() {\n//                 client.destroy();\n//                 connect$.complete();\n//                 disconnect$.complete();\n//                 message$.complete();\n//                 response$.complete();\n//                 return PROMISE_RESOLVE_VOID;\n//             }\n//         }\n//         client.start();\n//         client.update();\n//         client.scrape();\n//         setInterval(() => {\n//             // client.update();\n//         }, 10000);\n//         return handler;\n//     };\n\n//     return creator;\n// }\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAAA","ignoreList":[]}