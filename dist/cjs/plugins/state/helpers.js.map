{"version":3,"file":"helpers.js","names":["RX_STATE_SCHEMA_TITLE","exports","RX_STATE_ID_LENGTH","RX_STATE_COLLECTION_SCHEMA","title","primaryKey","version","type","properties","id","maxLength","minLength","pattern","sId","ops","minItems","items","k","v","required","nextRxStateId","lastId","padStart","parsed","parseInt","next","nextString","toString"],"sources":["../../../../src/plugins/state/helpers.ts"],"sourcesContent":["import type { DeepReadonly, RxJsonSchema } from '../../types';\nimport type { RxStateDocument } from './types';\n\nexport const RX_STATE_SCHEMA_TITLE = 'RxStateCollection';\nexport const RX_STATE_ID_LENGTH = 14;\nexport const RX_STATE_COLLECTION_SCHEMA: DeepReadonly<RxJsonSchema<RxStateDocument>> = {\n    title: RX_STATE_SCHEMA_TITLE,\n    primaryKey: 'id',\n    version: 0,\n    type: 'object',\n    properties: {\n        id: {\n            type: 'string',\n            /**\n             * We store numbers in string format like '0001'\n             * with a left-pad.\n             * TODO instead we should transform the number to a string\n             * with the same sort-position to improve performance.\n             */\n            maxLength: RX_STATE_ID_LENGTH,\n            minLength: RX_STATE_ID_LENGTH,\n            pattern: '[0-9]+'\n        },\n        sId: {\n            type: 'string',\n            maxLength: 10,\n            minLength: 10\n        },\n        ops: {\n            type: 'array',\n            minItems: 1,\n            items: {\n                type: 'object',\n                properties: {\n                    k: {\n                        type: 'string'\n                    },\n                    v: {\n                        type: 'object'\n                    }\n                },\n                required: [\n                    'key',\n                    'value'\n                ]\n            }\n        }\n    },\n    required: [\n        'id',\n        'sId',\n        'ops'\n    ]\n} as const;\n\n\nexport function nextRxStateId(lastId?: string): string {\n    if (!lastId) {\n        return ''.padStart(RX_STATE_ID_LENGTH, '0');\n    }\n    const parsed = parseInt(lastId, 10);\n    const next = parsed + 1;\n    const nextString = next.toString();\n    return nextString.padStart(RX_STATE_ID_LENGTH, '0');\n}\n"],"mappings":";;;;;;;AAGO,IAAMA,qBAAqB,GAAAC,OAAA,CAAAD,qBAAA,GAAG,mBAAmB;AACjD,IAAME,kBAAkB,GAAAD,OAAA,CAAAC,kBAAA,GAAG,EAAE;AAC7B,IAAMC,0BAAuE,GAAAF,OAAA,CAAAE,0BAAA,GAAG;EACnFC,KAAK,EAAEJ,qBAAqB;EAC5BK,UAAU,EAAE,IAAI;EAChBC,OAAO,EAAE,CAAC;EACVC,IAAI,EAAE,QAAQ;EACdC,UAAU,EAAE;IACRC,EAAE,EAAE;MACAF,IAAI,EAAE,QAAQ;MACd;AACZ;AACA;AACA;AACA;AACA;MACYG,SAAS,EAAER,kBAAkB;MAC7BS,SAAS,EAAET,kBAAkB;MAC7BU,OAAO,EAAE;IACb,CAAC;IACDC,GAAG,EAAE;MACDN,IAAI,EAAE,QAAQ;MACdG,SAAS,EAAE,EAAE;MACbC,SAAS,EAAE;IACf,CAAC;IACDG,GAAG,EAAE;MACDP,IAAI,EAAE,OAAO;MACbQ,QAAQ,EAAE,CAAC;MACXC,KAAK,EAAE;QACHT,IAAI,EAAE,QAAQ;QACdC,UAAU,EAAE;UACRS,CAAC,EAAE;YACCV,IAAI,EAAE;UACV,CAAC;UACDW,CAAC,EAAE;YACCX,IAAI,EAAE;UACV;QACJ,CAAC;QACDY,QAAQ,EAAE,CACN,KAAK,EACL,OAAO;MAEf;IACJ;EACJ,CAAC;EACDA,QAAQ,EAAE,CACN,IAAI,EACJ,KAAK,EACL,KAAK;AAEb,CAAU;AAGH,SAASC,aAAaA,CAACC,MAAe,EAAU;EACnD,IAAI,CAACA,MAAM,EAAE;IACT,OAAO,EAAE,CAACC,QAAQ,CAACpB,kBAAkB,EAAE,GAAG,CAAC;EAC/C;EACA,IAAMqB,MAAM,GAAGC,QAAQ,CAACH,MAAM,EAAE,EAAE,CAAC;EACnC,IAAMI,IAAI,GAAGF,MAAM,GAAG,CAAC;EACvB,IAAMG,UAAU,GAAGD,IAAI,CAACE,QAAQ,CAAC,CAAC;EAClC,OAAOD,UAAU,CAACJ,QAAQ,CAACpB,kBAAkB,EAAE,GAAG,CAAC;AACvD","ignoreList":[]}