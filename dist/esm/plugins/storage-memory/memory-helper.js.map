{"version":3,"file":"memory-helper.js","names":["pushAtSortPosition","newRxError","boundEQ","getMemoryCollectionKey","databaseName","collectionName","schemaVersion","join","ensureNotRemoved","instance","internals","removed","Error","attachmentMapKey","documentId","attachmentId","sortByIndexStringComparator","a","b","indexString","putWriteRowToState","docId","state","stateByIndex","row","docInState","document","documents","set","i","length","byIndex","docsWithIndex","getIndexableString","newIndexString","insertPosition","id","doc","previousIndexString","prev","splice","next","args","indexBefore","compareDocsWithIndex","removeDocFromState","primaryPath","schema","delete","Object","values","forEach","positionInIndex","indexStringA","indexStringB"],"sources":["../../../../src/plugins/storage-memory/memory-helper.ts"],"sourcesContent":["import type {\n    BulkWriteRow,\n    RxDocumentData,\n    RxJsonSchema\n} from '../../types/index.d.ts';\nimport type {\n    DocWithIndexString,\n    MemoryStorageInternals,\n    MemoryStorageInternalsByIndex\n} from './memory-types.ts';\nimport type { RxStorageInstanceMemory } from './rx-storage-instance-memory.ts';\nimport {\n    pushAtSortPosition\n} from 'array-push-at-sort-position';\nimport { newRxError } from '../../rx-error.ts';\nimport { boundEQ } from './binary-search-bounds.ts';\n\n\nexport function getMemoryCollectionKey(\n    databaseName: string,\n    collectionName: string,\n    schemaVersion: number\n): string {\n    return [\n        databaseName,\n        collectionName,\n        schemaVersion\n    ].join('--memory--');\n}\n\n\nexport function ensureNotRemoved(\n    instance: RxStorageInstanceMemory<any>\n) {\n    if (instance.internals.removed) {\n        throw new Error('removed');\n    }\n}\n\nexport function attachmentMapKey(documentId: string, attachmentId: string): string {\n    return documentId + '||' + attachmentId;\n}\n\nfunction sortByIndexStringComparator<RxDocType>(a: DocWithIndexString<RxDocType>, b: DocWithIndexString<RxDocType>) {\n    if (a.indexString < b.indexString) {\n        return -1;\n    } else {\n        return 1;\n    }\n}\n\n\n\n/**\n * @hotPath\n */\nexport function putWriteRowToState<RxDocType>(\n    docId: string,\n    state: MemoryStorageInternals<RxDocType>,\n    stateByIndex: MemoryStorageInternalsByIndex<RxDocType>[],\n    row: BulkWriteRow<RxDocType>,\n    docInState?: RxDocumentData<RxDocType>\n) {\n    const document = row.document;\n    state.documents.set(docId, document as any);\n    for (let i = 0; i < stateByIndex.length; ++i) {\n        const byIndex = stateByIndex[i];\n        const docsWithIndex = byIndex.docsWithIndex;\n        const getIndexableString = byIndex.getIndexableString;\n        const newIndexString = getIndexableString(document as any);\n        const insertPosition = pushAtSortPosition(\n            docsWithIndex,\n            {\n                id: docId,\n                doc: document,\n                indexString: newIndexString\n            },\n            sortByIndexStringComparator,\n            0\n        );\n\n        /**\n         * Remove previous if it was in the state\n         */\n        if (docInState) {\n            const previousIndexString = getIndexableString(docInState);\n            if (previousIndexString === newIndexString) {\n                /**\n                 * Performance shortcut.\n                 * If index was not changed -> The old doc must be before or after the new one.\n                 */\n                const prev = docsWithIndex[insertPosition - 1];\n                if (prev && prev.id === docId) {\n                    docsWithIndex.splice(insertPosition - 1, 1);\n                } else {\n                    const next = docsWithIndex[insertPosition + 1];\n                    if (next.id === docId) {\n                        docsWithIndex.splice(insertPosition + 1, 1);\n                    } else {\n                        throw newRxError('SNH', {\n                            args: {\n                                row,\n                                byIndex\n                            }\n                        });\n                    }\n                }\n            } else {\n                /**\n                 * Index changed, we must search for the old one and remove it.\n                 */\n                const indexBefore = boundEQ(\n                    docsWithIndex,\n                    {\n                        indexString: previousIndexString\n                    } as any,\n                    compareDocsWithIndex\n                );\n                docsWithIndex.splice(indexBefore, 1);\n            }\n        }\n    }\n}\n\n\nexport function removeDocFromState<RxDocType>(\n    primaryPath: string,\n    schema: RxJsonSchema<RxDocumentData<RxDocType>>,\n    state: MemoryStorageInternals<RxDocType>,\n    doc: RxDocumentData<RxDocType>\n) {\n    const docId: string = (doc as any)[primaryPath];\n    state.documents.delete(docId);\n\n    Object.values(state.byIndex).forEach(byIndex => {\n        const docsWithIndex = byIndex.docsWithIndex;\n        const indexString = byIndex.getIndexableString(doc);\n\n        const positionInIndex = boundEQ(\n            docsWithIndex,\n            {\n                indexString\n            } as any,\n            compareDocsWithIndex\n        );\n        docsWithIndex.splice(positionInIndex, 1);\n    });\n}\n\n\nexport function compareDocsWithIndex<RxDocType>(\n    a: DocWithIndexString<RxDocType>,\n    b: DocWithIndexString<RxDocType>\n): 1 | 0 | -1 {\n    const indexStringA = a.indexString;\n    const indexStringB = b.indexString;\n    if (indexStringA < indexStringB) {\n        return -1;\n    } else if (indexStringA === indexStringB) {\n        return 0;\n    } else {\n        return 1;\n    }\n}\n"],"mappings":"AAWA,SACIA,kBAAkB,QACf,6BAA6B;AACpC,SAASC,UAAU,QAAQ,mBAAmB;AAC9C,SAASC,OAAO,QAAQ,2BAA2B;AAGnD,OAAO,SAASC,sBAAsBA,CAClCC,YAAoB,EACpBC,cAAsB,EACtBC,aAAqB,EACf;EACN,OAAO,CACHF,YAAY,EACZC,cAAc,EACdC,aAAa,CAChB,CAACC,IAAI,CAAC,YAAY,CAAC;AACxB;AAGA,OAAO,SAASC,gBAAgBA,CAC5BC,QAAsC,EACxC;EACE,IAAIA,QAAQ,CAACC,SAAS,CAACC,OAAO,EAAE;IAC5B,MAAM,IAAIC,KAAK,CAAC,SAAS,CAAC;EAC9B;AACJ;AAEA,OAAO,SAASC,gBAAgBA,CAACC,UAAkB,EAAEC,YAAoB,EAAU;EAC/E,OAAOD,UAAU,GAAG,IAAI,GAAGC,YAAY;AAC3C;AAEA,SAASC,2BAA2BA,CAAYC,CAAgC,EAAEC,CAAgC,EAAE;EAChH,IAAID,CAAC,CAACE,WAAW,GAAGD,CAAC,CAACC,WAAW,EAAE;IAC/B,OAAO,CAAC,CAAC;EACb,CAAC,MAAM;IACH,OAAO,CAAC;EACZ;AACJ;;AAIA;AACA;AACA;AACA,OAAO,SAASC,kBAAkBA,CAC9BC,KAAa,EACbC,KAAwC,EACxCC,YAAwD,EACxDC,GAA4B,EAC5BC,UAAsC,EACxC;EACE,IAAMC,QAAQ,GAAGF,GAAG,CAACE,QAAQ;EAC7BJ,KAAK,CAACK,SAAS,CAACC,GAAG,CAACP,KAAK,EAAEK,QAAe,CAAC;EAC3C,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,YAAY,CAACO,MAAM,EAAE,EAAED,CAAC,EAAE;IAC1C,IAAME,OAAO,GAAGR,YAAY,CAACM,CAAC,CAAC;IAC/B,IAAMG,aAAa,GAAGD,OAAO,CAACC,aAAa;IAC3C,IAAMC,kBAAkB,GAAGF,OAAO,CAACE,kBAAkB;IACrD,IAAMC,cAAc,GAAGD,kBAAkB,CAACP,QAAe,CAAC;IAC1D,IAAMS,cAAc,GAAGnC,kBAAkB,CACrCgC,aAAa,EACb;MACII,EAAE,EAAEf,KAAK;MACTgB,GAAG,EAAEX,QAAQ;MACbP,WAAW,EAAEe;IACjB,CAAC,EACDlB,2BAA2B,EAC3B,CACJ,CAAC;;IAED;AACR;AACA;IACQ,IAAIS,UAAU,EAAE;MACZ,IAAMa,mBAAmB,GAAGL,kBAAkB,CAACR,UAAU,CAAC;MAC1D,IAAIa,mBAAmB,KAAKJ,cAAc,EAAE;QACxC;AAChB;AACA;AACA;QACgB,IAAMK,IAAI,GAAGP,aAAa,CAACG,cAAc,GAAG,CAAC,CAAC;QAC9C,IAAII,IAAI,IAAIA,IAAI,CAACH,EAAE,KAAKf,KAAK,EAAE;UAC3BW,aAAa,CAACQ,MAAM,CAACL,cAAc,GAAG,CAAC,EAAE,CAAC,CAAC;QAC/C,CAAC,MAAM;UACH,IAAMM,IAAI,GAAGT,aAAa,CAACG,cAAc,GAAG,CAAC,CAAC;UAC9C,IAAIM,IAAI,CAACL,EAAE,KAAKf,KAAK,EAAE;YACnBW,aAAa,CAACQ,MAAM,CAACL,cAAc,GAAG,CAAC,EAAE,CAAC,CAAC;UAC/C,CAAC,MAAM;YACH,MAAMlC,UAAU,CAAC,KAAK,EAAE;cACpByC,IAAI,EAAE;gBACFlB,GAAG;gBACHO;cACJ;YACJ,CAAC,CAAC;UACN;QACJ;MACJ,CAAC,MAAM;QACH;AAChB;AACA;QACgB,IAAMY,WAAW,GAAGzC,OAAO,CACvB8B,aAAa,EACb;UACIb,WAAW,EAAEmB;QACjB,CAAC,EACDM,oBACJ,CAAC;QACDZ,aAAa,CAACQ,MAAM,CAACG,WAAW,EAAE,CAAC,CAAC;MACxC;IACJ;EACJ;AACJ;AAGA,OAAO,SAASE,kBAAkBA,CAC9BC,WAAmB,EACnBC,MAA+C,EAC/CzB,KAAwC,EACxCe,GAA8B,EAChC;EACE,IAAMhB,KAAa,GAAIgB,GAAG,CAASS,WAAW,CAAC;EAC/CxB,KAAK,CAACK,SAAS,CAACqB,MAAM,CAAC3B,KAAK,CAAC;EAE7B4B,MAAM,CAACC,MAAM,CAAC5B,KAAK,CAACS,OAAO,CAAC,CAACoB,OAAO,CAACpB,OAAO,IAAI;IAC5C,IAAMC,aAAa,GAAGD,OAAO,CAACC,aAAa;IAC3C,IAAMb,WAAW,GAAGY,OAAO,CAACE,kBAAkB,CAACI,GAAG,CAAC;IAEnD,IAAMe,eAAe,GAAGlD,OAAO,CAC3B8B,aAAa,EACb;MACIb;IACJ,CAAC,EACDyB,oBACJ,CAAC;IACDZ,aAAa,CAACQ,MAAM,CAACY,eAAe,EAAE,CAAC,CAAC;EAC5C,CAAC,CAAC;AACN;AAGA,OAAO,SAASR,oBAAoBA,CAChC3B,CAAgC,EAChCC,CAAgC,EACtB;EACV,IAAMmC,YAAY,GAAGpC,CAAC,CAACE,WAAW;EAClC,IAAMmC,YAAY,GAAGpC,CAAC,CAACC,WAAW;EAClC,IAAIkC,YAAY,GAAGC,YAAY,EAAE;IAC7B,OAAO,CAAC,CAAC;EACb,CAAC,MAAM,IAAID,YAAY,KAAKC,YAAY,EAAE;IACtC,OAAO,CAAC;EACZ,CAAC,MAAM;IACH,OAAO,CAAC;EACZ;AACJ","ignoreList":[]}