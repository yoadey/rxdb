{"version":3,"file":"rx-schema-helper.js","names":["newRxError","appendToArray","ensureNotFalsy","flatClone","getProperty","isMaybeReadonlyArray","REGEX_ALL_DOTS","RX_META_LWT_MINIMUM","sortObject","trimDots","getPseudoSchemaForVersion","version","primaryKey","pseudoSchema","fillWithDefaultSettings","type","properties","maxLength","indexes","required","getSchemaByObjectPath","rxJsonSchema","path","usePath","replace","ret","fillPrimaryKey","primaryPath","jsonSchema","documentData","newPrimary","getComposedPrimaryKeyOfDocumentData","existingPrimary","args","schema","getPrimaryFieldOfPrimaryKey","key","getLengthOfPrimaryKey","schemaPart","compositePrimary","fields","map","field","value","join","separator","normalizeRxJsonSchema","normalizedSchema","getDefaultIndex","schemaObj","additionalProperties","Object","prototype","hasOwnProperty","call","keyCompression","slice","encrypted","_rev","minLength","_attachments","_deleted","_meta","RX_META_SCHEMA","push","finalFields","getFinalFields","filter","includes","elem","pos","arr","indexOf","useIndexes","index","arIndex","unshift","length","internalIndexes","idx","hasIndex","Set","indexStr","has","add","lwt","minimum","maximum","multipleOf","keys","final","forEach","fillObjectWithDefaults","rxSchema","obj","defaultKeys","defaultValues","i","DEFAULT_CHECKPOINT_SCHEMA","id"],"sources":["../../src/rx-schema-helper.ts"],"sourcesContent":["import { newRxError } from './rx-error.ts';\nimport type {\n    CompositePrimaryKey,\n    DeepReadonly,\n    JsonSchema,\n    PrimaryKey,\n    RxDocumentData,\n    RxJsonSchema,\n    RxStorageDefaultCheckpoint,\n    StringKeys\n} from './types/index.d.ts';\nimport {\n    appendToArray,\n    ensureNotFalsy,\n    flatClone,\n    getProperty,\n    isMaybeReadonlyArray,\n    REGEX_ALL_DOTS,\n    RX_META_LWT_MINIMUM,\n    sortObject,\n    trimDots\n} from './plugins/utils/index.ts';\nimport type { RxSchema } from './rx-schema.ts';\n\n/**\n * Helper function to create a valid RxJsonSchema\n * with a given version.\n */\nexport function getPseudoSchemaForVersion<T = any>(\n    version: number,\n    primaryKey: StringKeys<T>\n): RxJsonSchema<RxDocumentData<T>> {\n    const pseudoSchema: RxJsonSchema<RxDocumentData<T>> = fillWithDefaultSettings({\n        version,\n        type: 'object',\n        primaryKey: primaryKey as any,\n        properties: {\n            [primaryKey]: {\n                type: 'string',\n                maxLength: 100\n            }\n        } as any,\n        indexes: [\n            [primaryKey]\n        ],\n        required: [primaryKey]\n    });\n    return pseudoSchema;\n}\n\n/**\n * Returns the sub-schema for a given path\n */\nexport function getSchemaByObjectPath<T = any>(\n    rxJsonSchema: RxJsonSchema<T>,\n    path: keyof T | string\n): JsonSchema {\n    let usePath: string = path as string;\n    usePath = usePath.replace(REGEX_ALL_DOTS, '.properties.');\n    usePath = 'properties.' + usePath;\n    usePath = trimDots(usePath);\n\n    const ret = getProperty(rxJsonSchema, usePath);\n    return ret;\n}\n\nexport function fillPrimaryKey<T>(\n    primaryPath: keyof T,\n    jsonSchema: RxJsonSchema<T>,\n    documentData: RxDocumentData<T>\n): RxDocumentData<T> {\n    // optimization shortcut.\n    if (typeof jsonSchema.primaryKey === 'string') {\n        return documentData;\n    }\n\n    const newPrimary = getComposedPrimaryKeyOfDocumentData<T>(\n        jsonSchema,\n        documentData\n    );\n    const existingPrimary: string | undefined = documentData[primaryPath] as any;\n    if (\n        existingPrimary &&\n        existingPrimary !== newPrimary\n    ) {\n        throw newRxError(\n            'DOC19',\n            {\n                args: {\n                    documentData,\n                    existingPrimary,\n                    newPrimary,\n                },\n                schema: jsonSchema\n            });\n    }\n\n    (documentData as any)[primaryPath] = newPrimary;\n    return documentData;\n}\n\nexport function getPrimaryFieldOfPrimaryKey<RxDocType>(\n    primaryKey: PrimaryKey<RxDocType>\n): StringKeys<RxDocType> {\n    if (typeof primaryKey === 'string') {\n        return primaryKey as any;\n    } else {\n        return (primaryKey as CompositePrimaryKey<RxDocType>).key;\n    }\n}\n\nexport function getLengthOfPrimaryKey<RxDocType>(\n    schema: RxJsonSchema<RxDocumentData<RxDocType>>\n): number {\n    const primaryPath = getPrimaryFieldOfPrimaryKey(schema.primaryKey);\n    const schemaPart = getSchemaByObjectPath(schema, primaryPath);\n    return ensureNotFalsy(schemaPart.maxLength);\n}\n\n/**\n * Returns the composed primaryKey of a document by its data.\n */\nexport function getComposedPrimaryKeyOfDocumentData<RxDocType>(\n    jsonSchema: RxJsonSchema<RxDocType> | RxJsonSchema<RxDocumentData<RxDocType>>,\n    documentData: Partial<RxDocType>\n): string {\n    if (typeof jsonSchema.primaryKey === 'string') {\n        return (documentData as any)[jsonSchema.primaryKey];\n    }\n\n    const compositePrimary: CompositePrimaryKey<RxDocType> = jsonSchema.primaryKey as any;\n    return compositePrimary.fields.map(field => {\n        const value = getProperty(documentData as any, field as string);\n        if (typeof value === 'undefined') {\n            throw newRxError('DOC18', { args: { field, documentData } });\n        }\n        return value;\n    }).join(compositePrimary.separator);\n}\n\n\n/**\n * Normalize the RxJsonSchema.\n * We need this to ensure everything is set up properly\n * and we have the same hash on schemas that represent the same value but\n * have different json.\n *\n * - Orders the schemas attributes by alphabetical order\n * - Adds the primaryKey to all indexes that do not contain the primaryKey\n * - We need this for deterministic sort order on all queries, which is required for event-reduce to work.\n *\n * @return RxJsonSchema - ordered and filled\n */\nexport function normalizeRxJsonSchema<T>(jsonSchema: RxJsonSchema<T>): RxJsonSchema<T> {\n    const normalizedSchema: RxJsonSchema<T> = sortObject(jsonSchema, true);\n    return normalizedSchema;\n}\n\n/**\n * If the schema does not specify any index,\n * we add this index so we at least can run RxQuery()\n * and only select non-deleted fields.\n */\nexport function getDefaultIndex(primaryPath: string) {\n    return ['_deleted', primaryPath];\n}\n\n/**\n * fills the schema-json with default-settings\n * @return cloned schemaObj\n */\nexport function fillWithDefaultSettings<T = any>(\n    schemaObj: RxJsonSchema<T>\n): RxJsonSchema<RxDocumentData<T>> {\n    schemaObj = flatClone(schemaObj);\n    const primaryPath: string = getPrimaryFieldOfPrimaryKey(schemaObj.primaryKey);\n    schemaObj.properties = flatClone(schemaObj.properties);\n\n    // additionalProperties is always false\n    schemaObj.additionalProperties = false;\n\n    // fill with key-compression-state ()\n    if (!Object.prototype.hasOwnProperty.call(schemaObj, 'keyCompression')) {\n        schemaObj.keyCompression = false;\n    }\n\n    // indexes must be array\n    schemaObj.indexes = schemaObj.indexes ? schemaObj.indexes.slice(0) : [];\n\n    // required must be array\n    schemaObj.required = schemaObj.required ? schemaObj.required.slice(0) : [];\n\n    // encrypted must be array\n    schemaObj.encrypted = schemaObj.encrypted ? schemaObj.encrypted.slice(0) : [];\n\n    // add _rev\n    (schemaObj.properties as any)._rev = {\n        type: 'string',\n        minLength: 1\n    };\n\n    // add attachments\n    (schemaObj.properties as any)._attachments = {\n        type: 'object'\n    };\n\n    // add deleted flag\n    (schemaObj.properties as any)._deleted = {\n        type: 'boolean'\n    };\n\n    // add meta property\n    (schemaObj.properties as any)._meta = RX_META_SCHEMA;\n\n    /**\n     * meta fields are all required\n     */\n    schemaObj.required = schemaObj.required ? schemaObj.required.slice(0) : [];\n    (schemaObj.required as string[]).push('_deleted');\n    (schemaObj.required as string[]).push('_rev');\n    (schemaObj.required as string[]).push('_meta');\n    (schemaObj.required as string[]).push('_attachments');\n\n    // final fields are always required\n    const finalFields = getFinalFields(schemaObj);\n    appendToArray(schemaObj.required as any, finalFields);\n    schemaObj.required = schemaObj.required\n        .filter((field: string) => !field.includes('.'))\n        .filter((elem: any, pos: any, arr: any) => arr.indexOf(elem) === pos); // unique;\n\n    // version is 0 by default\n    schemaObj.version = schemaObj.version || 0;\n\n    const useIndexes: string[][] = schemaObj.indexes.map(index => {\n        const arIndex = isMaybeReadonlyArray(index) ? index.slice(0) : [index];\n        /**\n         * Append primary key to indexes that do not contain the primaryKey.\n         * All indexes must have the primaryKey to ensure a deterministic sort order.\n         */\n        if (!arIndex.includes(primaryPath)) {\n            arIndex.push(primaryPath);\n        }\n\n        // add _deleted flag to all indexes so we can query only non-deleted fields\n        // in RxDB itself\n        if (arIndex[0] !== '_deleted') {\n            arIndex.unshift('_deleted');\n        }\n\n        return arIndex;\n    });\n\n    if (useIndexes.length === 0) {\n        useIndexes.push(getDefaultIndex(primaryPath));\n    }\n\n    // we need this index for the getChangedDocumentsSince() method\n    useIndexes.push(['_meta.lwt', primaryPath]);\n\n    // also add the internalIndexes\n    if (schemaObj.internalIndexes) {\n        schemaObj.internalIndexes.map(idx => {\n            useIndexes.push(idx);\n        });\n    }\n\n    // make indexes unique\n    const hasIndex = new Set<string>();\n    useIndexes.filter(index => {\n        const indexStr = index.join(',');\n        if (hasIndex.has(indexStr)) {\n            return false;\n        } else {\n            hasIndex.add(indexStr);\n            return true;\n        }\n    });\n\n    schemaObj.indexes = useIndexes;\n\n    return schemaObj as any;\n}\n\n\nexport const RX_META_SCHEMA: JsonSchema = {\n    type: 'object',\n    properties: {\n        /**\n         * The last-write time.\n         * Unix time in milliseconds.\n         */\n        lwt: {\n            type: 'number',\n            /**\n             * We use 1 as minimum so that the value is never falsy.\n             */\n            minimum: RX_META_LWT_MINIMUM,\n            maximum: 1000000000000000,\n            multipleOf: 0.01\n        }\n    },\n    /**\n     * Additional properties are allowed\n     * and can be used by plugins to set various flags.\n     */\n    additionalProperties: true as any,\n    required: [\n        'lwt'\n    ]\n};\n\n\n/**\n * returns the final-fields of the schema\n * @return field-names of the final-fields\n */\nexport function getFinalFields<T = any>(\n    jsonSchema: RxJsonSchema<T>\n): string[] {\n    const ret = Object.keys(jsonSchema.properties)\n        .filter(key => (jsonSchema as any).properties[key].final);\n\n    // primary is also final\n    const primaryPath = getPrimaryFieldOfPrimaryKey(jsonSchema.primaryKey);\n    ret.push(primaryPath);\n\n    // fields of composite primary are final\n    if (typeof jsonSchema.primaryKey !== 'string') {\n        (jsonSchema.primaryKey as CompositePrimaryKey<T>).fields\n            .forEach(field => ret.push(field as string));\n    }\n\n    return ret;\n}\n\n/**\n * fills all unset fields with default-values if set\n * @hotPath\n */\nexport function fillObjectWithDefaults(rxSchema: RxSchema<any>, obj: any): any {\n    const defaultKeys = Object.keys(rxSchema.defaultValues);\n    for (let i = 0; i < defaultKeys.length; ++i) {\n        const key = defaultKeys[i];\n        if (!Object.prototype.hasOwnProperty.call(obj, key) || typeof obj[key] === 'undefined') {\n            obj[key] = rxSchema.defaultValues[key];\n        }\n    }\n    return obj;\n}\n\nexport const DEFAULT_CHECKPOINT_SCHEMA: DeepReadonly<JsonSchema<RxStorageDefaultCheckpoint>> = {\n    type: 'object',\n    properties: {\n        id: {\n            type: 'string'\n        },\n        lwt: {\n            type: 'number'\n        }\n    },\n    required: [\n        'id',\n        'lwt'\n    ],\n    additionalProperties: false\n} as const;\n"],"mappings":"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","ignoreList":[]}