{"version":3,"file":"mongodb-helper.js","names":["flatClone","getPrimaryFieldOfPrimaryKey","RX_STORAGE_NAME_MONGODB","MONGO_ID_SUBSTITUTE_FIELDNAME","primarySwapMongoDBQuerySelector","primaryKey","selector","Array","isArray","map","item","ret","Object","entries","forEach","k","v","_id","startsWith","prepareMongoDBQuery","schema","mutateableQuery","preparedQuery","query","mongoSelector","mongoSort","swapToMongoSort","sort","swapMongoToRxDoc","docData","value","swapRxDocToMongo","sortPart","key","direction","mongoKey","mongoDirection","getMongoDBIndexName","index","join"],"sources":["../../../../src/plugins/storage-mongodb/mongodb-helper.ts"],"sourcesContent":["import type {\n    FilledMangoQuery,\n    MangoQuerySelector,\n    MangoQuerySortPart,\n    RxDocumentData,\n    RxJsonSchema\n} from '../../types/index.d.ts';\nimport {\n    Sort as MongoSort\n} from 'mongodb';\nimport { flatClone } from '../utils/index.ts';\nimport { MongoDBPreparedQuery, MongoQuerySelector } from './mongodb-types.ts';\nimport { getPrimaryFieldOfPrimaryKey } from '../../rx-schema-helper.ts';\nexport const RX_STORAGE_NAME_MONGODB = 'mongodb';\n\n/**\n * MongoDB uses the _id field by itself (max 12 bytes)\n * so we have to substitute the _id field if\n * it is used in the RxDocType.\n */\nexport const MONGO_ID_SUBSTITUTE_FIELDNAME = '__id';\n\nexport function primarySwapMongoDBQuerySelector<RxDocType>(\n    primaryKey: keyof RxDocType,\n    selector: MangoQuerySelector<RxDocType>\n): MongoQuerySelector<RxDocType> {\n    selector = flatClone(selector);\n\n    if (primaryKey !== '_id') {\n        return selector as any;\n    }\n    if (Array.isArray(selector)) {\n        return selector.map(item => primarySwapMongoDBQuerySelector(primaryKey, item)) as any;\n    } else if (typeof selector === 'object') {\n        const ret: any = {};\n        Object.entries(selector).forEach(([k, v]) => {\n            if (k === primaryKey) {\n                ret._id = v;\n            } else {\n                if (k.startsWith('$')) {\n                    ret[k] = primarySwapMongoDBQuerySelector(primaryKey, v as any);\n                } else {\n                    ret[k] = v;\n                }\n            }\n        });\n        return ret;\n    } else {\n        return selector;\n    }\n}\n\n\nexport function prepareMongoDBQuery<RxDocType>(\n    schema: RxJsonSchema<RxDocumentData<RxDocType>>,\n    mutateableQuery: FilledMangoQuery<RxDocType>\n) {\n    const primaryKey = getPrimaryFieldOfPrimaryKey(schema.primaryKey) as any;\n    const preparedQuery: MongoDBPreparedQuery<RxDocType> = {\n        query: mutateableQuery,\n        mongoSelector: primarySwapMongoDBQuerySelector(\n            primaryKey,\n            mutateableQuery.selector\n        ),\n        mongoSort: swapToMongoSort(mutateableQuery.sort)\n    };\n    return preparedQuery;\n};\n\n\nexport function swapMongoToRxDoc<RxDocType>(\n    docData: any\n): RxDocumentData<RxDocType> {\n    docData = flatClone(docData);\n    if ((docData as any)[MONGO_ID_SUBSTITUTE_FIELDNAME]) {\n        const value = (docData as any)[MONGO_ID_SUBSTITUTE_FIELDNAME];\n        delete (docData as any)[MONGO_ID_SUBSTITUTE_FIELDNAME];\n        (docData as any)._id = value;\n    } else {\n        delete (docData as any)._id;\n    }\n    return docData;\n}\n\nexport function swapRxDocToMongo<RxDocType>(\n    docData: RxDocumentData<RxDocType>\n): any {\n    docData = flatClone(docData);\n    if ((docData as any)._id) {\n        const value = (docData as any)._id;\n        delete (docData as any)._id;\n        (docData as any)[MONGO_ID_SUBSTITUTE_FIELDNAME] = value;\n    }\n    return docData;\n}\n\nexport function swapToMongoSort<RxDocType>(\n    sort: MangoQuerySortPart<RxDocType>[]\n): MongoSort {\n    const ret: MongoSort = {};\n    sort.forEach(sortPart => {\n        const [key, direction] = Object.entries(sortPart)[0];\n        const mongoKey = key === '_id' ? MONGO_ID_SUBSTITUTE_FIELDNAME : key;\n        const mongoDirection = direction === 'asc' ? 1 : -1;\n        ret[mongoKey] = mongoDirection;\n    });\n    return ret;\n}\n\nexport function getMongoDBIndexName(index: string[]): string {\n    return index.join('|');\n}\n"],"mappings":"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","ignoreList":[]}