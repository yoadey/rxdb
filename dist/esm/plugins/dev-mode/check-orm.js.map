{"version":3,"file":"check-orm.js","names":["newRxError","newRxTypeError","rxCollectionProperties","rxDocumentProperties","checkOrmMethods","statics","Object","entries","forEach","k","v","name","startsWith","type","includes","checkOrmDocumentMethods","schema","methods","topLevelFields","keys","properties","filter","funName"],"sources":["../../../../src/plugins/dev-mode/check-orm.ts"],"sourcesContent":["import {\n    newRxError,\n    newRxTypeError\n} from '../../rx-error.ts';\nimport type { KeyFunctionMap, RxJsonSchema } from '../../types/index.d.ts';\nimport { rxCollectionProperties, rxDocumentProperties } from './entity-properties.ts';\n\n/**\n * checks if the given static methods are allowed\n * @throws if not allowed\n */\nexport function checkOrmMethods(statics?: KeyFunctionMap) {\n    if (!statics) {\n        return;\n    }\n    Object\n        .entries(statics)\n        .forEach(([k, v]) => {\n            if (typeof k !== 'string') {\n                throw newRxTypeError('COL14', {\n                    name: k\n                });\n            }\n\n            if (k.startsWith('_')) {\n                throw newRxTypeError('COL15', {\n                    name: k\n                });\n            }\n\n            if (typeof v !== 'function') {\n                throw newRxTypeError('COL16', {\n                    name: k,\n                    type: typeof k\n                });\n            }\n\n            if (\n                rxCollectionProperties().includes(k) ||\n                rxDocumentProperties().includes(k)\n            ) {\n                throw newRxError('COL17', {\n                    name: k\n                });\n            }\n        });\n}\n\n\nexport function checkOrmDocumentMethods<RxDocType>(\n    schema: RxJsonSchema<RxDocType>,\n    methods?: any,\n) {\n    const topLevelFields = Object.keys(schema.properties) as (keyof RxDocType)[];\n    if (!methods) {\n        return;\n    }\n    Object.keys(methods)\n        .filter(funName => topLevelFields.includes(funName as any))\n        .forEach(funName => {\n            throw newRxError('COL18', {\n                funName\n            });\n        });\n}\n"],"mappings":"AAAA,SACIA,UAAU,EACVC,cAAc,QACX,mBAAmB;AAE1B,SAASC,sBAAsB,EAAEC,oBAAoB,QAAQ,wBAAwB;;AAErF;AACA;AACA;AACA;AACA,OAAO,SAASC,eAAeA,CAACC,OAAwB,EAAE;EACtD,IAAI,CAACA,OAAO,EAAE;IACV;EACJ;EACAC,MAAM,CACDC,OAAO,CAACF,OAAO,CAAC,CAChBG,OAAO,CAAC,CAAC,CAACC,CAAC,EAAEC,CAAC,CAAC,KAAK;IACjB,IAAI,OAAOD,CAAC,KAAK,QAAQ,EAAE;MACvB,MAAMR,cAAc,CAAC,OAAO,EAAE;QAC1BU,IAAI,EAAEF;MACV,CAAC,CAAC;IACN;IAEA,IAAIA,CAAC,CAACG,UAAU,CAAC,GAAG,CAAC,EAAE;MACnB,MAAMX,cAAc,CAAC,OAAO,EAAE;QAC1BU,IAAI,EAAEF;MACV,CAAC,CAAC;IACN;IAEA,IAAI,OAAOC,CAAC,KAAK,UAAU,EAAE;MACzB,MAAMT,cAAc,CAAC,OAAO,EAAE;QAC1BU,IAAI,EAAEF,CAAC;QACPI,IAAI,EAAE,OAAOJ;MACjB,CAAC,CAAC;IACN;IAEA,IACIP,sBAAsB,CAAC,CAAC,CAACY,QAAQ,CAACL,CAAC,CAAC,IACpCN,oBAAoB,CAAC,CAAC,CAACW,QAAQ,CAACL,CAAC,CAAC,EACpC;MACE,MAAMT,UAAU,CAAC,OAAO,EAAE;QACtBW,IAAI,EAAEF;MACV,CAAC,CAAC;IACN;EACJ,CAAC,CAAC;AACV;AAGA,OAAO,SAASM,uBAAuBA,CACnCC,MAA+B,EAC/BC,OAAa,EACf;EACE,IAAMC,cAAc,GAAGZ,MAAM,CAACa,IAAI,CAACH,MAAM,CAACI,UAAU,CAAwB;EAC5E,IAAI,CAACH,OAAO,EAAE;IACV;EACJ;EACAX,MAAM,CAACa,IAAI,CAACF,OAAO,CAAC,CACfI,MAAM,CAACC,OAAO,IAAIJ,cAAc,CAACJ,QAAQ,CAACQ,OAAc,CAAC,CAAC,CAC1Dd,OAAO,CAACc,OAAO,IAAI;IAChB,MAAMtB,UAAU,CAAC,OAAO,EAAE;MACtBsB;IACJ,CAAC,CAAC;EACN,CAAC,CAAC;AACV","ignoreList":[]}