{"version":3,"file":"rx-database.js","names":["IdleQueue","pluginMissing","flatClone","PROMISE_RESOLVE_FALSE","randomCouchString","ensureNotFalsy","getDefaultRevision","getDefaultRxDocumentMeta","defaultHashSha256","RXDB_VERSION","newRxError","createRxSchema","runPluginHooks","runAsyncPluginHooks","Subject","mergeMap","createRxCollection","flatCloneDocWithMeta","getSingleDocument","getWrappedStorageInstance","INTERNAL_STORAGE_NAME","ObliviousSet","ensureStorageTokenDocumentExists","getAllCollectionDocuments","getPrimaryKeyOfInternalDocument","INTERNAL_CONTEXT_COLLECTION","INTERNAL_STORE_SCHEMA","_collectionNamePrimary","removeCollectionStorages","overwritable","USED_DATABASE_NAMES","Set","DB_COUNT","RxDatabaseBase","name","token","storage","instanceCreationOptions","password","multiInstance","eventReduce","options","internalStore","hashFunction","cleanupPolicy","allowSlowCount","reactivity","idleQueue","rxdbVersion","storageInstances","_subs","startupErrors","onDestroy","destroyed","collections","states","eventBulks$","observable$","pipe","changeEventBulk","events","storageToken","storageTokenDocument","emittedEventBulkIds","asRxDatabase","catch","err","push","then","doc","data","_proto","prototype","getReactivityFactory","database","$emit","has","id","add","next","removeCollectionDoc","schema","writeDoc","_deleted","bulkWrite","document","previous","addCollections","collectionCreators","jsonSchemas","schemas","bulkPutDocs","useArgsByCollectionName","Promise","all","Object","entries","map","args","collectionName","rxJsonSchema","collectionNameWithVersion","collectionDocData","key","context","schemaHash","hash","jsonSchema","version","connectedStorages","_meta","_rev","_attachments","useArgs","assign","hookData","conflictHandler","putDocsResult","ensureNoStartupErrors","error","status","writeError","docInDb","documentInDb","collection","previousSchemaHash","previousSchema","ret","keys","defineProperty","get","lockedRun","fn","wrapCall","requestIdlePromise","exportJSON","_collections","addState","_name","importJSON","_exportedJSON","backup","_options","leaderElector","isLeader","waitForLeadership","migrationStates","destroy","complete","sub","unsubscribe","col","close","delete","remove","removeRxDatabase","_createClass","throwIfDatabaseNameUsed","link","createRxDatabaseStorageInstance","databaseInstanceToken","databaseName","createStorageInstance","devMode","isDevMode","createRxDatabase","ignoreDuplicate","localDocuments","storageInstance","rxDatabase","creator","dbInternalsStorageInstance","collectionDocs","collectionNames","forEach","removedCollectionNames","Array","from","isRxDatabase","obj","dbCount","isRxDatabaseFirstTimeInstantiated","tokenDoc","instanceToken"],"sources":["../../src/rx-database.ts"],"sourcesContent":["import { IdleQueue } from 'custom-idle-queue';\nimport type {\n    LeaderElector\n} from 'broadcast-channel';\nimport type {\n    CollectionsOfDatabase,\n    RxDatabase,\n    RxCollectionCreator,\n    RxJsonSchema,\n    RxCollection,\n    RxDumpDatabase,\n    RxDumpDatabaseAny,\n    BackupOptions,\n    RxStorage,\n    RxStorageInstance,\n    BulkWriteRow,\n    RxChangeEvent,\n    RxDatabaseCreator,\n    RxChangeEventBulk,\n    RxDocumentData,\n    RxCleanupPolicy,\n    InternalStoreDocType,\n    InternalStoreStorageTokenDocType,\n    InternalStoreCollectionDocType,\n    RxTypeError,\n    RxError,\n    HashFunction,\n    MaybePromise,\n    RxState\n} from './types/index.d.ts';\n\nimport {\n    pluginMissing,\n    flatClone,\n    PROMISE_RESOLVE_FALSE,\n    randomCouchString,\n    ensureNotFalsy,\n    getDefaultRevision,\n    getDefaultRxDocumentMeta,\n    defaultHashSha256,\n    RXDB_VERSION\n} from './plugins/utils/index.ts';\nimport {\n    newRxError\n} from './rx-error.ts';\nimport {\n    createRxSchema,\n    RxSchema\n} from './rx-schema.ts';\nimport {\n    runPluginHooks,\n    runAsyncPluginHooks\n} from './hooks.ts';\nimport {\n    Subject,\n    Subscription,\n    Observable\n} from 'rxjs';\nimport {\n    mergeMap\n} from 'rxjs/operators';\nimport {\n    createRxCollection\n} from './rx-collection.ts';\nimport {\n    flatCloneDocWithMeta,\n    getSingleDocument,\n    getWrappedStorageInstance,\n    INTERNAL_STORAGE_NAME,\n    WrappedRxStorageInstance\n} from './rx-storage-helper.ts';\nimport type { RxBackupState } from './plugins/backup/index.ts';\nimport { ObliviousSet } from 'oblivious-set';\nimport {\n    ensureStorageTokenDocumentExists,\n    getAllCollectionDocuments,\n    getPrimaryKeyOfInternalDocument,\n    INTERNAL_CONTEXT_COLLECTION,\n    INTERNAL_STORE_SCHEMA,\n    _collectionNamePrimary\n} from './rx-database-internal-store.ts';\nimport { removeCollectionStorages } from './rx-collection-helper.ts';\nimport { overwritable } from './overwritable.ts';\nimport type { RxMigrationState } from './plugins/migration-schema/index.ts';\nimport type { RxReactivityFactory } from './types/plugins/reactivity.d.ts';\n\n/**\n * stores the used database names+storage names\n * so we can throw when the same database is created more then once.\n */\nconst USED_DATABASE_NAMES: Set<string> = new Set();\n\nlet DB_COUNT = 0;\n\nexport class RxDatabaseBase<\n    Internals,\n    InstanceCreationOptions,\n    Collections = CollectionsOfDatabase,\n    Reactivity = unknown\n> {\n\n    public readonly idleQueue: IdleQueue = new IdleQueue();\n    public readonly rxdbVersion = RXDB_VERSION;\n\n    /**\n     * Contains all known non-closed storage instances\n     * that belong to this database.\n     * Used in plugins and unit tests.\n     */\n    public readonly storageInstances = new Set<WrappedRxStorageInstance<any, Internals, InstanceCreationOptions>>();\n\n    constructor(\n        public readonly name: string,\n        /**\n         * Uniquely identifies the instance\n         * of this RxDatabase.\n         */\n        public readonly token: string,\n        public readonly storage: RxStorage<Internals, InstanceCreationOptions>,\n        public readonly instanceCreationOptions: InstanceCreationOptions,\n        public readonly password: any,\n        public readonly multiInstance: boolean,\n        public readonly eventReduce: boolean = false,\n        public options: any = {},\n        /**\n         * Stores information documents about the collections of the database\n         */\n        public readonly internalStore: RxStorageInstance<InternalStoreDocType, Internals, InstanceCreationOptions>,\n        public readonly hashFunction: HashFunction,\n        public readonly cleanupPolicy?: Partial<RxCleanupPolicy>,\n        public readonly allowSlowCount?: boolean,\n        public readonly reactivity?: RxReactivityFactory<any>\n    ) {\n        DB_COUNT++;\n\n        /**\n         * In the dev-mode, we create a pseudoInstance\n         * to get all properties of RxDatabase and ensure they do not\n         * conflict with the collection names etc.\n         * So only if it is not pseudoInstance,\n         * we have all values to prepare a real RxDatabase.\n         *\n         * TODO this is ugly, we should use a different way in the dev-mode\n         * so that all non-dev-mode code can be cleaner.\n         */\n        if (this.name !== 'pseudoInstance') {\n            /**\n             * Wrap the internal store\n             * to ensure that calls to it also end up in\n             * calculation of the idle state and the hooks.\n             */\n            this.internalStore = getWrappedStorageInstance(\n                this.asRxDatabase,\n                internalStore,\n                INTERNAL_STORE_SCHEMA\n            );\n\n            /**\n             * Start writing the storage token.\n             * Do not await the creation because it would run\n             * in a critical path that increases startup time.\n             *\n             * Writing the token takes about 20 milliseconds\n             * even on a fast adapter, so this is worth it.\n             */\n            this.storageTokenDocument = ensureStorageTokenDocumentExists(this.asRxDatabase)\n                .catch(err => this.startupErrors.push(err) as any);\n            this.storageToken = this.storageTokenDocument\n                .then(doc => doc.data.token)\n                .catch(err => this.startupErrors.push(err) as any);\n        }\n    }\n\n    get $(): Observable<RxChangeEvent<any>> {\n        return this.observable$;\n    }\n\n    public getReactivityFactory(): RxReactivityFactory<Reactivity> {\n        if (!this.reactivity) {\n            throw newRxError('DB14', { database: this.name });\n        }\n        return this.reactivity;\n    }\n\n    public _subs: Subscription[] = [];\n\n    /**\n     * Because having unhandled exceptions would fail,\n     * we have to store the async errors of the constructor here\n     * so we can throw them later.\n     */\n    public startupErrors: (RxError | RxTypeError)[] = [];\n\n    /**\n     * When the database is destroyed,\n     * these functions will be called an awaited.\n     * Used to automatically clean up stuff that\n     * belongs to this collection.\n     */\n    public onDestroy: (() => MaybePromise<any>)[] = [];\n    public destroyed: boolean = false;\n    public collections: Collections = {} as any;\n    public states: { [name: string]: RxState<any, Reactivity>; } = {};\n    public readonly eventBulks$: Subject<RxChangeEventBulk<any>> = new Subject();\n    private observable$: Observable<RxChangeEvent<any>> = this.eventBulks$\n        .pipe(\n            mergeMap(changeEventBulk => changeEventBulk.events)\n        );\n\n    /**\n     * Unique token that is stored with the data.\n     * Used to detect if the dataset has been deleted\n     * and if two RxDatabase instances work on the same dataset or not.\n     *\n     * Because reading and writing the storageToken runs in the hot path\n     * of database creation, we do not await the storageWrites but instead\n     * work with the promise when we need the value.\n     */\n    public storageToken: Promise<string> = PROMISE_RESOLVE_FALSE as any;\n    /**\n     * Stores the whole state of the internal storage token document.\n     * We need this in some plugins.\n     */\n    public storageTokenDocument: Promise<RxDocumentData<InternalStoreStorageTokenDocType>> = PROMISE_RESOLVE_FALSE as any;\n\n    /**\n     * Contains the ids of all event bulks that have been emitted\n     * by the database.\n     * Used to detect duplicates that come in again via BroadcastChannel\n     * or other streams.\n     * TODO instead of having this here, we should add a test to ensure each RxStorage\n     * behaves equal and does never emit duplicate eventBulks.\n     */\n    public emittedEventBulkIds: ObliviousSet<string> = new ObliviousSet(60 * 1000);\n\n    /**\n     * This is the main handle-point for all change events\n     * ChangeEvents created by this instance go:\n     * RxDocument -> RxCollection -> RxDatabase.$emit -> MultiInstance\n     * ChangeEvents created by other instances go:\n     * MultiInstance -> RxDatabase.$emit -> RxCollection -> RxDatabase\n     */\n    $emit(changeEventBulk: RxChangeEventBulk<any>) {\n        if (this.emittedEventBulkIds.has(changeEventBulk.id)) {\n            return;\n        }\n        this.emittedEventBulkIds.add(changeEventBulk.id);\n\n        // emit into own stream\n        this.eventBulks$.next(changeEventBulk);\n    }\n\n    /**\n     * removes the collection-doc from the internalStore\n     */\n    async removeCollectionDoc(name: string, schema: any): Promise<void> {\n        const doc = await getSingleDocument(\n            this.internalStore,\n            getPrimaryKeyOfInternalDocument(\n                _collectionNamePrimary(name, schema),\n                INTERNAL_CONTEXT_COLLECTION\n            )\n        );\n        if (!doc) {\n            throw newRxError('SNH', { name, schema });\n        }\n        const writeDoc = flatCloneDocWithMeta(doc);\n        writeDoc._deleted = true;\n\n        await this.internalStore.bulkWrite([{\n            document: writeDoc,\n            previous: doc\n        }], 'rx-database-remove-collection');\n    }\n\n    /**\n     * creates multiple RxCollections at once\n     * to be much faster by saving db txs and doing stuff in bulk-operations\n     * This function is not called often, but mostly in the critical path at the initial page load\n     * So it must be as fast as possible.\n     */\n    async addCollections<CreatedCollections = Partial<Collections>>(collectionCreators: {\n        [key in keyof CreatedCollections]: RxCollectionCreator<any>\n    }): Promise<{ [key in keyof CreatedCollections]: RxCollection<any, {}, {}, {}, Reactivity> }> {\n        const jsonSchemas: { [key in keyof CreatedCollections]: RxJsonSchema<any> } = {} as any;\n        const schemas: { [key in keyof CreatedCollections]: RxSchema<any> } = {} as any;\n        const bulkPutDocs: BulkWriteRow<InternalStoreCollectionDocType>[] = [];\n        const useArgsByCollectionName: any = {};\n\n        await Promise.all(\n            Object.entries(collectionCreators).map(async ([name, args]) => {\n                const collectionName: keyof CreatedCollections = name as any;\n                const rxJsonSchema = (args as RxCollectionCreator<any>).schema;\n                jsonSchemas[collectionName] = rxJsonSchema;\n                const schema = createRxSchema(rxJsonSchema, this.hashFunction);\n                schemas[collectionName] = schema;\n\n                // collection already exists\n                if ((this.collections as any)[name]) {\n                    throw newRxError('DB3', {\n                        name\n                    });\n                }\n\n                const collectionNameWithVersion = _collectionNamePrimary(name, rxJsonSchema);\n                const collectionDocData: RxDocumentData<InternalStoreCollectionDocType> = {\n                    id: getPrimaryKeyOfInternalDocument(\n                        collectionNameWithVersion,\n                        INTERNAL_CONTEXT_COLLECTION\n                    ),\n                    key: collectionNameWithVersion,\n                    context: INTERNAL_CONTEXT_COLLECTION,\n                    data: {\n                        name: collectionName as any,\n                        schemaHash: await schema.hash,\n                        schema: schema.jsonSchema,\n                        version: schema.version,\n                        connectedStorages: []\n                    },\n                    _deleted: false,\n                    _meta: getDefaultRxDocumentMeta(),\n                    _rev: getDefaultRevision(),\n                    _attachments: {}\n                };\n                bulkPutDocs.push({\n                    document: collectionDocData\n                });\n\n                const useArgs: any = Object.assign(\n                    {},\n                    args,\n                    {\n                        name: collectionName,\n                        schema,\n                        database: this\n                    }\n                );\n\n                // run hooks\n                const hookData: RxCollectionCreator<any> & { name: string; } = flatClone(args) as any;\n                (hookData as any).database = this;\n                hookData.name = name;\n                runPluginHooks('preCreateRxCollection', hookData);\n                useArgs.conflictHandler = hookData.conflictHandler;\n\n                useArgsByCollectionName[collectionName] = useArgs;\n            })\n        );\n\n\n        const putDocsResult = await this.internalStore.bulkWrite(\n            bulkPutDocs,\n            'rx-database-add-collection'\n        );\n\n        await ensureNoStartupErrors(this);\n\n        await Promise.all(\n            putDocsResult.error.map(async (error) => {\n                if (error.status !== 409) {\n                    throw newRxError('DB12', {\n                        database: this.name,\n                        writeError: error\n                    });\n                }\n                const docInDb: RxDocumentData<InternalStoreCollectionDocType> = ensureNotFalsy(error.documentInDb);\n                const collectionName = docInDb.data.name;\n                const schema = (schemas as any)[collectionName];\n                // collection already exists but has different schema\n                if (docInDb.data.schemaHash !== await schema.hash) {\n                    throw newRxError('DB6', {\n                        database: this.name,\n                        collection: collectionName,\n                        previousSchemaHash: docInDb.data.schemaHash,\n                        schemaHash: await schema.hash,\n                        previousSchema: docInDb.data.schema,\n                        schema: ensureNotFalsy((jsonSchemas as any)[collectionName])\n                    });\n                }\n            })\n        );\n\n        const ret: { [key in keyof CreatedCollections]: RxCollection<any, {}, {}, {}, Reactivity> } = {} as any;\n        await Promise.all(\n            Object.keys(collectionCreators).map(async (collectionName) => {\n                const useArgs = useArgsByCollectionName[collectionName];\n                const collection = await createRxCollection(useArgs);\n                (ret as any)[collectionName] = collection;\n\n                // set as getter to the database\n                (this.collections as any)[collectionName] = collection;\n                if (!(this as any)[collectionName]) {\n                    Object.defineProperty(this, collectionName, {\n                        get: () => (this.collections as any)[collectionName]\n                    });\n                }\n            })\n        );\n\n        return ret;\n    }\n\n    /**\n     * runs the given function between idleQueue-locking\n     */\n    lockedRun<T>(fn: (...args: any[]) => T): T extends Promise<any> ? T : Promise<T> {\n        return this.idleQueue.wrapCall(fn) as any;\n    }\n\n    requestIdlePromise() {\n        return this.idleQueue.requestIdlePromise();\n    }\n\n    /**\n     * Export database to a JSON friendly format.\n     */\n    exportJSON(_collections?: string[]): Promise<RxDumpDatabase<Collections>>;\n    exportJSON(_collections?: string[]): Promise<RxDumpDatabaseAny<Collections>>;\n    exportJSON(_collections?: string[]): Promise<any> {\n        throw pluginMissing('json-dump');\n    }\n\n    addState<T = any>(_name?: string): Promise<RxState<T, Reactivity>> {\n        throw pluginMissing('state');\n    }\n\n    /**\n     * Import the parsed JSON export into the collection.\n     * @param _exportedJSON The previously exported data from the `<db>.exportJSON()` method.\n     * @note When an interface is loaded in this collection all base properties of the type are typed as `any`\n     * since data could be encrypted.\n     */\n    importJSON(_exportedJSON: RxDumpDatabaseAny<Collections>): Promise<void> {\n        throw pluginMissing('json-dump');\n    }\n\n    backup(_options: BackupOptions): RxBackupState {\n        throw pluginMissing('backup');\n    }\n\n    public leaderElector(): LeaderElector {\n        throw pluginMissing('leader-election');\n    }\n\n    public isLeader(): boolean {\n        throw pluginMissing('leader-election');\n    }\n    /**\n     * returns a promise which resolves when the instance becomes leader\n     */\n    public waitForLeadership(): Promise<boolean> {\n        throw pluginMissing('leader-election');\n    }\n\n    public migrationStates(): Observable<RxMigrationState[]> {\n        throw pluginMissing('migration-schema');\n    }\n\n    /**\n     * destroys the database-instance and all collections\n     */\n    public async destroy(): Promise<boolean> {\n        if (this.destroyed) {\n            return PROMISE_RESOLVE_FALSE;\n        }\n\n        // settings destroyed = true must be the first thing to do.\n        this.destroyed = true;\n\n        await runAsyncPluginHooks('preDestroyRxDatabase', this);\n        /**\n         * Complete the event stream\n         * to stop all subscribers who forgot to unsubscribe.\n         */\n        this.eventBulks$.complete();\n\n        DB_COUNT--;\n        this._subs.map(sub => sub.unsubscribe());\n\n        /**\n         * Destroying the pseudo instance will throw\n         * because stuff is missing\n         * TODO we should not need the pseudo instance on runtime.\n         * we should generate the property list on build time.\n         */\n        if (this.name === 'pseudoInstance') {\n            return PROMISE_RESOLVE_FALSE;\n        }\n\n        /**\n         * First wait until the database is idle\n         */\n        return this.requestIdlePromise()\n            .then(() => Promise.all(this.onDestroy.map(fn => fn())))\n            // destroy all collections\n            .then(() => Promise.all(\n                Object.keys(this.collections as any)\n                    .map(key => (this.collections as any)[key])\n                    .map(col => col.destroy())\n            ))\n            // destroy internal storage instances\n            .then(() => this.internalStore.close())\n            // remove combination from USED_COMBINATIONS-map\n            .then(() => USED_DATABASE_NAMES.delete(this.storage.name + '|' + this.name))\n            .then(() => true);\n    }\n\n    /**\n     * deletes the database and its stored data.\n     * Returns the names of all removed collections.\n     */\n    remove(): Promise<string[]> {\n        return this\n            .destroy()\n            .then(() => removeRxDatabase(this.name, this.storage, this.password));\n    }\n\n    get asRxDatabase(): RxDatabase<\n        {},\n        Internals,\n        InstanceCreationOptions,\n        Reactivity\n    > {\n        return this as any;\n    }\n}\n\n/**\n * checks if an instance with same name and storage already exists\n * @throws {RxError} if used\n */\nfunction throwIfDatabaseNameUsed(\n    name: string,\n    storage: RxStorage<any, any>\n) {\n    const key = storage.name + '|' + name;\n    if (!USED_DATABASE_NAMES.has(key)) {\n        return;\n    } else {\n        throw newRxError('DB8', {\n            name,\n            storage: storage.name,\n            link: 'https://rxdb.info/rx-database.html#ignoreduplicate'\n        });\n    }\n}\n\n/**\n * Creates the storage instances that are used internally in the database\n * to store schemas and other configuration stuff.\n */\nexport async function createRxDatabaseStorageInstance<Internals, InstanceCreationOptions>(\n    databaseInstanceToken: string,\n    storage: RxStorage<Internals, InstanceCreationOptions>,\n    databaseName: string,\n    options: InstanceCreationOptions,\n    multiInstance: boolean,\n    password?: string\n): Promise<RxStorageInstance<InternalStoreDocType, Internals, InstanceCreationOptions>> {\n    const internalStore = await storage.createStorageInstance<InternalStoreDocType>(\n        {\n            databaseInstanceToken,\n            databaseName,\n            collectionName: INTERNAL_STORAGE_NAME,\n            schema: INTERNAL_STORE_SCHEMA,\n            options,\n            multiInstance,\n            password,\n            devMode: overwritable.isDevMode()\n        }\n    );\n    return internalStore;\n}\n\nexport function createRxDatabase<\n    Collections = { [key: string]: RxCollection; },\n    Internals = any,\n    InstanceCreationOptions = any,\n    Reactivity = unknown\n>(\n    {\n        storage,\n        instanceCreationOptions,\n        name,\n        password,\n        multiInstance = true,\n        eventReduce = true,\n        ignoreDuplicate = false,\n        options = {},\n        cleanupPolicy,\n        allowSlowCount = false,\n        localDocuments = false,\n        hashFunction = defaultHashSha256,\n        reactivity\n    }: RxDatabaseCreator<Internals, InstanceCreationOptions, Reactivity>\n): Promise<\n    RxDatabase<Collections, Internals, InstanceCreationOptions, Reactivity>\n> {\n    runPluginHooks('preCreateRxDatabase', {\n        storage,\n        instanceCreationOptions,\n        name,\n        password,\n        multiInstance,\n        eventReduce,\n        ignoreDuplicate,\n        options,\n        localDocuments\n    });\n    // check if combination already used\n    if (!ignoreDuplicate) {\n        throwIfDatabaseNameUsed(name, storage);\n    }\n    USED_DATABASE_NAMES.add(storage.name + '|' + name);\n\n    const databaseInstanceToken = randomCouchString(10);\n\n    return createRxDatabaseStorageInstance<\n        Internals,\n        InstanceCreationOptions\n    >(\n        databaseInstanceToken,\n        storage,\n        name,\n        instanceCreationOptions as any,\n        multiInstance,\n        password\n    )\n        /**\n         * Creating the internal store might fail\n         * if some RxStorage wrapper is used that does some checks\n         * and then throw.\n         * In that case we have to properly clean up the database.\n         */\n        .catch(err => {\n            USED_DATABASE_NAMES.delete(storage.name + '|' + name);\n            throw err;\n        })\n        .then(storageInstance => {\n            const rxDatabase: RxDatabase<Collections> = new RxDatabaseBase(\n                name,\n                databaseInstanceToken,\n                storage,\n                instanceCreationOptions,\n                password,\n                multiInstance,\n                eventReduce,\n                options,\n                storageInstance,\n                hashFunction,\n                cleanupPolicy,\n                allowSlowCount,\n                reactivity\n            ) as any;\n\n            return runAsyncPluginHooks('createRxDatabase', {\n                database: rxDatabase,\n                creator: {\n                    storage,\n                    instanceCreationOptions,\n                    name,\n                    password,\n                    multiInstance,\n                    eventReduce,\n                    ignoreDuplicate,\n                    options,\n                    localDocuments\n                }\n            }).then(() => rxDatabase);\n        });\n}\n\n/**\n * Removes the database and all its known data\n * with all known collections and all internal meta data.\n *\n * Returns the names of the removed collections.\n */\nexport async function removeRxDatabase(\n    databaseName: string,\n    storage: RxStorage<any, any>,\n    password?: string\n): Promise<string[]> {\n    const databaseInstanceToken = randomCouchString(10);\n    const dbInternalsStorageInstance = await createRxDatabaseStorageInstance(\n        databaseInstanceToken,\n        storage,\n        databaseName,\n        {},\n        false,\n        password\n    );\n    const collectionDocs = await getAllCollectionDocuments(dbInternalsStorageInstance);\n    const collectionNames = new Set<string>();\n    collectionDocs.forEach(doc => collectionNames.add(doc.data.name));\n    const removedCollectionNames: string[] = Array.from(collectionNames);\n\n    await Promise.all(\n        removedCollectionNames.map(collectionName => removeCollectionStorages(\n            storage,\n            dbInternalsStorageInstance,\n            databaseInstanceToken,\n            databaseName,\n            collectionName,\n            password\n        ))\n    );\n\n    await runAsyncPluginHooks('postRemoveRxDatabase', {\n        databaseName,\n        storage\n    });\n\n    await dbInternalsStorageInstance.remove();\n    return removedCollectionNames;\n}\n\nexport function isRxDatabase(obj: any) {\n    return obj instanceof RxDatabaseBase;\n}\n\nexport function dbCount(): number {\n    return DB_COUNT;\n}\n\n\n/**\n * Returns true if the given RxDatabase was the first\n * instance that was created on the storage with this name.\n *\n * Can be used for some optimizations because on the first instantiation,\n * we can assume that no data was written before.\n */\nexport async function isRxDatabaseFirstTimeInstantiated(\n    database: RxDatabase\n): Promise<boolean> {\n    const tokenDoc = await database.storageTokenDocument;\n    return tokenDoc.data.instanceToken === database.token;\n}\n\n\n/**\n * For better performance some tasks run async\n * and are awaited later.\n * But we still have to ensure that there have been no errors\n * on database creation.\n */\nexport async function ensureNoStartupErrors(\n    rxDatabase: RxDatabaseBase<any, any, any, any>\n) {\n    await rxDatabase.storageToken;\n    if (rxDatabase.startupErrors[0]) {\n        throw rxDatabase.startupErrors[0];\n    }\n}\n"],"mappings":"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","ignoreList":[]}