{"version":3,"file":"meta-instance.js","names":["_rxSchemaHelper","require","_rxStorageHelper","_index","META_INSTANCE_SCHEMA_TITLE","exports","getRxReplicationMetaInstanceSchema","replicatedDocumentsSchema","encrypted","parentPrimaryKeyLength","getLengthOfPrimaryKey","baseSchema","title","primaryKey","key","fields","separator","type","version","additionalProperties","properties","id","minLength","maxLength","isCheckpoint","enum","itemId","checkpointData","docData","isResolvedConflict","keyCompression","required","metaInstanceSchema","fillWithDefaultSettings","getAssumedMasterState","state","docIds","input","metaInstance","findDocumentsById","map","docId","useId","getComposedPrimaryKeyOfDocumentData","schema","then","metaDocs","ret","Object","values","forEach","metaDoc","metaDocument","getMetaWriteRow","newMasterDocState","previous","primaryPath","newMeta","flatCloneDocWithMeta","_attachments","_deleted","_rev","getDefaultRevision","_meta","lwt","now","createRevision","checkpointKey","document"],"sources":["../../../src/replication-protocol/meta-instance.ts"],"sourcesContent":["import {\n    fillWithDefaultSettings,\n    getComposedPrimaryKeyOfDocumentData,\n    getLengthOfPrimaryKey\n} from '../rx-schema-helper.ts';\nimport { flatCloneDocWithMeta } from '../rx-storage-helper.ts';\nimport type {\n    BulkWriteRow,\n    ById,\n    RxDocumentData,\n    RxJsonSchema,\n    RxStorageInstanceReplicationState,\n    RxStorageReplicationMeta,\n    WithDeleted\n} from '../types/index.d.ts';\nimport {\n    getDefaultRevision,\n    createRevision,\n    now\n} from '../plugins/utils/index.ts';\n\n\nexport const META_INSTANCE_SCHEMA_TITLE = 'RxReplicationProtocolMetaData';\n\nexport function getRxReplicationMetaInstanceSchema<RxDocType, CheckpointType>(\n    replicatedDocumentsSchema: RxJsonSchema<RxDocumentData<RxDocType>>,\n    encrypted: boolean\n): RxJsonSchema<RxDocumentData<RxStorageReplicationMeta<RxDocType, CheckpointType>>> {\n    const parentPrimaryKeyLength = getLengthOfPrimaryKey(replicatedDocumentsSchema);\n\n    const baseSchema: RxJsonSchema<RxStorageReplicationMeta<RxDocType, CheckpointType>> = {\n        title: META_INSTANCE_SCHEMA_TITLE,\n        primaryKey: {\n            key: 'id',\n            fields: [\n                'itemId',\n                'isCheckpoint'\n            ],\n            separator: '|'\n        },\n        type: 'object',\n        version: replicatedDocumentsSchema.version,\n        additionalProperties: false,\n        properties: {\n            id: {\n                type: 'string',\n                minLength: 1,\n                // add +1 for the '|' and +1 for the 'isCheckpoint' flag\n                maxLength: parentPrimaryKeyLength + 2\n            },\n            isCheckpoint: {\n                type: 'string',\n                enum: [\n                    '0',\n                    '1'\n                ],\n                minLength: 1,\n                maxLength: 1\n            },\n            itemId: {\n                type: 'string',\n                /**\n                 * ensure that all values of RxStorageReplicationDirection ('DOWN' has 4 chars) fit into it\n                 * because checkpoints use the itemId field for that.\n                 */\n                maxLength: parentPrimaryKeyLength > 4 ? parentPrimaryKeyLength : 4\n            },\n            checkpointData: {\n                type: 'object',\n                additionalProperties: true\n            },\n            docData: {\n                type: 'object',\n                properties: replicatedDocumentsSchema.properties\n            },\n            isResolvedConflict: {\n                type: 'string'\n            }\n        },\n        keyCompression: replicatedDocumentsSchema.keyCompression,\n        required: [\n            'id',\n            'isCheckpoint',\n            'itemId'\n        ]\n    };\n    if (encrypted) {\n        baseSchema.encrypted = ['docData'];\n    }\n    const metaInstanceSchema: RxJsonSchema<RxDocumentData<RxStorageReplicationMeta<RxDocType, CheckpointType>>> = fillWithDefaultSettings(baseSchema);\n    return metaInstanceSchema;\n}\n\n\n\n/**\n * Returns the document states of what the fork instance\n * assumes to be the latest state on the master instance.\n */\nexport function getAssumedMasterState<RxDocType>(\n    state: RxStorageInstanceReplicationState<RxDocType>,\n    docIds: string[]\n): Promise<ById<{\n    docData: WithDeleted<RxDocType>;\n    metaDocument: RxDocumentData<RxStorageReplicationMeta<RxDocType, any>>;\n}>> {\n    return state.input.metaInstance.findDocumentsById(\n        docIds.map(docId => {\n            const useId = getComposedPrimaryKeyOfDocumentData(\n                state.input.metaInstance.schema,\n                {\n                    itemId: docId,\n                    isCheckpoint: '0'\n                }\n            );\n            return useId;\n        }),\n        true\n    ).then(metaDocs => {\n        const ret: {\n            [docId: string]: {\n                docData: RxDocumentData<RxDocType>;\n                metaDocument: RxDocumentData<RxStorageReplicationMeta<RxDocType, any>>;\n            };\n        } = {};\n        Object\n            .values(metaDocs)\n            .forEach((metaDoc) => {\n                ret[metaDoc.itemId] = {\n                    docData: metaDoc.docData,\n                    metaDocument: metaDoc\n                };\n            });\n\n        return ret;\n    });\n}\n\n\nexport async function getMetaWriteRow<RxDocType>(\n    state: RxStorageInstanceReplicationState<RxDocType>,\n    newMasterDocState: WithDeleted<RxDocType>,\n    previous?: RxDocumentData<RxStorageReplicationMeta<RxDocType, any>>,\n    isResolvedConflict?: string\n): Promise<BulkWriteRow<RxStorageReplicationMeta<RxDocType, any>>> {\n    const docId: string = (newMasterDocState as any)[state.primaryPath];\n    const newMeta: RxDocumentData<RxStorageReplicationMeta<RxDocType, any>> = previous ? flatCloneDocWithMeta(\n        previous\n    ) : {\n        id: '',\n        isCheckpoint: '0',\n        itemId: docId,\n        docData: newMasterDocState,\n        _attachments: {},\n        _deleted: false,\n        _rev: getDefaultRevision(),\n        _meta: {\n            lwt: 0\n        }\n    };\n    newMeta.docData = newMasterDocState;\n\n    /**\n     * Sending isResolvedConflict with the value undefined\n     * will throw a schema validation error because it must be either\n     * not set or have a string.\n     */\n    if (isResolvedConflict) {\n        newMeta.isResolvedConflict = isResolvedConflict;\n    }\n\n    newMeta._meta.lwt = now();\n    newMeta.id = getComposedPrimaryKeyOfDocumentData(\n        state.input.metaInstance.schema,\n        newMeta\n    );\n    newMeta._rev = createRevision(\n        await state.checkpointKey,\n        previous\n    );\n\n    const ret = {\n        previous,\n        document: newMeta\n    };\n\n    return ret;\n}\n"],"mappings":"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","ignoreList":[]}