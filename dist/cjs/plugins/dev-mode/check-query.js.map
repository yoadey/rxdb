{"version":3,"file":"check-query.js","names":["_rxError","require","_index","_rxQuery","checkQuery","args","isPlainObject","Object","prototype","toString","call","queryObj","newRxTypeError","op","collection","name","validKeys","keys","forEach","key","includes","limit","skip","newRxError","query","ensureObjectDoesNotContainRegExp","checkMangoQuery","schema","rxQuery","jsonSchema","massagedSelector","mangoQuery","selector","schemaTopLevelFields","properties","filter","fieldOrOperator","startsWith","field","schemaIndexes","indexes","index","isInSchema","find","schemaIndex","deepEqual","areSelectorsSatisfiedByIndex","database","allowSlowCount","sort","map","sortPart","preparedQuery","prepareQuery","queryPlan","selectorSatisfiedByIndex","value","RegExp","Array","isArray","item"],"sources":["../../../../src/plugins/dev-mode/check-query.ts"],"sourcesContent":["import type {\n    RxPluginPreCreateRxQueryArgs,\n    MangoQuery,\n    RxPluginPrePrepareQueryArgs,\n    FilledMangoQuery,\n    RxJsonSchema,\n    RxDocumentData,\n    MangoQuerySelector,\n    PreparedQuery\n} from '../../types/index.d.ts';\nimport { newRxError, newRxTypeError } from '../../rx-error.ts';\nimport { deepEqual } from '../utils/index.ts';\nimport { prepareQuery } from '../../rx-query.ts';\n\n/**\n * accidentally passing a non-valid object into the query params\n * is very hard to debug especially when queries are observed\n * This is why we do some checks here in dev-mode\n */\nexport function checkQuery(args: RxPluginPreCreateRxQueryArgs) {\n    const isPlainObject = Object.prototype.toString.call(args.queryObj) === '[object Object]';\n    if (!isPlainObject) {\n        throw newRxTypeError('QU11', {\n            op: args.op,\n            collection: args.collection.name,\n            queryObj: args.queryObj\n        });\n    }\n\n    const validKeys: (keyof MangoQuery)[] = [\n        'selector',\n        'limit',\n        'skip',\n        'sort',\n        'index'\n    ];\n    Object.keys(args.queryObj).forEach(key => {\n        if (!(validKeys as string[]).includes(key)) {\n            throw newRxTypeError('QU11', {\n                op: args.op,\n                collection: args.collection.name,\n                queryObj: args.queryObj,\n                key,\n                args: {\n                    validKeys\n                }\n            });\n        }\n    });\n\n    // do not allow skip or limit for count queries\n    if (\n        args.op === 'count' &&\n        (\n            args.queryObj.limit ||\n            args.queryObj.skip\n        )\n    ) {\n        throw newRxError(\n            'QU15',\n            {\n                collection: args.collection.name,\n                query: args.queryObj\n            }\n        );\n    }\n\n    ensureObjectDoesNotContainRegExp(args.queryObj);\n}\n\n\nexport function checkMangoQuery(args: RxPluginPrePrepareQueryArgs) {\n    const schema = args.rxQuery.collection.schema.jsonSchema;\n\n    /**\n     * Ensure that all top level fields are included in the schema.\n     * TODO this check can be augmented to also check sub-fields.\n     */\n    const massagedSelector: MangoQuerySelector<any> = args.mangoQuery.selector;\n    const schemaTopLevelFields = Object.keys(schema.properties);\n    Object.keys(massagedSelector)\n        // do not check operators\n        .filter(fieldOrOperator => !fieldOrOperator.startsWith('$'))\n        // skip this check on non-top-level fields\n        .filter(field => !field.includes('.'))\n        .forEach(field => {\n            if (!schemaTopLevelFields.includes(field)) {\n                throw newRxError('QU13', {\n                    schema,\n                    field,\n                    query: args.mangoQuery,\n                });\n            }\n        });\n\n    /**\n     * ensure if custom index is set,\n     * it is also defined in the schema\n     */\n    const schemaIndexes = schema.indexes ? schema.indexes : [];\n    const index = args.mangoQuery.index;\n    if (index) {\n        const isInSchema = schemaIndexes.find(schemaIndex => deepEqual(schemaIndex, index));\n        if (!isInSchema) {\n            throw newRxError(\n                'QU12',\n                {\n                    collection: args.rxQuery.collection.name,\n                    query: args.mangoQuery,\n                    schema\n                }\n            );\n        }\n    }\n\n\n    /**\n     * Ensure that a count() query can only be used\n     * with selectors that are fully satisfied by the used index.\n     */\n    if (args.rxQuery.op === 'count') {\n        if (\n            !areSelectorsSatisfiedByIndex(\n                args.rxQuery.collection.schema.jsonSchema,\n                args.mangoQuery\n            ) &&\n            !args.rxQuery.collection.database.allowSlowCount\n        ) {\n            throw newRxError('QU14', {\n                collection: args.rxQuery.collection,\n                query: args.mangoQuery\n            });\n        }\n    }\n\n    /**\n     * Ensure that sort only runs on known fields\n     * TODO also check nested fields\n     */\n    if (args.mangoQuery.sort) {\n        args.mangoQuery.sort\n            .map(sortPart => Object.keys(sortPart)[0])\n            .filter(field => !field.includes('.'))\n            .forEach(field => {\n                if (!schemaTopLevelFields.includes(field)) {\n                    throw newRxError('QU13', {\n                        schema,\n                        field,\n                        query: args.mangoQuery,\n                    });\n                }\n            });\n    }\n\n    // Do not allow RexExp instances\n    ensureObjectDoesNotContainRegExp(args.mangoQuery);\n}\n\n\nexport function areSelectorsSatisfiedByIndex<RxDocType>(\n    schema: RxJsonSchema<RxDocumentData<RxDocType>>,\n    query: FilledMangoQuery<RxDocType>\n): boolean {\n    const preparedQuery: PreparedQuery<any> = prepareQuery(\n        schema,\n        query\n    );\n    return preparedQuery.queryPlan.selectorSatisfiedByIndex;\n}\n\n/**\n * Ensures that the selector does not contain any RegExp instance.\n * @recursive\n */\nexport function ensureObjectDoesNotContainRegExp(selector: any) {\n    if (typeof selector !== 'object' || selector === null) {\n        return;\n    }\n    const keys = Object.keys(selector);\n    keys.forEach(key => {\n        const value: any = selector[key];\n        if (value instanceof RegExp) {\n            throw newRxError('QU16', {\n                field: key,\n                query: selector,\n            });\n        } else if (Array.isArray(value)) {\n            value.forEach(item => ensureObjectDoesNotContainRegExp(item));\n        } else {\n            ensureObjectDoesNotContainRegExp(value);\n        }\n    });\n}\n"],"mappings":"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","ignoreList":[]}