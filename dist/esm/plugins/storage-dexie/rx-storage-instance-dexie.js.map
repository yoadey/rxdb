{"version":3,"file":"rx-storage-instance-dexie.js","names":["Subject","now","ensureNotFalsy","attachmentObjectId","closeDexieDb","fromStorageToDexie","getDexieDbWithTables","getDocsInDb","RX_STORAGE_NAME_DEXIE","dexieCount","dexieQuery","getPrimaryFieldOfPrimaryKey","categorizeBulkWriteRows","addRxStorageMultiInstanceSupport","newRxError","instanceId","RxStorageInstanceDexie","storage","databaseName","collectionName","schema","internals","options","settings","changes$","primaryPath","primaryKey","_proto","prototype","bulkWrite","documentWrites","context","ensureNotClosed","forEach","row","document","_rev","previous","args","state","ret","success","error","documentKeys","map","writeRow","categorized","dexieDb","transaction","dexieTable","dexieAttachmentsTable","docsInDbMap","Map","docsInDbWithInternals","docWithDexieInternals","doc","set","errors","bulkPutDocs","bulkInsertDocs","push","bulkUpdateDocs","d","booleanIndexes","length","bulkPut","putAttachments","attachmentsAdd","attachment","id","documentId","attachmentId","data","attachmentData","attachmentsUpdate","bulkDelete","attachmentsRemove","eventBulk","events","lastState","newestRow","checkpoint","lwt","_meta","endTime","next","findDocumentsById","ids","deleted","docsInDb","documentInDb","_deleted","query","preparedQuery","count","queryPlan","selectorSatisfiedByIndex","result","mode","documents","changeStream","asObservable","cleanup","minimumDeletedTime","maxDeletionTime","toRemove","where","below","toArray","removeIds","getAttachmentData","_digest","get","Error","remove","clear","close","closed","complete","conflictResultionTasks","resolveConflictResultionTask","_taskSolution","createDexieStorageInstance","params","instance","Promise","resolve"],"sources":["../../../../src/plugins/storage-dexie/rx-storage-instance-dexie.ts"],"sourcesContent":["import {\n    Subject,\n    Observable\n} from 'rxjs';\nimport {\n    now,\n    PROMISE_RESOLVE_VOID,\n    RX_META_LWT_MINIMUM,\n    sortDocumentsByLastWriteTime,\n    lastOfArray,\n    ensureNotFalsy\n} from '../utils/index.ts';\nimport type {\n    RxStorageInstance,\n    RxStorageChangeEvent,\n    RxDocumentData,\n    BulkWriteRow,\n    RxStorageBulkWriteResponse,\n    RxStorageQueryResult,\n    RxJsonSchema,\n    RxStorageInstanceCreationParams,\n    EventBulk,\n    StringKeys,\n    RxConflictResultionTask,\n    RxConflictResultionTaskSolution,\n    RxStorageDefaultCheckpoint,\n    CategorizeBulkWriteRowsOutput,\n    RxStorageCountResult,\n    PreparedQuery\n} from '../../types/index.d.ts';\nimport type {\n    DexieSettings,\n    DexieStorageInternals\n} from '../../types/plugins/dexie.d.ts';\nimport { RxStorageDexie } from './rx-storage-dexie.ts';\nimport {\n    attachmentObjectId,\n    closeDexieDb,\n    fromDexieToStorage,\n    fromStorageToDexie,\n    getDexieDbWithTables,\n    getDocsInDb,\n    RX_STORAGE_NAME_DEXIE\n} from './dexie-helper.ts';\nimport { dexieCount, dexieQuery } from './dexie-query.ts';\nimport { getPrimaryFieldOfPrimaryKey } from '../../rx-schema-helper.ts';\nimport { categorizeBulkWriteRows } from '../../rx-storage-helper.ts';\nimport { addRxStorageMultiInstanceSupport } from '../../rx-storage-multiinstance.ts';\nimport { newRxError } from '../../rx-error.ts';\n\nlet instanceId = now();\n\nexport class RxStorageInstanceDexie<RxDocType> implements RxStorageInstance<\n    RxDocType,\n    DexieStorageInternals,\n    DexieSettings,\n    RxStorageDefaultCheckpoint\n> {\n    public readonly primaryPath: StringKeys<RxDocumentData<RxDocType>>;\n    private changes$: Subject<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint>> = new Subject();\n    public readonly instanceId = instanceId++;\n    public closed?: Promise<void>;\n\n    constructor(\n        public readonly storage: RxStorageDexie,\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly schema: Readonly<RxJsonSchema<RxDocumentData<RxDocType>>>,\n        public readonly internals: DexieStorageInternals,\n        public readonly options: Readonly<DexieSettings>,\n        public readonly settings: DexieSettings\n    ) {\n        this.primaryPath = getPrimaryFieldOfPrimaryKey(this.schema.primaryKey);\n    }\n\n    async bulkWrite(\n        documentWrites: BulkWriteRow<RxDocType>[],\n        context: string\n    ): Promise<RxStorageBulkWriteResponse<RxDocType>> {\n        ensureNotClosed(this);\n\n\n        /**\n         * Check some assumptions to ensure RxDB\n         * does not call the storage with an invalid write.\n         */\n        documentWrites.forEach(row => {\n            // ensure revision is set\n            if (\n                !row.document._rev ||\n                (\n                    row.previous &&\n                    !row.previous._rev\n                )\n            ) {\n                throw newRxError('SNH', { args: { row } });\n            }\n        });\n\n\n\n        const state = await this.internals;\n        const ret: RxStorageBulkWriteResponse<RxDocType> = {\n            success: [],\n            error: []\n        };\n\n        const documentKeys: string[] = documentWrites.map(writeRow => writeRow.document[this.primaryPath] as any);\n        let categorized: CategorizeBulkWriteRowsOutput<RxDocType> | undefined;\n        await state.dexieDb.transaction(\n            'rw',\n            state.dexieTable,\n            state.dexieAttachmentsTable,\n            async () => {\n                const docsInDbMap = new Map<string, RxDocumentData<RxDocType>>();\n                const docsInDbWithInternals = await getDocsInDb<RxDocType>(this.internals, documentKeys);\n                docsInDbWithInternals.forEach(docWithDexieInternals => {\n                    const doc = docWithDexieInternals;\n                    if (doc) {\n                        docsInDbMap.set((doc as any)[this.primaryPath], doc as any);\n                    }\n                    return doc;\n                });\n\n                categorized = categorizeBulkWriteRows<RxDocType>(\n                    this,\n                    this.primaryPath as any,\n                    docsInDbMap,\n                    documentWrites,\n                    context\n                );\n                ret.error = categorized.errors;\n\n                /**\n                 * Batch up the database operations\n                 * so we can later run them in bulk.\n                 */\n                let bulkPutDocs: any[] = [];\n                categorized.bulkInsertDocs.forEach(row => {\n                    ret.success.push(row.document);\n                    bulkPutDocs.push(row.document);\n                });\n                categorized.bulkUpdateDocs.forEach(row => {\n                    ret.success.push(row.document);\n                    bulkPutDocs.push(row.document);\n                });\n                bulkPutDocs = bulkPutDocs.map(d => fromStorageToDexie(state.booleanIndexes, d));\n                if (bulkPutDocs.length > 0) {\n                    await state.dexieTable.bulkPut(bulkPutDocs);\n                }\n\n\n\n                // handle attachments\n                const putAttachments: { id: string, data: string }[] = [];\n                categorized.attachmentsAdd.forEach(attachment => {\n                    putAttachments.push({\n                        id: attachmentObjectId(attachment.documentId, attachment.attachmentId),\n                        data: attachment.attachmentData.data\n                    });\n                });\n                categorized.attachmentsUpdate.forEach(attachment => {\n                    putAttachments.push({\n                        id: attachmentObjectId(attachment.documentId, attachment.attachmentId),\n                        data: attachment.attachmentData.data\n                    });\n                });\n                await state.dexieAttachmentsTable.bulkPut(putAttachments);\n                await state.dexieAttachmentsTable.bulkDelete(\n                    categorized.attachmentsRemove.map(attachment => attachmentObjectId(attachment.documentId, attachment.attachmentId))\n                );\n\n            });\n\n        categorized = ensureNotFalsy(categorized);\n        if (categorized.eventBulk.events.length > 0) {\n            const lastState = ensureNotFalsy(categorized.newestRow).document;\n            categorized.eventBulk.checkpoint = {\n                id: lastState[this.primaryPath],\n                lwt: lastState._meta.lwt\n            };\n            categorized.eventBulk.endTime = now();\n            this.changes$.next(categorized.eventBulk);\n        }\n\n        return ret;\n    }\n\n    async findDocumentsById(\n        ids: string[],\n        deleted: boolean\n    ): Promise<RxDocumentData<RxDocType>[]> {\n        ensureNotClosed(this);\n        const state = await this.internals;\n        const ret: RxDocumentData<RxDocType>[] = [];\n\n        await state.dexieDb.transaction(\n            'r',\n            state.dexieTable,\n            async () => {\n                const docsInDb = await getDocsInDb<RxDocType>(this.internals, ids);\n                docsInDb.forEach(documentInDb => {\n                    if (\n                        documentInDb &&\n                        (!documentInDb._deleted || deleted)\n                    ) {\n                        ret.push(documentInDb);\n                    }\n                });\n            });\n        return ret;\n    }\n\n    query(preparedQuery: PreparedQuery<RxDocType>): Promise<RxStorageQueryResult<RxDocType>> {\n        ensureNotClosed(this);\n        return dexieQuery(\n            this,\n            preparedQuery\n        );\n    }\n    async count(\n        preparedQuery: PreparedQuery<RxDocType>\n    ): Promise<RxStorageCountResult> {\n        if (preparedQuery.queryPlan.selectorSatisfiedByIndex) {\n            const result = await dexieCount(this, preparedQuery);\n            return {\n                count: result,\n                mode: 'fast'\n            };\n        } else {\n            const result = await dexieQuery(this, preparedQuery);\n            return {\n                count: result.documents.length,\n                mode: 'slow'\n            };\n        }\n    }\n\n    changeStream(): Observable<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint>> {\n        ensureNotClosed(this);\n        return this.changes$.asObservable();\n    }\n\n    async cleanup(minimumDeletedTime: number): Promise<boolean> {\n        ensureNotClosed(this);\n        const state = await this.internals;\n        await state.dexieDb.transaction(\n            'rw',\n            state.dexieTable,\n            async () => {\n                const maxDeletionTime = now() - minimumDeletedTime;\n                /**\n                 * TODO only fetch _deleted=true\n                 */\n                const toRemove = await state.dexieTable\n                    .where('_meta.lwt')\n                    .below(maxDeletionTime)\n                    .toArray();\n                const removeIds: string[] = [];\n                toRemove.forEach(doc => {\n                    if (doc._deleted === '1') {\n                        removeIds.push(doc[this.primaryPath]);\n                    }\n                });\n                await state.dexieTable.bulkDelete(removeIds);\n            }\n        );\n\n        /**\n         * TODO instead of deleting all deleted docs at once,\n         * only clean up some of them and return false if there are more documents to clean up.\n         * This ensures that when many documents have to be purged,\n         * we do not block the more important tasks too long.\n         */\n        return true;\n    }\n\n    async getAttachmentData(documentId: string, attachmentId: string, _digest: string): Promise<string> {\n        ensureNotClosed(this);\n        const state = await this.internals;\n        const id = attachmentObjectId(documentId, attachmentId);\n        return await state.dexieDb.transaction(\n            'r',\n            state.dexieAttachmentsTable,\n            async () => {\n\n                const attachment = await state.dexieAttachmentsTable.get(id);\n                if (attachment) {\n                    return attachment.data;\n                } else {\n                    throw new Error('attachment missing documentId: ' + documentId + ' attachmentId: ' + attachmentId);\n                }\n            });\n    }\n\n    async remove(): Promise<void> {\n        ensureNotClosed(this);\n        const state = await this.internals;\n        await state.dexieTable.clear()\n        return this.close();\n    }\n\n\n    close(): Promise<void> {\n        if (this.closed) {\n            return this.closed;\n        }\n        this.closed = (async () => {\n            this.changes$.complete();\n            await closeDexieDb(this.internals);\n        })();\n        return this.closed;\n    }\n\n    conflictResultionTasks(): Observable<RxConflictResultionTask<RxDocType>> {\n        return new Subject();\n    }\n    async resolveConflictResultionTask(_taskSolution: RxConflictResultionTaskSolution<RxDocType>): Promise<void> { }\n\n}\n\n\nexport async function createDexieStorageInstance<RxDocType>(\n    storage: RxStorageDexie,\n    params: RxStorageInstanceCreationParams<RxDocType, DexieSettings>,\n    settings: DexieSettings\n): Promise<RxStorageInstanceDexie<RxDocType>> {\n    const internals = getDexieDbWithTables(\n        params.databaseName,\n        params.collectionName,\n        settings,\n        params.schema\n    );\n\n    const instance = new RxStorageInstanceDexie(\n        storage,\n        params.databaseName,\n        params.collectionName,\n        params.schema,\n        internals,\n        params.options,\n        settings\n    );\n\n    await addRxStorageMultiInstanceSupport(\n        RX_STORAGE_NAME_DEXIE,\n        params,\n        instance\n    );\n\n    return Promise.resolve(instance);\n}\n\n\n\nfunction ensureNotClosed(\n    instance: RxStorageInstanceDexie<any>\n) {\n    if (instance.closed) {\n        throw new Error('RxStorageInstanceDexie is closed ' + instance.databaseName + '-' + instance.collectionName);\n    }\n}\n"],"mappings":"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","ignoreList":[]}