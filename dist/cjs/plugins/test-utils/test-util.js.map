{"version":3,"file":"test-util.js","names":["_assert","_interopRequireDefault","require","_index","testMultipleTimes","times","title","test","Array","fill","forEach","it","ensureCollectionsHaveEqualState","c1","c2","requestIdlePromise","getJson","collection","docs","find","exec","map","d","toJSON","json1","json2","assert","deepStrictEqual","err","console","error","dir","name","ensureReplicationHasNoErrors","replicationState","error$","subscribe","log","parameters","errors"],"sources":["../../../../src/plugins/test-utils/test-util.ts"],"sourcesContent":["import type { Func } from 'mocha';\nimport assert from 'assert';\nimport type { RxCollection } from '../../types';\nimport { requestIdlePromise } from '../utils/index.ts';\nimport type { RxReplicationState } from '../replication/index.ts';\n\nexport function testMultipleTimes(times: number, title: string, test: Func) {\n    new Array(times).fill(0).forEach(() => {\n        it(title, test);\n    });\n}\n\nexport async function ensureCollectionsHaveEqualState<RxDocType>(\n    c1: RxCollection<RxDocType>,\n    c2: RxCollection<RxDocType>\n) {\n    await requestIdlePromise();\n    const getJson = async (collection: RxCollection<RxDocType>) => {\n        const docs = await collection.find().exec();\n        return docs.map(d => d.toJSON());\n    };\n    const json1 = await getJson(c1);\n    const json2 = await getJson(c2);\n    try {\n        assert.deepStrictEqual(\n            json1,\n            json2\n        );\n    } catch (err) {\n        console.error('ensureCollectionsHaveEqualState() states not equal:');\n        console.dir({\n            [c1.name]: json1,\n            [c2.name]: json2\n        });\n        throw err;\n    }\n}\n\nexport function ensureReplicationHasNoErrors(replicationState: RxReplicationState<any, any>) {\n    /**\n     * We do not have to unsubscribe because the observable will cancel anyway.\n     */\n    replicationState.error$.subscribe(err => {\n        console.error('ensureReplicationHasNoErrors() has error:');\n        console.log(err);\n        if (err?.parameters?.errors) {\n            throw err.parameters.errors[0];\n        }\n        throw err;\n    });\n}\n"],"mappings":";;;;;;;;;AACA,IAAAA,OAAA,GAAAC,sBAAA,CAAAC,OAAA;AAEA,IAAAC,MAAA,GAAAD,OAAA;AAGO,SAASE,iBAAiBA,CAACC,KAAa,EAAEC,KAAa,EAAEC,IAAU,EAAE;EACxE,IAAIC,KAAK,CAACH,KAAK,CAAC,CAACI,IAAI,CAAC,CAAC,CAAC,CAACC,OAAO,CAAC,MAAM;IACnCC,EAAE,CAACL,KAAK,EAAEC,IAAI,CAAC;EACnB,CAAC,CAAC;AACN;AAEO,eAAeK,+BAA+BA,CACjDC,EAA2B,EAC3BC,EAA2B,EAC7B;EACE,MAAM,IAAAC,yBAAkB,EAAC,CAAC;EAC1B,IAAMC,OAAO,GAAG,MAAOC,UAAmC,IAAK;IAC3D,IAAMC,IAAI,GAAG,MAAMD,UAAU,CAACE,IAAI,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC;IAC3C,OAAOF,IAAI,CAACG,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACC,MAAM,CAAC,CAAC,CAAC;EACpC,CAAC;EACD,IAAMC,KAAK,GAAG,MAAMR,OAAO,CAACH,EAAE,CAAC;EAC/B,IAAMY,KAAK,GAAG,MAAMT,OAAO,CAACF,EAAE,CAAC;EAC/B,IAAI;IACAY,eAAM,CAACC,eAAe,CAClBH,KAAK,EACLC,KACJ,CAAC;EACL,CAAC,CAAC,OAAOG,GAAG,EAAE;IACVC,OAAO,CAACC,KAAK,CAAC,qDAAqD,CAAC;IACpED,OAAO,CAACE,GAAG,CAAC;MACR,CAAClB,EAAE,CAACmB,IAAI,GAAGR,KAAK;MAChB,CAACV,EAAE,CAACkB,IAAI,GAAGP;IACf,CAAC,CAAC;IACF,MAAMG,GAAG;EACb;AACJ;AAEO,SAASK,4BAA4BA,CAACC,gBAA8C,EAAE;EACzF;AACJ;AACA;EACIA,gBAAgB,CAACC,MAAM,CAACC,SAAS,CAACR,GAAG,IAAI;IACrCC,OAAO,CAACC,KAAK,CAAC,2CAA2C,CAAC;IAC1DD,OAAO,CAACQ,GAAG,CAACT,GAAG,CAAC;IAChB,IAAIA,GAAG,EAAEU,UAAU,EAAEC,MAAM,EAAE;MACzB,MAAMX,GAAG,CAACU,UAAU,CAACC,MAAM,CAAC,CAAC,CAAC;IAClC;IACA,MAAMX,GAAG;EACb,CAAC,CAAC;AACN","ignoreList":[]}