{"version":3,"file":"index.js","names":["createQueryBuilder","OTHER_MANGO_ATTRIBUTES","OTHER_MANGO_OPERATORS","createRxQuery","clone","RXQUERY_OTHER_FLAG","runBuildingStep","rxQuery","functionName","value","queryBuilder","mangoQuery","other","queryBuilderJson","toJSON","op","query","collection","path","applyBuildingStep","proto","RxDBQueryBuilderPlugin","name","rxdb","prototypes","RxQuery","forEach","attribute","operator"],"sources":["../../../../src/plugins/query-builder/index.ts"],"sourcesContent":["import {\n    createQueryBuilder,\n    OTHER_MANGO_ATTRIBUTES,\n    OTHER_MANGO_OPERATORS\n} from './mquery/nosql-query-builder.ts';\nimport type { RxPlugin, RxQuery } from '../../types/index.d.ts';\nimport { createRxQuery } from '../../rx-query.ts';\nimport { clone } from '../../plugins/utils/index.ts';\n\n// if the query-builder plugin is used, we have to save its last path\nconst RXQUERY_OTHER_FLAG = 'queryBuilderPath';\n\nexport function runBuildingStep<RxDocumentType, RxQueryResult>(\n    rxQuery: RxQuery<RxDocumentType, RxQueryResult>,\n    functionName: string,\n    value: any\n): RxQuery<RxDocumentType, RxQueryResult> {\n    const queryBuilder = createQueryBuilder(clone(rxQuery.mangoQuery), rxQuery.other[RXQUERY_OTHER_FLAG]);\n\n    (queryBuilder as any)[functionName](value); // run\n\n    const queryBuilderJson = queryBuilder.toJSON();\n\n    return createRxQuery<RxDocumentType>(\n        rxQuery.op,\n        queryBuilderJson.query,\n        rxQuery.collection,\n        {\n            ...rxQuery.other,\n            [RXQUERY_OTHER_FLAG]: queryBuilderJson.path\n        }\n    ) as RxQuery<RxDocumentType>;\n}\n\nexport function applyBuildingStep(\n    proto: any,\n    functionName: string\n): void {\n    proto[functionName] = function (this: RxQuery, value: any) {\n        return runBuildingStep(this, functionName, value);\n    };\n}\n\nexport * from './mquery/nosql-query-builder.ts';\n\nexport const RxDBQueryBuilderPlugin: RxPlugin = {\n    name: 'query-builder',\n    rxdb: true,\n    prototypes: {\n        RxQuery(proto: any) {\n            [\n                'where',\n                'equals',\n                'eq',\n                'or',\n                'nor',\n                'and',\n                'mod',\n                'exists',\n                'elemMatch',\n                'sort'\n            ].forEach(attribute => {\n                applyBuildingStep(proto, attribute);\n            });\n            OTHER_MANGO_ATTRIBUTES.forEach(attribute => {\n                applyBuildingStep(proto, attribute);\n            });\n            OTHER_MANGO_OPERATORS.forEach(operator => {\n                applyBuildingStep(proto, operator);\n            });\n        }\n    }\n};\n"],"mappings":"AAAA,SACIA,kBAAkB,EAClBC,sBAAsB,EACtBC,qBAAqB,QAClB,iCAAiC;AAExC,SAASC,aAAa,QAAQ,mBAAmB;AACjD,SAASC,KAAK,QAAQ,8BAA8B;;AAEpD;AACA,IAAMC,kBAAkB,GAAG,kBAAkB;AAE7C,OAAO,SAASC,eAAeA,CAC3BC,OAA+C,EAC/CC,YAAoB,EACpBC,KAAU,EAC4B;EACtC,IAAMC,YAAY,GAAGV,kBAAkB,CAACI,KAAK,CAACG,OAAO,CAACI,UAAU,CAAC,EAAEJ,OAAO,CAACK,KAAK,CAACP,kBAAkB,CAAC,CAAC;EAEpGK,YAAY,CAASF,YAAY,CAAC,CAACC,KAAK,CAAC,CAAC,CAAC;;EAE5C,IAAMI,gBAAgB,GAAGH,YAAY,CAACI,MAAM,CAAC,CAAC;EAE9C,OAAOX,aAAa,CAChBI,OAAO,CAACQ,EAAE,EACVF,gBAAgB,CAACG,KAAK,EACtBT,OAAO,CAACU,UAAU,EAClB;IACI,GAAGV,OAAO,CAACK,KAAK;IAChB,CAACP,kBAAkB,GAAGQ,gBAAgB,CAACK;EAC3C,CACJ,CAAC;AACL;AAEA,OAAO,SAASC,iBAAiBA,CAC7BC,KAAU,EACVZ,YAAoB,EAChB;EACJY,KAAK,CAACZ,YAAY,CAAC,GAAG,UAAyBC,KAAU,EAAE;IACvD,OAAOH,eAAe,CAAC,IAAI,EAAEE,YAAY,EAAEC,KAAK,CAAC;EACrD,CAAC;AACL;AAEA,cAAc,iCAAiC;AAE/C,OAAO,IAAMY,sBAAgC,GAAG;EAC5CC,IAAI,EAAE,eAAe;EACrBC,IAAI,EAAE,IAAI;EACVC,UAAU,EAAE;IACRC,OAAOA,CAACL,KAAU,EAAE;MAChB,CACI,OAAO,EACP,QAAQ,EACR,IAAI,EACJ,IAAI,EACJ,KAAK,EACL,KAAK,EACL,KAAK,EACL,QAAQ,EACR,WAAW,EACX,MAAM,CACT,CAACM,OAAO,CAACC,SAAS,IAAI;QACnBR,iBAAiB,CAACC,KAAK,EAAEO,SAAS,CAAC;MACvC,CAAC,CAAC;MACF1B,sBAAsB,CAACyB,OAAO,CAACC,SAAS,IAAI;QACxCR,iBAAiB,CAACC,KAAK,EAAEO,SAAS,CAAC;MACvC,CAAC,CAAC;MACFzB,qBAAqB,CAACwB,OAAO,CAACE,QAAQ,IAAI;QACtCT,iBAAiB,CAACC,KAAK,EAAEQ,QAAQ,CAAC;MACtC,CAAC,CAAC;IACN;EACJ;AACJ,CAAC","ignoreList":[]}